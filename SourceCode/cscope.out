cscope 15 $HOME\Google Drive\DO AN DAI HOC _ CAM UNG DIEN DUNG\CODE\STM32\36. Measure_touch_HID_USB"               0000550673
	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\MEMORY~1.H

20 #i‚de‡
LIBOPENCM3_CM3_MEMORYMAP_H


21 
	#LIBOPENCM3_CM3_MEMORYMAP_H


	)

26 
	#PPBI_BASE
 (0xE0000000U)

	)

29 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

31 
	#ITM_BASE
 (
PPBI_BASE
 + 0x0000)

	)

34 
	#DWT_BASE
 (
PPBI_BASE
 + 0x1000)

	)

37 
	#FPB_BASE
 (
PPBI_BASE
 + 0x2000)

	)

42 
	#SCS_BASE
 (
PPBI_BASE
 + 0xE000)

	)

47 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

48 
	#TPIU_BASE
 (
PPBI_BASE
 + 0x40000)

	)

54 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

56 
	#ITR_BASE
 (
SCS_BASE
 + 0x0000)

	)

60 
	#SYS_TICK_BASE
 (
SCS_BASE
 + 0x0010)

	)

63 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100)

	)

66 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00)

	)

69 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90)

	)

72 #i‡
deföed
(
__ARM_ARCH_6M__
)

74 
	#DEBUG_BASE
 (
SCS_BASE
 + 0x0DF0)

	)

78 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

80 
	#STIR_BASE
 (
SCS_BASE
 + 0x0F00)

	)

82 
	#ID_BASE
 (
SCS_BASE
 + 0x0FD0)

	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\assert.h

47 #i‚de‡
LIBOPENCM3_CM3_ASSERT_H


48 
	#LIBOPENCM3_CM3_ASSERT_H


	)

50 
	~<lib›ícm3/cm3/comm⁄.h
>

52 
	#CM3_LIKELY
(
ex¥
Ë(
	`__buûtö_ex≥˘
(!!”x¥), 1))

	)

54 #ifde‡
NDEBUG


55 
	#cm3_as£π
(
ex¥
Ë()0

	)

56 
	#cm3_as£π_nŸ_ªached
(Ëdÿ{ } 1)

	)

58 #ifde‡
CM3_ASSERT_VERBOSE


59 
	#cm3_as£π
(
ex¥
) do { \

60 i‡(
	`CM3_LIKELY
(
ex¥
)) { \

63 
	`cm3_as£π_Áûed_vîbo£
( \

64 
__FILE__
, 
__LINE__
, \

65 
__func__
, #expr); \

67 } 0)

	)

68 
	#cm3_as£π_nŸ_ªached
() \

69 
	`cm3_as£π_Áûed_vîbo£
( \

70 
__FILE__
, 
__LINE__
, \

71 
__func__
, 0)

	)

85 
	#cm3_as£π
(
ex¥
) do { \

86 i‡(
	`CM3_LIKELY
(
ex¥
)) { \

89 
	`cm3_as£π_Áûed
(); \

91 } 0)

	)

101 
	#cm3_as£π_nŸ_ªached
(Ë
	`cm3_as£π_Áûed
()

	)

105 
BEGIN_DECLS


115 
	$cm3_as£π_Áûed
(Ë
	`__©åibuã__
((
__n‹ëu∫__
));

130 
	$cm3_as£π_Áûed_vîbo£
(c⁄° *
fûe
, 
löe
, c⁄° *
func
,

131 c⁄° *
as£π_ex¥
Ë
	`__©åibuã__
((
__n‹ëu∫__
));

133 
END_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\common.h

20 #i‚de‡
LIBOPENCM3_CM3_COMMON_H


21 
	#LIBOPENCM3_CM3_COMMON_H


	)

23 
	~<°döt.h
>

24 
	~<°dboﬁ.h
>

28 #ifde‡
__˝lu•lus


29 
	#BEGIN_DECLS
 "C" {

	)

30 
	#END_DECLS
 }

	)

32 
	#BEGIN_DECLS


	)

33 
	#END_DECLS


	)

38 #ifde‡
__GNUC__


39 #i‡
__GNUC__
 > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 > 4)

40 
	#LIBOPENCM3_DEPRECATED
(
x
Ë
	`__©åibuã__
((
	`dïªˇãd
(x)))

	)

42 
	#LIBOPENCM3_DEPRECATED
(
x
Ë
	`__©åibuã__
((
dïªˇãd
))

	)

45 
	#LIBOPENCM3_DEPRECATED
(
x
)

	)

50 
	#MMIO8
(
addr
Ë(*(vﬁ©ûê
uöt8_t
 *)◊ddr))

	)

51 
	#MMIO16
(
addr
Ë(*(vﬁ©ûê
uöt16_t
 *)◊ddr))

	)

52 
	#MMIO32
(
addr
Ë(*(vﬁ©ûê
uöt32_t
 *)◊ddr))

	)

53 
	#MMIO64
(
addr
Ë(*(vﬁ©ûê
uöt64_t
 *)◊ddr))

	)

56 
	#BBIO_SRAM
(
addr
, 
bô
) \

57 
	`MMIO32
((((
uöt32_t
)
addr
Ë& 0x0FFFFFË* 32 + 0x22000000 + (
bô
Ë* 4)

	)

59 
	#BBIO_PERIPH
(
addr
, 
bô
) \

60 
	`MMIO32
((((
uöt32_t
)
addr
Ë& 0x0FFFFFË* 32 + 0x42000000 + (
bô
Ë* 4)

	)

63 
	#BIT0
 (1<<0)

	)

64 
	#BIT1
 (1<<1)

	)

65 
	#BIT2
 (1<<2)

	)

66 
	#BIT3
 (1<<3)

	)

67 
	#BIT4
 (1<<4)

	)

68 
	#BIT5
 (1<<5)

	)

69 
	#BIT6
 (1<<6)

	)

70 
	#BIT7
 (1<<7)

	)

71 
	#BIT8
 (1<<8)

	)

72 
	#BIT9
 (1<<9)

	)

73 
	#BIT10
 (1<<10)

	)

74 
	#BIT11
 (1<<11)

	)

75 
	#BIT12
 (1<<12)

	)

76 
	#BIT13
 (1<<13)

	)

77 
	#BIT14
 (1<<14)

	)

78 
	#BIT15
 (1<<15)

	)

79 
	#BIT16
 (1<<16)

	)

80 
	#BIT17
 (1<<17)

	)

81 
	#BIT18
 (1<<18)

	)

82 
	#BIT19
 (1<<19)

	)

83 
	#BIT20
 (1<<20)

	)

84 
	#BIT21
 (1<<21)

	)

85 
	#BIT22
 (1<<22)

	)

86 
	#BIT23
 (1<<23)

	)

87 
	#BIT24
 (1<<24)

	)

88 
	#BIT25
 (1<<25)

	)

89 
	#BIT26
 (1<<26)

	)

90 
	#BIT27
 (1<<27)

	)

91 
	#BIT28
 (1<<28)

	)

92 
	#BIT29
 (1<<29)

	)

93 
	#BIT30
 (1<<30)

	)

94 
	#BIT31
 (1<<31)

	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\cortex.h

31 #i‚de‡
LIBOPENCM3_CORTEX_H


32 
	#LIBOPENCM3_CORTEX_H


	)

36 
	~<°dboﬁ.h
>

37 
	~<°döt.h
>

44 
ölöe
 
	$cm_íabÀ_öãºu±s
()

46 
__asm__
 volatile ("CPSIE I\n");

47 
	}
}

54 
ölöe
 
	$cm_dißbÀ_öãºu±s
()

56 
__asm__
 volatile ("CPSID I\n");

57 
	}
}

64 
ölöe
 
	$cm_íabÀ_Áu…s
()

66 
__asm__
 volatile ("CPSIE F\n");

67 
	}
}

74 
ölöe
 
	$cm_dißbÀ_Áu…s
()

76 
__asm__
 volatile ("CPSID F\n");

77 
	}
}

86 
__©åibuã__
((
Æways_ölöe
))

87 
ölöe
 
boﬁ
 
	$cm_is_masked_öãºu±s
()

89 
uöt32_t
 
ªsu…
;

90 
__asm__
 vﬁ©ûê("MRS %0, PRIMASK" : "Ù" (
ªsu…
));

91  
ªsu…
;

92 
	}
}

101 
__©åibuã__
((
Æways_ölöe
))

102 
ölöe
 
boﬁ
 
	$cm_is_masked_Áu…s
()

104 
uöt32_t
 
ªsu…
;

105 
__asm__
 vﬁ©ûê("MRS %0, FAULTMASK" : "Ù" (
ªsu…
));

106  
ªsu…
;

107 
	}
}

119 
__©åibuã__
((
Æways_ölöe
))

120 
ölöe
 
uöt32_t
 
	$cm_mask_öãºu±s
(
uöt32_t
 
mask
)

122 
uöt32_t
 
ﬁd
;

123 
__asm__
 
	`__vﬁ©ûe__
("MRS %0, PRIMASK" : "Ù" (
ﬁd
));

124 
__asm__
 
	`__vﬁ©ûe__
("" : : : "memory");

125 
__asm__
 
	`__vﬁ©ûe__
("MSR PRIMASK, %0" : : "r" (
mask
));

126  
ﬁd
;

127 
	}
}

139 
__©åibuã__
((
Æways_ölöe
))

140 
ölöe
 
uöt32_t
 
	$cm_mask_Áu…s
(
uöt32_t
 
mask
)

142 
uöt32_t
 
ﬁd
;

143 
__asm__
 
	`__vﬁ©ûe__
 ("MRS %0, FAULTMASK" : "Ù" (
ﬁd
));

144 
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "memory");

145 
__asm__
 
	`__vﬁ©ûe__
 ("MSR FAULTMASK, %0" : : "r" (
mask
));

146  
ﬁd
;

147 
	}
}

160 #i‡!
deföed
(
__DOXYGEN__
)

162 
ölöe
 
uöt32_t
 
	$__cm_©omic_£t
(
uöt32_t
 *
vÆ
)

164  
	`cm_mask_öãºu±s
(*
vÆ
);

165 
	}
}

167 
	#__CM_SAVER
(
°©e
) \

168 
__vÆ
 = (
°©e
), \

169 
__ßve
 
	`__©åibuã__
((
	`__˛ónup__
(
__cm_©omic_£t
))) = \

170 
	`__cm_©omic_£t
(&
__vÆ
)

	)

217 #i‡
deföed
(
__DOXYGEN__
)

218 
	#CM_ATOMIC_BLOCK
()

	)

220 
	#CM_ATOMIC_BLOCK
() \

221 
uöt32_t
 
	`__CM_SAVER
(
åue
), 
__my
 =Årue; __my; __my = 
Ál£
)

	)

271 #i‡
deföed
(
__DOXYGEN__
)

272 
	#CM_ATOMIC_CONTEXT
()

	)

274 
	#CM_ATOMIC_CONTEXT
(Ë
uöt32_t
 
	`__CM_SAVER
(
åue
)

	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\doc-cm3.h

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\dwt.h

20 #i‚de‡
LIBOPENCM3_CM3_DWT_H


21 
	#LIBOPENCM3_CM3_DWT_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

30 
	#DWT_CTRL
 
	`MMIO32
(
DWT_BASE
 + 0x00)

	)

33 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

35 
	#DWT_CYCCNT
 
	`MMIO32
(
DWT_BASE
 + 0x04)

	)

36 
	#DWT_CPICNT
 
	`MMIO32
(
DWT_BASE
 + 0x08)

	)

37 
	#DWT_EXCCNT
 
	`MMIO32
(
DWT_BASE
 + 0x0C)

	)

38 
	#DWT_SLEEPCNT
 
	`MMIO32
(
DWT_BASE
 + 0x10)

	)

39 
	#DWT_LSUCNT
 
	`MMIO32
(
DWT_BASE
 + 0x14)

	)

40 
	#DWT_FOLDCNT
 
	`MMIO32
(
DWT_BASE
 + 0x18)

	)

44 
	#DWT_PCSR
 
	`MMIO32
(
DWT_BASE
 + 0x1C)

	)

45 
	#DWT_COMP
(
n
Ë
	`MMIO32
(
DWT_BASE
 + 0x20 + (nË* 16)

	)

46 
	#DWT_MASK
(
n
Ë
	`MMIO32
(
DWT_BASE
 + 0x24 + (nË* 16)

	)

47 
	#DWT_FUNCTION
(
n
Ë
	`MMIO32
(
DWT_BASE
 + 0x28 + (nË* 16)

	)

55 
	#DWT_CTRL_NUMCOMP_SHIFT
 28

	)

56 
	#DWT_CTRL_NUMCOMP
 (0x0F << 
DWT_CTRL_NUMCOMP_SHIFT
)

	)

59 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

61 
	#DWT_CTRL_NOTRCPKT
 (1 << 27)

	)

62 
	#DWT_CTRL_NOEXTTRIG
 (1 << 26)

	)

63 
	#DWT_CTRL_NOCYCCNT
 (1 << 25)

	)

64 
	#DWT_CTRL_NOPRFCCNT
 (1 << 24)

	)

66 
	#DWT_CTRL_CYCEVTENA
 (1 << 22)

	)

67 
	#DWT_CTRL_FOLDEVTENA
 (1 << 21)

	)

68 
	#DWT_CTRL_LSUEVTENA
 (1 << 20)

	)

69 
	#DWT_CTRL_SLEEPEVTENA
 (1 << 19)

	)

70 
	#DWT_CTRL_EXCEVTENA
 (1 << 18)

	)

71 
	#DWT_CTRL_CPIEVTENA
 (1 << 17)

	)

72 
	#DWT_CTRL_EXCTRCENA
 (1 << 16)

	)

73 
	#DWT_CTRL_PCSAMPLENA
 (1 << 12)

	)

75 
	#DWT_CTRL_SYNCTAP_SHIFT
 10

	)

76 
	#DWT_CTRL_SYNCTAP
 (3 << 
DWT_CTRL_SYNCTAP_SHIFT
)

	)

77 
	#DWT_CTRL_SYNCTAP_DISABLED
 (0 << 
DWT_CTRL_SYNCTAP_SHIFT
)

	)

78 
	#DWT_CTRL_SYNCTAP_BIT24
 (1 << 
DWT_CTRL_SYNCTAP_SHIFT
)

	)

79 
	#DWT_CTRL_SYNCTAP_BIT26
 (2 << 
DWT_CTRL_SYNCTAP_SHIFT
)

	)

80 
	#DWT_CTRL_SYNCTAP_BIT28
 (3 << 
DWT_CTRL_SYNCTAP_SHIFT
)

	)

82 
	#DWT_CTRL_CYCTAP
 (1 << 9)

	)

84 
	#DWT_CTRL_POSTCNT_SHIFT
 5

	)

85 
	#DWT_CTRL_POSTCNT
 (0x0F << 
DWT_CTRL_POSTCNT_SHIFT
)

	)

87 
	#DWT_CTRL_POSTPRESET_SHIFT
 1

	)

88 
	#DWT_CTRL_POSTPRESET
 (0x0F << 
DWT_CTRL_POSTPRESET_SHIFT
)

	)

90 
	#DWT_CTRL_CYCCNTENA
 (1 << 0)

	)

96 
	#DWT_MASKx_MASK
 0x0F

	)

100 
	#DWT_FUNCTIONx_MATCHED
 (1 << 24)

	)

103 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

105 
	#DWT_FUNCTIONx_DATAVADDR1_SHIFT
 16

	)

106 
	#DWT_FUNCTIONx_DATAVADDR1
 (15 << 
DWT_FUNCTIONx_DATAVADDR1_SHIFT
)

	)

108 
	#DWT_FUNCTIONx_DATAVADDR0_SHIFT
 12

	)

109 
	#DWT_FUNCTIONx_DATAVADDR0
 (15 << 
DWT_FUNCTIONx_DATAVADDR0_SHIFT
)

	)

111 
	#DWT_FUNCTIONx_DATAVSIZE_SHIFT
 10

	)

112 
	#DWT_FUNCTIONx_DATAVSIZE
 (3 << 
DWT_FUNCTIONx_DATAVSIZE_SHIFT
)

	)

113 
	#DWT_FUNCTIONx_DATAVSIZE_BYTE
 (0 << 
DWT_FUNCTIONx_DATAVSIZE_SHIFT
)

	)

114 
	#DWT_FUNCTIONx_DATAVSIZE_HALF
 (1 << 
DWT_FUNCTIONx_DATAVSIZE_SHIFT
)

	)

115 
	#DWT_FUNCTIONx_DATAVSIZE_WORD
 (2 << 
DWT_FUNCTIONx_DATAVSIZE_SHIFT
)

	)

117 
	#DWT_FUNCTIONx_LNK1ENA
 (1 << 9)

	)

118 
	#DWT_FUNCTIONx_DATAVMATCH
 (1 << 8)

	)

119 
	#DWT_FUNCTIONx_CYCMATCH
 (1 << 7)

	)

120 
	#DWT_FUNCTIONx_EMITRANGE
 (1 << 5)

	)

124 
	#DWT_FUNCTIONx_FUNCTION
 15

	)

125 
	#DWT_FUNCTIONx_FUNCTION_DISABLED
 0

	)

128 #i‡
deföed
(
__ARM_ARCH_6M__
)

130 
	#DWT_FUNCTIONx_FUNCTION_PCWATCH
 4

	)

131 
	#DWT_FUNCTIONx_FUNCTION_DWATCH_R
 5

	)

132 
	#DWT_FUNCTIONx_FUNCTION_DWATCH_W
 6

	)

133 
	#DWT_FUNCTIONx_FUNCTION_DWATCH_RW
 7

	)

145 
BEGIN_DECLS


147 
boﬁ
 
dwt_íabÀ_cy˛e_cou¡î
();

148 
uöt32_t
 
dwt_ªad_cy˛e_cou¡î
();

150 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\fpb.h

20 #i‚de‡
LIBOPENCM3_CM3_FPB_H


21 
	#LIBOPENCM3_CM3_FPB_H


	)

26 #i‡!
deföed
(
__ARM_ARCH_7M__
Ë|| !deföed(
__ARM_ARCH_7EM__
)

35 
	#FPB_CTRL
 
	`MMIO32
(
FPB_BASE
 + 0)

	)

38 
	#FPB_REMAP
 
	`MMIO32
(
FPB_BASE
 + 4)

	)

41 
	#FPB_COMP
 (&
	`MMIO32
(
FPB_BASE
 + 8))

	)

44 
	#FPB_LSR
 
	`MMIO32
(
FPB_BASE
 + 0xFB4)

	)

46 
	#FPB_LAR
 
	`MMIO32
(
FPB_BASE
 + 0xFB0)

	)

55 
	#FPB_CTRL_NUM_CODE2_MASK
 (0x7 << 12)

	)

57 
	#FPB_CTRL_NUM_LIT_MASK
 (0x‡<< 8)

	)

59 
	#FPB_CTRL_NUM_CODE1_MASK
 (0x‡<< 4)

	)

63 
	#FPB_CTRL_KEY
 (1 << 1)

	)

65 
	#FPB_CTRL_ENABLE
 (1 << 0)

	)

73 
	#FPB_COMP_REPLACE_REMAP
 (0x0 << 30)

	)

74 
	#FPB_COMP_REPLACE_BREAK_LOWER
 (0x1 << 30)

	)

75 
	#FPB_COMP_REPLACE_BREAK_UPPER
 (0x2 << 30)

	)

76 
	#FPB_COMP_REPLACE_BREAK_BOTH
 (0x3 << 30)

	)

77 
	#FPB_COMP_REPLACE_MASK
 (0x3 << 30)

	)

85 
	#FPB_COMP_ENABLE
 (1 << 0)

	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\itm.h

20 #i‚de‡
LIBOPENCM3_CM3_ITM_H


21 
	#LIBOPENCM3_CM3_ITM_H


	)

26 #i‡!
deföed
(
__ARM_ARCH_7M__
Ë&& !deföed(
__ARM_ARCH_7EM__
)

33 
	#ITM_STIM8
(
n
Ë(
	`MMIO8
(
ITM_BASE
 + (“)*4)))

	)

34 
	#ITM_STIM16
(
n
Ë(
	`MMIO16
(
ITM_BASE
 + (“)*4)))

	)

35 
	#ITM_STIM32
(
n
Ë(
	`MMIO32
(
ITM_BASE
 + (“)*4)))

	)

38 
	#ITM_TER
 (&
	`MMIO32
(
ITM_BASE
 + 0xE00))

	)

41 
	#ITM_TPR
 
	`MMIO32
(
ITM_BASE
 + 0xE40)

	)

44 
	#ITM_TCR
 
	`MMIO32
(
ITM_BASE
 + 0xE80)

	)

47 
	#ITM_LSR
 
	`MMIO32
(
ITM_BASE
 + 0xFB4)

	)

49 
	#ITM_LAR
 
	`MMIO32
(
ITM_BASE
 + 0xFB0)

	)

57 
	#ITM_STIM_FIFOREADY
 (1 << 0)

	)

73 
	#ITM_TCR_BUSY
 (1 << 23)

	)

74 
	#ITM_TCR_TRACE_BUS_ID_MASK
 (0x3‡<< 16)

	)

76 
	#ITM_TCR_TSPRESCALE_NONE
 (0 << 8)

	)

77 
	#ITM_TCR_TSPRESCALE_DIV4
 (1 << 8)

	)

78 
	#ITM_TCR_TSPRESCALE_DIV16
 (2 << 8)

	)

79 
	#ITM_TCR_TSPRESCALE_DIV64
 (3 << 8)

	)

80 
	#ITM_TCR_TSPRESCALE_MASK
 (3 << 8)

	)

82 
	#ITM_TCR_SWOENA
 (1 << 4)

	)

83 
	#ITM_TCR_TXENA
 (1 << 3)

	)

84 
	#ITM_TCR_SYNCENA
 (1 << 2)

	)

85 
	#ITM_TCR_TSENA
 (1 << 1)

	)

86 
	#ITM_TCR_ITMENA
 (1 << 0)

	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\mpu.h

37 #i‚de‡
LIBOPENCM3_MPU_H


38 
	#LIBOPENCM3_MPU_H


	)

40 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

41 
	~<lib›ícm3/cm3/comm⁄.h
>

49 
	#MPU_TYPE
 
	`MMIO32
(
MPU_BASE
 + 0x00)

	)

50 
	#MPU_CTRL
 
	`MMIO32
(
MPU_BASE
 + 0x04)

	)

51 
	#MPU_RNR
 
	`MMIO32
(
MPU_BASE
 + 0x08)

	)

52 
	#MPU_RBAR
 
	`MMIO32
(
MPU_BASE
 + 0x0C)

	)

53 
	#MPU_RASR
 
	`MMIO32
(
MPU_BASE
 + 0x10)

	)

64 
	#MPU_TYPE_IREGION_LSB
 16

	)

65 
	#MPU_TYPE_IREGION
 (0xFF << 
MPU_TYPE_IREGION_LSB
)

	)

67 
	#MPU_TYPE_DREGION_LSB
 8

	)

68 
	#MPU_TYPE_DREGION
 (0xFF << 
MPU_TYPE_DREGION_LSB
)

	)

70 
	#MPU_TYPE_SEPARATE
 (1<<0)

	)

77 
	#MPU_CTRL_PRIVDEFENA
 (1<<2)

	)

78 
	#MPU_CTRL_HFNMIENA
 (1<<1)

	)

79 
	#MPU_CTRL_ENABLE
 (1<<0)

	)

86 
	#MPU_RNR_REGION_LSB
 0

	)

87 
	#MPU_RNR_REGION
 (0xFF << 
MPU_RNR_REGION_LSB
)

	)

95 
	#MPU_RBAR_ADDR
 0xFFFFFFE0

	)

96 
	#MPU_RBAR_VALID
 (1<<4)

	)

97 
	#MPU_RBAR_REGION_LSB
 0

	)

98 
	#MPU_RBAR_REGION
 (0xF << 
MPU_RBAR_REGION_LSB
)

	)

105 
	#MPU_RASR_ATTRS_LSB
 16

	)

106 
	#MPU_RASR_ATTRS
 (0xFFFF << 
MPU_RASR_ATTRS_LSB
)

	)

107 
	#MPU_RASR_SRD_LSB
 8

	)

108 
	#MPU_RASR_SRD
 (0xFF << 
MPU_RASR_SRD_LSB
)

	)

109 
	#MPU_RASR_SIZE_LSB
 1

	)

110 
	#MPU_RASR_SIZE
 (0x1F << 
MPU_RASR_SIZE_LSB
)

	)

111 
	#MPU_RASR_ENABLE
 (1 << 0)

	)

118 
	#MPU_RASR_ATTR_XN
 (1 << 28)

	)

119 
	#MPU_RASR_ATTR_AP
 (7 << 24)

	)

120 
	#MPU_RASR_ATTR_AP_PNO_UNO
 (0 << 24)

	)

121 
	#MPU_RASR_ATTR_AP_PRW_UNO
 (1 << 24)

	)

122 
	#MPU_RASR_ATTR_AP_PRW_URO
 (2 << 24)

	)

123 
	#MPU_RASR_ATTR_AP_PRW_URW
 (3 << 24)

	)

124 
	#MPU_RASR_ATTR_AP_PRO_UNO
 (5 << 24)

	)

125 
	#MPU_RASR_ATTR_AP_PRO_URO
 (6 << 24)

	)

126 
	#MPU_RASR_ATTR_TEX
 (7 << 19)

	)

127 
	#MPU_RASR_ATTR_S
 (1 << 18)

	)

128 
	#MPU_RASR_ATTR_C
 (1 << 17)

	)

129 
	#MPU_RASR_ATTR_B
 (1 << 16)

	)

130 
	#MPU_RASR_ATTR_SCB
 (7 << 16)

	)

136 
BEGIN_DECLS


139 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\nvic.h

37 #i‚de‡
LIBOPENCM3_NVIC_H


38 
	#LIBOPENCM3_NVIC_H


	)

40 
	~<lib›ícm3/cm3/comm⁄.h
>

41 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

48 
	#NVIC_ISER
(
i£r_id
Ë
	`MMIO32
(
NVIC_BASE
 + 0x00 + \

49 ((
i£r_id
Ë* 4))

	)

56 
	#NVIC_ICER
(
i˚r_id
Ë
	`MMIO32
(
NVIC_BASE
 + 0x80 + \

57 ((
i˚r_id
Ë* 4))

	)

64 
	#NVIC_ISPR
(
i•r_id
Ë
	`MMIO32
(
NVIC_BASE
 + 0x100 + \

65 ((
i•r_id
Ë* 4))

	)

72 
	#NVIC_ICPR
(
i˝r_id
Ë
	`MMIO32
(
NVIC_BASE
 + 0x180 + \

73 ((
i˝r_id
Ë* 4))

	)

78 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

81 
	#NVIC_IABR
(
übr_id
Ë
	`MMIO32
(
NVIC_BASE
 + 0x200 + \

82 ((
übr_id
Ë* 4))

	)

90 
	#NVIC_IPR
(
ùr_id
Ë
	`MMIO8
(
NVIC_BASE
 + 0x300 + \

91 (
ùr_id
))

	)

93 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

95 
	#NVIC_STIR
 
	`MMIO32
(
STIR_BASE
)

	)

106 
	#NVIC_NMI_IRQ
 -14

	)

107 
	#NVIC_HARD_FAULT_IRQ
 -13

	)

110 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

111 
	#NVIC_MEM_MANAGE_IRQ
 -12

	)

112 
	#NVIC_BUS_FAULT_IRQ
 -11

	)

113 
	#NVIC_USAGE_FAULT_IRQ
 -10

	)

117 
	#NVIC_SV_CALL_IRQ
 -5

	)

120 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

121 
	#DEBUG_MONITOR_IRQ
 -4

	)

125 
	#NVIC_PENDSV_IRQ
 -2

	)

126 
	#NVIC_SYSTICK_IRQ
 -1

	)

133 
	~<lib›ícm3/di•©ch/nvic.h
>

137 
BEGIN_DECLS


139 
nvic_íabÀ_úq
(
uöt8_t
 
úqn
);

140 
nvic_dißbÀ_úq
(
uöt8_t
 
úqn
);

141 
uöt8_t
 
nvic_gë_≥ndög_úq
(uöt8_à
úqn
);

142 
nvic_£t_≥ndög_úq
(
uöt8_t
 
úqn
);

143 
nvic_˛ór_≥ndög_úq
(
uöt8_t
 
úqn
);

144 
uöt8_t
 
nvic_gë_úq_íabÀd
(uöt8_à
úqn
);

145 
nvic_£t_¥i‹ôy
(
uöt8_t
 
úqn
, uöt8_à
¥i‹ôy
);

148 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

149 
uöt8_t
 
nvic_gë_a˘ive_úq
(uöt8_à
úqn
);

150 
nvic_gíî©e_so·w¨e_öãºu±
(
uöt16_t
 
úqn
);

153 
ª£t_h™dÀr
();

154 
nmi_h™dÀr
();

155 
h¨d_Áu…_h™dÀr
();

156 
sv_ˇŒ_h™dÀr
();

157 
≥nd_sv_h™dÀr
();

158 
sys_tick_h™dÀr
();

161 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

162 
mem_m™age_h™dÀr
();

163 
bus_Áu…_h™dÀr
();

164 
ußge_Áu…_h™dÀr
();

165 
debug_m⁄ô‹_h™dÀr
();

168 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\scb.h

21 #i‚de‡
LIBOPENCM3_SCB_H


22 
	#LIBOPENCM3_SCB_H


	)

24 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

25 
	~<lib›ícm3/cm3/comm⁄.h
>

30 
	#SCB_CPUID
 
	`MMIO32
(
SCB_BASE
 + 0x00)

	)

33 
	#SCB_ICSR
 
	`MMIO32
(
SCB_BASE
 + 0x04)

	)

36 
	#SCB_VTOR
 
	`MMIO32
(
SCB_BASE
 + 0x08)

	)

39 
	#SCB_AIRCR
 
	`MMIO32
(
SCB_BASE
 + 0x0C)

	)

42 
	#SCB_SCR
 
	`MMIO32
(
SCB_BASE
 + 0x10)

	)

45 
	#SCB_CCR
 
	`MMIO32
(
SCB_BASE
 + 0x14)

	)

49 
	#SCB_SHPR
(
sh¥_id
Ë
	`MMIO8
(
SCB_BASE
 + 0x18 + (sh¥_id))

	)

50 
	#SCB_SHPR1
 
	`MMIO32
(
SCB_BASE
 + 0x18)

	)

51 
	#SCB_SHPR2
 
	`MMIO32
(
SCB_BASE
 + 0x1C)

	)

52 
	#SCB_SHPR3
 
	`MMIO32
(
SCB_BASE
 + 0x20)

	)

55 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

57 
	#SCB_SHCSR
 
	`MMIO32
(
SCB_BASE
 + 0x24)

	)

60 
	#SCB_CFSR
 
	`MMIO32
(
SCB_BASE
 + 0x28)

	)

63 
	#SCB_HFSR
 
	`MMIO32
(
SCB_BASE
 + 0x2C)

	)

66 
	#SCB_DFSR
 
	`MMIO32
(
SCB_BASE
 + 0x30)

	)

69 
	#SCB_MMFAR
 
	`MMIO32
(
SCB_BASE
 + 0x34)

	)

72 
	#SCB_BFAR
 
	`MMIO32
(
SCB_BASE
 + 0x38)

	)

75 
	#SCB_AFSR
 
	`MMIO32
(
SCB_BASE
 + 0x3C)

	)

78 
	#SCB_ID_PFR0
 
	`MMIO32
(
SCB_BASE
 + 0x40)

	)

81 
	#SCB_ID_PFR1
 
	`MMIO32
(
SCB_BASE
 + 0x44)

	)

84 
	#SCB_ID_DFR0
 
	`MMIO32
(
SCB_BASE
 + 0x48)

	)

87 
	#SCB_ID_AFR0
 
	`MMIO32
(
SCB_BASE
 + 0x4C)

	)

90 
	#SCB_ID_MMFR0
 
	`MMIO32
(
SCB_BASE
 + 0x50)

	)

93 
	#SCB_ID_MMFR1
 
	`MMIO32
(
SCB_BASE
 + 0x54)

	)

96 
	#SCB_ID_MMFR2
 
	`MMIO32
(
SCB_BASE
 + 0x58)

	)

99 
	#SCB_ID_MMFR3
 
	`MMIO32
(
SCB_BASE
 + 0x5C)

	)

102 
	#SCB_ID_ISAR0
 
	`MMIO32
(
SCB_BASE
 + 0x60)

	)

105 
	#SCB_ID_ISAR1
 
	`MMIO32
(
SCB_BASE
 + 0x64)

	)

108 
	#SCB_ID_ISAR2
 
	`MMIO32
(
SCB_BASE
 + 0x68)

	)

111 
	#SCB_ID_ISAR3
 
	`MMIO32
(
SCB_BASE
 + 0x6C)

	)

114 
	#SCB_ID_ISAR4
 
	`MMIO32
(
SCB_BASE
 + 0x70)

	)

117 
	#SCB_CPACR
 
	`MMIO32
(
SCB_BASE
 + 0x88)

	)

120 
	#SCB_FPCCR
 
	`MMIO32
(
SCB_BASE
 + 0x234)

	)

123 
	#SCB_FPCAR
 
	`MMIO32
(
SCB_BASE
 + 0x238)

	)

126 
	#SCB_FPDSCR
 
	`MMIO32
(
SCB_BASE
 + 0x23C)

	)

129 
	#SCB_MVFR0
 
	`MMIO32
(
SCB_BASE
 + 0x240)

	)

132 
	#SCB_MVFR1
 
	`MMIO32
(
SCB_BASE
 + 0x244)

	)

140 
	#SCB_CPUID_IMPLEMENTER_LSB
 24

	)

141 
	#SCB_CPUID_IMPLEMENTER
 (0xFF << 
SCB_CPUID_IMPLEMENTER_LSB
)

	)

143 
	#SCB_CPUID_VARIANT_LSB
 20

	)

144 
	#SCB_CPUID_VARIANT
 (0xF << 
SCB_CPUID_VARIANT_LSB
)

	)

147 
	#SCB_CPUID_CONSTANT_LSB
 16

	)

148 
	#SCB_CPUID_CONSTANT
 (0xF << 
SCB_CPUID_CONSTANT_LSB
)

	)

149 
	#SCB_CPUID_CONSTANT_ARMV6
 (0xC << 
SCB_CPUID_CONSTANT_LSB
)

	)

150 
	#SCB_CPUID_CONSTANT_ARMV7
 (0xF << 
SCB_CPUID_CONSTANT_LSB
)

	)

153 
	#SCB_CPUID_PARTNO_LSB
 4

	)

154 
	#SCB_CPUID_PARTNO
 (0xFFF << 
SCB_CPUID_PARTNO_LSB
)

	)

156 
	#SCB_CPUID_REVISION_LSB
 0

	)

157 
	#SCB_CPUID_REVISION
 (0xF << 
SCB_CPUID_REVISION_LSB
)

	)

162 
	#SCB_ICSR_NMIPENDSET
 (1 << 31)

	)

165 
	#SCB_ICSR_PENDSVSET
 (1 << 28)

	)

167 
	#SCB_ICSR_PENDSVCLR
 (1 << 27)

	)

169 
	#SCB_ICSR_PENDSTSET
 (1 << 26)

	)

171 
	#SCB_ICSR_PENDSTCLR
 (1 << 25)

	)

174 
	#SCB_ICSR_ISRPREEMPT
 (1 << 23)

	)

176 
	#SCB_ICSR_ISRPENDING
 (1 << 22)

	)

178 
	#SCB_ICSR_VECTPENDING_LSB
 12

	)

179 
	#SCB_ICSR_VECTPENDING
 (0x1FF << 
SCB_ICSR_VECTPENDING_LSB
)

	)

181 
	#SCB_ICSR_RETOBASE
 (1 << 11)

	)

184 
	#SCB_ICSR_VECTACTIVE_LSB
 0

	)

185 
	#SCB_ICSR_VECTACTIVE
 (0x1FF << 
SCB_ICSR_VECTACTIVE_LSB
)

	)

192 #i‡
deföed
(
__ARM_ARCH_6M__
)

194 
	#SCB_VTOR_TBLOFF_LSB
 7

	)

195 
	#SCB_VTOR_TBLOFF
 (0x1FFFFFF << 
SCB_VTOR_TBLOFF_LSB
)

	)

197 #ñi‡
deföed
(
CM1
)

200 #ñi‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

206 
	#SCB_VTOR_TBLOFF_LSB
 9

	)

207 
	#SCB_VTOR_TBLOFF
 (0x7FFFFF << 
SCB_VTOR_TBLOFF_LSB
)

	)

214 
	#SCB_AIRCR_VECTKEYSTAT_LSB
 16

	)

215 
	#SCB_AIRCR_VECTKEYSTAT
 (0xFFFF << 
SCB_AIRCR_VECTKEYSTAT_LSB
)

	)

216 
	#SCB_AIRCR_VECTKEY
 (0x05FA << 
SCB_AIRCR_VECTKEYSTAT_LSB
)

	)

219 
	#SCB_AIRCR_ENDIANESS
 (1 << 15)

	)

222 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

225 
	#SCB_AIRCR_PRIGROUP_GROUP16_NOSUB
 (0x3 << 8)

	)

226 
	#SCB_AIRCR_PRIGROUP_GROUP8_SUB2
 (0x4 << 8)

	)

227 
	#SCB_AIRCR_PRIGROUP_GROUP4_SUB4
 (0x5 << 8)

	)

228 
	#SCB_AIRCR_PRIGROUP_GROUP2_SUB8
 (0x6 << 8)

	)

229 
	#SCB_AIRCR_PRIGROUP_NOGROUP_SUB16
 (0x7 << 8)

	)

230 
	#SCB_AIRCR_PRIGROUP_MASK
 (0x7 << 8)

	)

231 
	#SCB_AIRCR_PRIGROUP_SHIFT
 8

	)

236 
	#SCB_AIRCR_SYSRESETREQ
 (1 << 2)

	)

238 
	#SCB_AIRCR_VECTCLRACTIVE
 (1 << 1)

	)

241 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

243 
	#SCB_AIRCR_VECTRESET
 (1 << 0)

	)

250 
	#SCB_SCR_SEVEONPEND
 (1 << 4)

	)

253 
	#SCB_SCR_SLEEPDEEP
 (1 << 2)

	)

255 
	#SCB_SCR_SLEEPONEXIT
 (1 << 1)

	)

262 
	#SCB_CCR_STKALIGN
 (1 << 9)

	)

265 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

267 
	#SCB_CCR_BFHFNMIGN
 (1 << 8)

	)

270 
	#SCB_CCR_DIV_0_TRP
 (1 << 4)

	)

274 
	#SCB_CCR_UNALIGN_TRP
 (1 << 3)

	)

277 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

280 
	#SCB_CCR_USERSETMPEND
 (1 << 1)

	)

282 
	#SCB_CCR_NONBASETHRDENA
 (1 << 0)

	)

287 
	#SCB_SHPR_PRI_4_MEMMANAGE
 0

	)

288 
	#SCB_SHPR_PRI_5_BUSFAULT
 1

	)

289 
	#SCB_SHPR_PRI_6_USAGEFAULT
 2

	)

290 
	#SCB_SHPR_PRI_7_RESERVED
 3

	)

292 
	#SCB_SHPR_PRI_8_RESERVED
 4

	)

293 
	#SCB_SHPR_PRI_9_RESERVED
 5

	)

294 
	#SCB_SHPR_PRI_10_RESERVED
 6

	)

295 
	#SCB_SHPR_PRI_11_SVCALL
 7

	)

297 
	#SCB_SHPR_PRI_12_RESERVED
 8

	)

298 
	#SCB_SHPR_PRI_13_RESERVED
 9

	)

299 
	#SCB_SHPR_PRI_14_PENDSV
 10

	)

300 
	#SCB_SHPR_PRI_15_SYSTICK
 11

	)

303 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

308 
	#SCB_SHCSR_USGFAULTENA
 (1 << 18)

	)

310 
	#SCB_SHCSR_BUSFAULTENA
 (1 << 17)

	)

312 
	#SCB_SHCSR_MEMFAULTENA
 (1 << 16)

	)

314 
	#SCB_SHCSR_SVCALLPENDED
 (1 << 15)

	)

316 
	#SCB_SHCSR_BUSFAULTPENDED
 (1 << 14)

	)

318 
	#SCB_SHCSR_MEMFAULTPENDED
 (1 << 13)

	)

320 
	#SCB_SHCSR_USGFAULTPENDED
 (1 << 12)

	)

322 
	#SCB_SHCSR_SYSTICKACT
 (1 << 11)

	)

324 
	#SCB_SHCSR_PENDSVACT
 (1 << 10)

	)

327 
	#SCB_SHCSR_MONITORACT
 (1 << 8)

	)

329 
	#SCB_SHCSR_SVCALLACT
 (1 << 7)

	)

332 
	#SCB_SHCSR_USGFAULTACT
 (1 << 3)

	)

335 
	#SCB_SHCSR_BUSFAULTACT
 (1 << 1)

	)

337 
	#SCB_SHCSR_MEMFAULTACT
 (1 << 0)

	)

343 
	#SCB_CFSR_DIVBYZERO
 (1 << 25)

	)

345 
	#SCB_CFSR_UNALIGNED
 (1 << 24)

	)

348 
	#SCB_CFSR_NOCP
 (1 << 19)

	)

350 
	#SCB_CFSR_INVPC
 (1 << 18)

	)

352 
	#SCB_CFSR_INVSTATE
 (1 << 17)

	)

354 
	#SCB_CFSR_UNDEFINSTR
 (1 << 16)

	)

356 
	#SCB_CFSR_BFARVALID
 (1 << 15)

	)

359 
	#SCB_CFSR_STKERR
 (1 << 12)

	)

361 
	#SCB_CFSR_UNSTKERR
 (1 << 11)

	)

363 
	#SCB_CFSR_IMPRECISERR
 (1 << 10)

	)

365 
	#SCB_CFSR_PRECISERR
 (1 << 9)

	)

367 
	#SCB_CFSR_IBUSERR
 (1 << 8)

	)

369 
	#SCB_CFSR_MMARVALID
 (1 << 7)

	)

372 
	#SCB_CFSR_MSTKERR
 (1 << 4)

	)

374 
	#SCB_CFSR_MUNSTKERR
 (1 << 3)

	)

377 
	#SCB_CFSR_DACCVIOL
 (1 << 1)

	)

379 
	#SCB_CFSR_IACCVIOL
 (1 << 0)

	)

384 
	#SCB_HFSR_DEBUG_VT
 (1 << 31)

	)

386 
	#SCB_HFSR_FORCED
 (1 << 30)

	)

389 
	#SCB_HFSR_VECTTBL
 (1 << 1)

	)

403 
	#SCB_CPACR_NONE
 0

	)

404 
	#SCB_CPACR_PRIV
 1

	)

405 
	#SCB_CPACR_FULL
 3

	)

408 
	#SCB_CPACR_CP10
 (1 << 20)

	)

410 
	#SCB_CPACR_CP11
 (1 << 22)

	)

415 
BEGIN_DECLS


417 
	sscb_ex˚±i⁄_°ack_‰ame
 {

418 
uöt32_t
 
	mr0
;

419 
uöt32_t
 
	mr1
;

420 
uöt32_t
 
	mr2
;

421 
uöt32_t
 
	mr3
;

422 
uöt32_t
 
	mr12
;

423 
uöt32_t
 
	mÃ
;

424 
uöt32_t
 
	mpc
;

425 
uöt32_t
 
	mxp§
;

426 } 
__©åibuã__
((
∑cked
));

428 
	#SCB_GET_EXCEPTION_STACK_FRAME
(
f
) \

430 
asm
 volatile ("mov %[frameptr], sp" \

431 : [
‰amïå
]"Ù" (
f
)); \

432 } 0)

	)

434 
	$scb_ª£t_sy°em
(Ë
	`__©åibuã__
((
n‹ëu∫
, 
«ked
));

437 #i‡
	`deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

438 
	$scb_ª£t_c‹e
(Ë
	`__©åibuã__
((
n‹ëu∫
, 
«ked
));

439 
	`scb_£t_¥i‹ôy_groupög
(
uöt32_t
 
¥igroup
);

442 
END_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\scs.h

21 #i‚de‡
LIBOPENCM3_CM3_SCS_H


22 
	#LIBOPENCM3_CM3_SCS_H


	)

47 
	#SCS_SHPR
(
ùr_id
Ë
	`MMIO8
(
SCS_BASE
 + 0xD18 + (ùr_id))

	)

64 
	#SCS_DHCSR
 
	`MMIO32
(
SCS_BASE
 + 0xDF0)

	)

77 
	#SCS_DCRSR
 
	`MMIO32
(
SCS_BASE
 + 0xDF4)

	)

96 
	#SCS_DCRDR
 
	`MMIO32
(
SCS_BASE
 + 0xDF8)

	)

109 
	#SCS_DEMCR
 
	`MMIO32
(
SCS_BASE
 + 0xDFC)

	)

112 
	#SCS_DHCSR_DBGKEY
 0xA05F0000

	)

113 
	#SCS_DHCSR_C_DEBUGEN
 0x00000001

	)

114 
	#SCS_DHCSR_C_HALT
 0x00000002

	)

115 
	#SCS_DHCSR_C_STEP
 0x00000004

	)

116 
	#SCS_DHCSR_C_MASKINTS
 0x00000008

	)

117 
	#SCS_DHCSR_C_SNAPSTALL
 0x00000020

	)

118 
	#SCS_DHCSR_S_REGRDY
 0x00010000

	)

119 
	#SCS_DHCSR_S_HALT
 0x00020000

	)

120 
	#SCS_DHCSR_S_SLEEP
 0x00040000

	)

121 
	#SCS_DHCSR_S_LOCKUP
 0x00080000

	)

122 
	#SCS_DHCSR_S_RETIRE_ST
 0x01000000

	)

123 
	#SCS_DHCSR_S_RESET_ST
 0x02000000

	)

126 
	#SCS_DCRSR_REGSEL_MASK
 0x0000001F

	)

127 
	#SCS_DCRSR_REGSEL_XPSR
 0x00000010

	)

128 
	#SCS_DCRSR_REGSEL_MSP
 0x00000011

	)

129 
	#SCS_DCRSR_REGSEL_PSP
 0x00000012

	)

133 
	#SCS_DEMCR_TRCENA
 (1 << 24)

	)

135 
	#SCS_DEMCR_MON_REQ
 (1 << 19)

	)

136 
	#SCS_DEMCR_MON_STEP
 (1 << 18)

	)

137 
	#SCS_DEMCR_VC_MON_PEND
 (1 << 17)

	)

138 
	#SCS_DEMCR_VC_MON_EN
 (1 << 16)

	)

140 
	#SCS_DEMCR_VC_HARDERR
 (1 << 10)

	)

141 
	#SCS_DEMCR_VC_INTERR
 (1 << 9)

	)

142 
	#SCS_DEMCR_VC_BUSERR
 (1 << 8)

	)

143 
	#SCS_DEMCR_VC_STATERR
 (1 << 7)

	)

144 
	#SCS_DEMCR_VC_CHKERR
 (1 << 6)

	)

145 
	#SCS_DEMCR_VC_NOCPERR
 (1 << 5)

	)

146 
	#SCS_DEMCR_VC_MMERR
 (1 << 4)

	)

148 
	#SCS_DEMCR_VC_CORERESET
 (1 << 0)

	)

175 
	#SCS_SYST_CSR
 
	`MMIO32
(
SCS_BASE
 + 0x10)

	)

185 
	#CM_SCS_SYST_RVR
 
	`MMIO32
(
SCS_BASE
 + 0x14)

	)

192 
	#CM_SCS_SYST_CVR
 
	`MMIO32
(
SCS_BASE
 + 0x18)

	)

200 
	#CM_SCS_SYST_CALIB
 
	`MMIO32
(
SCS_BASE
 + 0x1C)

	)

204 
	#SCS_SYST_CSR_ENABLE
 (
BIT0
)

	)

206 
	#SCS_SYST_CSR_TICKINT
 (
BIT1
)

	)

208 
	#SCS_SYST_CSR_CLKSOURCE
 (
BIT2
)

	)

215 
	#SCS_SYST_CSR_COUNTFLAG
 (
BIT16
)

	)

232 
	#SCS_SYST_SYST_CALIB_TENMS_MASK
 (
BIT24
-1)

	)

239 
	#SCS_SYST_SYST_CALIB_VALUE_INEXACT
 (
BIT30
)

	)

248 
	#SCS_SYST_SYST_CALIB_REF_NOT_IMPLEMENTED
 (
BIT31
)

	)

265 
	#SCS_DWT_CTRL
 
	`MMIO32
(
DWT_BASE
 + 0x00)

	)

281 
	#SCS_DWT_CYCCNT
 
	`MMIO32
(
DWT_BASE
 + 0x04)

	)

294 
	#SCS_DWT_CPICNT
 
	`MMIO32
(
DWT_BASE
 + 0x08)

	)

297 
	#SCS_DWT_EXCCNT
 
	`MMIO32
(
DWT_BASE
 + 0x0C)

	)

300 
	#SCS_DWT_SLEEPCNT
 
	`MMIO32
(
DWT_BASE
 + 0x10)

	)

303 
	#SCS_DWT_LSUCNT
 
	`MMIO32
(
DWT_BASE
 + 0x14)

	)

306 
	#SCS_DWT_FOLDCNT
 
	`MMIO32
(
DWT_BASE
 + 0x18)

	)

309 
	#SCS_DWT_PCSR
 
	`MMIO32
(
DWT_BASE
 + 0x18)

	)

312 
	#SCS_DWT_LSR
 
	`MMIO32
(
SCS_DWT_BASE
 + 0xFB4)

	)

314 
	#SCS_DWT_LAR
 
	`MMIO32
(
SCS_DWT_BASE
 + 0xFB0)

	)

322 
	#SCS_DWT_CTRL_CYCCNTENA
 (
BIT0
)

	)

325 
	#SCS_LSR_SLK
 (1<<1)

	)

327 
	#SCS_LSR_SLI
 (1<<0)

	)

329 
	#SCS_LAR_KEY
 0xC5ACCE55

	)

334 
	#SCS_DWT_CYCLE_COUNTER_ENABLED
(Ë((
SCS_DEMCR
 |
SCS_DEMCR_TRCENA
)\

335 (
SCS_DWT_CTRL
 |
SCS_DWT_CTRL_CYCCNTENA
))

	)

337 
	#SCS_SYSTICK_DISABLED
(Ë(
SCS_SYST_CSR
 = 0)

	)

342 
	#SCS_SYSTICK_ENABLED
(Ë(
SCS_SYST_CSR
 = (
SCS_SYST_CSR_ENABLE
 | \

343 
SCS_SYST_CSR_CLKSOURCE
))

	)

346 
	#SCS_SYSTICK_AND_IRQ_ENABLED
(Ë(
SCS_SYST_CSR
 = (
SCS_SYST_CSR_ENABLE
 | \

347 
SCS_SYST_CSR_CLKSOURCE
 | \

348 
SCS_SYST_CSR_TICKINT
))

	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\sync.h

20 #i‚de‡
LIBOPENCM3_CM3_SYNC_H


21 
	#LIBOPENCM3_CM3_SYNC_H


	)

23 
	~"comm⁄.h
"

25 
__dmb
();

35 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

37 
uöt32_t
 
__ldªx
(vﬁ©ûêuöt32_à*
addr
);

38 
uöt32_t
 
__°ªx
(uöt32_à
vÆ
, vﬁ©ûêuöt32_à*
addr
);

44 
uöt32_t
 
	tmuãx_t
;

46 
	#MUTEX_UNLOCKED
 0

	)

47 
	#MUTEX_LOCKED
 1

	)

49 
muãx_lock
(
muãx_t
 *
m
);

50 
uöt32_t
 
muãx_åylock
(
muãx_t
 *
m
);

51 
muãx_u∆ock
(
muãx_t
 *
m
);

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\systick.h

43 #i‚de‡
LIBOPENCM3_SYSTICK_H


44 
	#LIBOPENCM3_SYSTICK_H


	)

46 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

47 
	~<lib›ícm3/cm3/comm⁄.h
>

52 
	#STK_CSR
 
	`MMIO32
(
SYS_TICK_BASE
 + 0x00)

	)

55 
	#STK_RVR
 
	`MMIO32
(
SYS_TICK_BASE
 + 0x04)

	)

58 
	#STK_CVR
 
	`MMIO32
(
SYS_TICK_BASE
 + 0x08)

	)

61 
	#STK_CALIB
 
	`MMIO32
(
SYS_TICK_BASE
 + 0x0C)

	)

66 
	#STK_CSR_COUNTFLAG
 (1 << 16)

	)

70 
	#STK_CSR_CLKSOURCE_LSB
 2

	)

71 
	#STK_CSR_CLKSOURCE
 (1 << 
STK_CSR_CLKSOURCE_LSB
)

	)

77 #i‡
deföed
(
__ARM_ARCH_6M__
)

78 
	#STK_CSR_CLKSOURCE_EXT
 (0 << 
STK_CSR_CLKSOURCE_LSB
)

	)

79 
	#STK_CSR_CLKSOURCE_AHB
 (1 << 
STK_CSR_CLKSOURCE_LSB
)

	)

81 
	#STK_CSR_CLKSOURCE_AHB_DIV8
 (0 << 
STK_CSR_CLKSOURCE_LSB
)

	)

82 
	#STK_CSR_CLKSOURCE_AHB
 (1 << 
STK_CSR_CLKSOURCE_LSB
)

	)

87 
	#STK_CSR_TICKINT
 (1 << 1)

	)

89 
	#STK_CSR_ENABLE
 (1 << 0)

	)

94 
	#STK_RVR_RELOAD
 0x00FFFFFF

	)

100 
	#STK_CVR_CURRENT
 0x00FFFFFF

	)

105 
	#STK_CALIB_NOREF
 (1 << 31)

	)

107 
	#STK_CALIB_SKEW
 (1 << 30)

	)

110 
	#STK_CALIB_TENMS
 0x00FFFFFF

	)

114 
BEGIN_DECLS


116 
sy°ick_£t_ªlﬂd
(
uöt32_t
 
vÆue
);

117 
boﬁ
 
sy°ick_£t_‰equícy
(
uöt32_t
 
‰eq
, uöt32_à
ahb
);

118 
uöt32_t
 
sy°ick_gë_ªlﬂd
();

119 
uöt32_t
 
sy°ick_gë_vÆue
();

120 
sy°ick_£t_˛ocksour˚
(
uöt8_t
 
˛ocksour˚
);

121 
sy°ick_öãºu±_íabÀ
();

122 
sy°ick_öãºu±_dißbÀ
();

123 
sy°ick_cou¡î_íabÀ
();

124 
sy°ick_cou¡î_dißbÀ
();

125 
uöt8_t
 
sy°ick_gë_cou¡Êag
();

126 
sy°ick_˛ór
();

128 
uöt32_t
 
sy°ick_gë_ˇlib
();

130 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\tpiu.h

20 #i‚de‡
LIBOPENCM3_CM3_TPIU_H


21 
	#LIBOPENCM3_CM3_TPIU_H


	)

26 #i‡!
deföed
(
__ARM_ARCH_7M__
Ë&& !deföed(
__ARM_ARCH_7EM__
)

33 
	#TPIU_SSPSR
 
	`MMIO32
(
TPIU_BASE
 + 0x000)

	)

36 
	#TPIU_CSPSR
 
	`MMIO32
(
TPIU_BASE
 + 0x004)

	)

39 
	#TPIU_ACPR
 
	`MMIO32
(
TPIU_BASE
 + 0x010)

	)

42 
	#TPIU_SPPR
 
	`MMIO32
(
TPIU_BASE
 + 0x0F0)

	)

45 
	#TPIU_FFSR
 
	`MMIO32
(
TPIU_BASE
 + 0x300)

	)

48 
	#TPIU_FFCR
 
	`MMIO32
(
TPIU_BASE
 + 0x304)

	)

51 
	#TPIU_DEVID
 
	`MMIO32
(
TPIU_BASE
 + 0xFC8)

	)

54 
	#TPIU_LSR
 
	`MMIO32
(
TPIU_BASE
 + 0xFB4)

	)

56 
	#TPIU_LAR
 
	`MMIO32
(
TPIU_BASE
 + 0xFB0)

	)

68 
	#TPIU_SPPR_SYNC
 (0x0)

	)

69 
	#TPIU_SPPR_ASYNC_MANCHESTER
 (0x1)

	)

70 
	#TPIU_SPPR_ASYNC_NRZ
 (0x2)

	)

75 
	#TPIU_FFSR_FTNONSTOP
 (1 << 3)

	)

76 
	#TPIU_FFSR_TCPRESENT
 (1 << 2)

	)

77 
	#TPIU_FFSR_FTSTOPPED
 (1 << 1)

	)

78 
	#TPIU_FFSR_FLINPROG
 (1 << 0)

	)

83 
	#TPIU_FFCR_TRIGIN
 (1 << 8)

	)

85 
	#TPIU_FFCR_ENFCONT
 (1 << 1)

	)

91 
	#TPUI_DEVID_NRZ_SUPPORTED
 (1 << 11)

	)

92 
	#TPUI_DEVID_MANCHESTER_SUPPORTED
 (1 << 10)

	)

94 
	#TPUI_DEVID_FIFO_SIZE_MASK
 (7 << 6)

	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\vector.h

37 #i‚de‡
LIBOPENCM3_VECTOR_H


38 
	#LIBOPENCM3_VECTOR_H


	)

40 
	~<lib›ícm3/cm3/comm⁄.h
>

41 
	~<lib›ícm3/cm3/nvic.h
>

45 (*
	tve˘‹_èbÀ_íåy_t
)();

48 *
öôül_•_vÆue
;

49 
ve˘‹_èbÀ_íåy_t
 
ª£t
;

50 
ve˘‹_èbÀ_íåy_t
 
nmi
;

51 
ve˘‹_èbÀ_íåy_t
 
h¨d_Áu…
;

52 
ve˘‹_èbÀ_íåy_t
 
mem‹y_m™age_Áu…
;

53 
ve˘‹_èbÀ_íåy_t
 
bus_Áu…
;

54 
ve˘‹_èbÀ_íåy_t
 
ußge_Áu…
;

55 
ve˘‹_èbÀ_íåy_t
 
ª£rved_x001c
[4];

56 
ve˘‹_èbÀ_íåy_t
 
sv_ˇŒ
;

57 
ve˘‹_èbÀ_íåy_t
 
debug_m⁄ô‹
;

58 
ve˘‹_èbÀ_íåy_t
 
ª£rved_x0034
;

59 
ve˘‹_èbÀ_íåy_t
 
≥nd_sv
;

60 
ve˘‹_èbÀ_íåy_t
 
sy°ick
;

61 
ve˘‹_èbÀ_íåy_t
 
úq
[
NVIC_IRQ_COUNT
];

62 } 
	tve˘‹_èbÀ_t
;

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\dispatch\nvic.h

1 #i‚de‡
LIBOPENCM3_NVIC_H


2 #îr‹ 
You
 
should
 
nŸ
 
be
 
ö˛udög
 
this
 
fûe
 
dúe˘ly
, 
but
 <
lib›ícm3
/
cm3
/
nvic
.
h
>

5 #i‡
deföed
(
STM32F0
)

6 
	~<lib›ícm3/°m32/f0/nvic.h
>

7 #ñi‡
deföed
(
STM32F1
)

8 
	~<lib›ícm3/°m32/f1/nvic.h
>

9 #ñi‡
deföed
(
STM32F2
)

10 
	~<lib›ícm3/°m32/f2/nvic.h
>

11 #ñi‡
deföed
(
STM32F3
)

12 
	~<lib›ícm3/°m32/f3/nvic.h
>

13 #ñi‡
deföed
(
STM32F4
)

14 
	~<lib›ícm3/°m32/f4/nvic.h
>

15 #ñi‡
deföed
(
STM32F7
)

16 
	~<lib›ícm3/°m32/f7/nvic.h
>

17 #ñi‡
deföed
(
STM32L0
)

18 
	~<lib›ícm3/°m32/l0/nvic.h
>

19 #ñi‡
deföed
(
STM32L1
)

20 
	~<lib›ícm3/°m32/l1/nvic.h
>

21 #ñi‡
deföed
(
STM32L4
)

22 
	~<lib›ícm3/°m32/l4/nvic.h
>

24 #ñi‡
deföed
(
EFM32TG
)

25 
	~<lib›ícm3/efm32/tg/nvic.h
>

26 #ñi‡
deföed
(
EFM32G
)

27 
	~<lib›ícm3/efm32/g/nvic.h
>

28 #ñi‡
deföed
(
EFM32LG
)

29 
	~<lib›ícm3/efm32/lg/nvic.h
>

30 #ñi‡
deföed
(
EFM32GG
)

31 
	~<lib›ícm3/efm32/gg/nvic.h
>

33 #ñi‡
deföed
(
LPC13XX
)

34 
	~<lib›ícm3/Õc13xx/nvic.h
>

35 #ñi‡
deföed
(
LPC17XX
)

36 
	~<lib›ícm3/Õc17xx/nvic.h
>

37 #ñi‡
deföed
(
LPC43XX_M4
)

38 
	~<lib›ícm3/Õc43xx/m4/nvic.h
>

39 #ñi‡
deföed
(
LPC43XX_M0
)

40 
	~<lib›ícm3/Õc43xx/m0/nvic.h
>

42 #ñi‡
deföed
(
SAM3A
)

43 
	~<lib›ícm3/ßm/3a/nvic.h
>

44 #ñi‡
deföed
(
SAM3N
)

45 
	~<lib›ícm3/ßm/3n/nvic.h
>

46 #ñi‡
deföed
(
SAM3S
)

47 
	~<lib›ícm3/ßm/3s/nvic.h
>

48 #ñi‡
deföed
(
SAM3U
)

49 
	~<lib›ícm3/ßm/3u/nvic.h
>

50 #ñi‡
deföed
(
SAM3X
)

51 
	~<lib›ícm3/ßm/3x/nvic.h
>

53 #ñi‡
deföed
(
LM3S
Ë|| deföed(
LM4F
)

55 
	~<lib›ícm3/lm3s/nvic.h
>

57 #ñi‡
deföed
(
VF6XX
)

58 
	~<lib›ícm3/vf6xx/nvic.h
>

63 
	#NVIC_IRQ_COUNT
 0

	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\MEMORY~1.H

20 #i‚de‡
LIBOPENCM3_MEMORYMAP_COMMON_H


21 
	#LIBOPENCM3_MEMORYMAP_COMMON_H


	)

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/mem‹ym≠.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/mem‹ym≠.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/mem‹ym≠.h
>

29 #ñi‡
deföed
(
STM32F3
)

30 
	~<lib›ícm3/°m32/f3/mem‹ym≠.h
>

31 #ñi‡
deföed
(
STM32F4
)

32 
	~<lib›ícm3/°m32/f4/mem‹ym≠.h
>

33 #ñi‡
deföed
(
STM32F7
)

34 
	~<lib›ícm3/°m32/f7/mem‹ym≠.h
>

35 #ñi‡
deföed
(
STM32L0
)

36 
	~<lib›ícm3/°m32/l0/mem‹ym≠.h
>

37 #ñi‡
deföed
(
STM32L1
)

38 
	~<lib›ícm3/°m32/l1/mem‹ym≠.h
>

39 #ñi‡
deföed
(
STM32L4
)

40 
	~<lib›ícm3/°m32/l4/mem‹ym≠.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\OTG_CO~1.H

26 #i‚de‡
LIBOPENCM3_OTG_COMMON_H


27 
	#LIBOPENCM3_OTG_COMMON_H


	)

30 
	#OTG_GOTGCTL
 0x000

	)

31 
	#OTG_GOTGINT
 0x004

	)

32 
	#OTG_GAHBCFG
 0x008

	)

33 
	#OTG_GUSBCFG
 0x00C

	)

34 
	#OTG_GRSTCTL
 0x010

	)

35 
	#OTG_GINTSTS
 0x014

	)

36 
	#OTG_GINTMSK
 0x018

	)

37 
	#OTG_GRXSTSR
 0x01C

	)

38 
	#OTG_GRXSTSP
 0x020

	)

39 
	#OTG_GRXFSIZ
 0x024

	)

40 
	#OTG_GNPTXFSIZ
 0x028

	)

41 
	#OTG_GNPTXSTS
 0x02C

	)

42 
	#OTG_GCCFG
 0x038

	)

43 
	#OTG_CID
 0x03C

	)

44 
	#OTG_HPTXFSIZ
 0x100

	)

45 
	#OTG_DIEPTXF
(
x
Ë(0x104 + 4*((x)-1))

	)

48 
	#OTG_HCFG
 0x400

	)

49 
	#OTG_HFIR
 0x404

	)

50 
	#OTG_HFNUM
 0x408

	)

51 
	#OTG_HPTXSTS
 0x410

	)

52 
	#OTG_HAINT
 0x414

	)

53 
	#OTG_HAINTMSK
 0x418

	)

54 
	#OTG_HPRT
 0x440

	)

55 
	#OTG_HCCHAR
(
x
Ë(0x500 + 0x20*(x))

	)

56 
	#OTG_HCINT
(
x
Ë(0x508 + 0x20*(x))

	)

57 
	#OTG_HCINTMSK
(
x
Ë(0x50C + 0x20*(x))

	)

58 
	#OTG_HCTSIZ
(
x
Ë(0x510 + 0x20*(x))

	)

62 
	#OTG_DCFG
 0x800

	)

63 
	#OTG_DCTL
 0x804

	)

64 
	#OTG_DSTS
 0x808

	)

65 
	#OTG_DIEPMSK
 0x810

	)

66 
	#OTG_DOEPMSK
 0x814

	)

67 
	#OTG_DAINT
 0x818

	)

68 
	#OTG_DAINTMSK
 0x81C

	)

69 
	#OTG_DVBUSDIS
 0x828

	)

70 
	#OTG_DVBUSPULSE
 0x82C

	)

71 
	#OTG_DIEPEMPMSK
 0x834

	)

73 
	#OTG_DIEPCTL0
 0x900

	)

74 
	#OTG_DIEPCTL
(
x
Ë(0x900 + 0x20*(x))

	)

75 
	#OTG_DOEPCTL0
 0xB00

	)

76 
	#OTG_DOEPCTL
(
x
Ë(0xB00 + 0x20*(x))

	)

77 
	#OTG_DIEPINT
(
x
Ë(0x908 + 0x20*(x))

	)

78 
	#OTG_DOEPINT
(
x
Ë(0xB08 + 0x20*(x))

	)

79 
	#OTG_DIEPTSIZ0
 0x910

	)

80 
	#OTG_DIEPTSIZ
(
x
Ë(0x910 + 0x20*(x))

	)

81 
	#OTG_DOEPTSIZ0
 0xB10

	)

82 
	#OTG_DOEPTSIZ
(
x
Ë(0xB10 + 0x20*(x))

	)

83 
	#OTG_DTXFSTS
(
x
Ë(0x918 + 0x20*(x))

	)

86 
	#OTG_PCGCCTL
 0xE00

	)

89 
	#OTG_FIFO
(
x
Ë(((xË+ 1Ë<< 12)

	)

94 
	#OTG_GOTGCTL_BSVLD
 (1 << 19)

	)

95 
	#OTG_GOTGCTL_ASVLD
 (1 << 18)

	)

96 
	#OTG_GOTGCTL_DBCT
 (1 << 17)

	)

97 
	#OTG_GOTGCTL_CIDSTS
 (1 << 16)

	)

98 
	#OTG_GOTGCTL_DHNPEN
 (1 << 11)

	)

99 
	#OTG_GOTGCTL_HSHNPEN
 (1 << 10)

	)

100 
	#OTG_GOTGCTL_HNPRQ
 (1 << 9)

	)

101 
	#OTG_GOTGCTL_HNGSCS
 (1 << 8)

	)

102 
	#OTG_GOTGCTL_SRQ
 (1 << 1)

	)

103 
	#OTG_GOTGCTL_SRQSCS
 (1 << 0)

	)

106 
	#OTG_GOTGINT_DBCDNE
 (1 << 19)

	)

107 
	#OTG_GOTGINT_ADTOCHG
 (1 << 18)

	)

108 
	#OTG_GOTGINT_HNGDET
 (1 << 17)

	)

109 
	#OTG_GOTGINT_HNSSCHG
 (1 << 9)

	)

110 
	#OTG_GOTGINT_SRSSCHG
 (1 << 8)

	)

111 
	#OTG_GOTGINT_SEDET
 (1 << 2)

	)

114 
	#OTG_GAHBCFG_GINT
 0x0001

	)

115 
	#OTG_GAHBCFG_TXFELVL
 0x0080

	)

116 
	#OTG_GAHBCFG_PTXFELVL
 0x0100

	)

119 
	#OTG_GUSBCFG_TOCAL
 0x00000003

	)

120 
	#OTG_GUSBCFG_SRPCAP
 0x00000100

	)

121 
	#OTG_GUSBCFG_HNPCAP
 0x00000200

	)

122 
	#OTG_GUSBCFG_TRDT_MASK
 (0x‡<< 10)

	)

123 
	#OTG_GUSBCFG_NPTXRWEN
 0x00004000

	)

124 
	#OTG_GUSBCFG_FHMOD
 0x20000000

	)

125 
	#OTG_GUSBCFG_FDMOD
 0x40000000

	)

126 
	#OTG_GUSBCFG_CTXPKT
 0x80000000

	)

127 
	#OTG_GUSBCFG_PHYSEL
 (1 << 6)

	)

130 
	#OTG_GRSTCTL_AHBIDL
 (1 << 31)

	)

132 
	#OTG_GRSTCTL_TXFNUM_MASK
 (0x1‡<< 6)

	)

133 
	#OTG_GRSTCTL_TXFNUM_ALL
 (0x10 << 6)

	)

134 
	#OTG_GRSTCTL_TXFFLSH
 (1 << 5)

	)

135 
	#OTG_GRSTCTL_RXFFLSH
 (1 << 4)

	)

137 
	#OTG_GRSTCTL_FCRST
 (1 << 2)

	)

138 
	#OTG_GRSTCTL_HSRST
 (1 << 1)

	)

139 
	#OTG_GRSTCTL_CSRST
 (1 << 0)

	)

142 
	#OTG_GINTSTS_WKUPINT
 (1 << 31)

	)

143 
	#OTG_GINTSTS_SRQINT
 (1 << 30)

	)

144 
	#OTG_GINTSTS_DISCINT
 (1 << 29)

	)

145 
	#OTG_GINTSTS_CIDSCHG
 (1 << 28)

	)

147 
	#OTG_GINTSTS_PTXFE
 (1 << 26)

	)

148 
	#OTG_GINTSTS_HCINT
 (1 << 25)

	)

149 
	#OTG_GINTSTS_HPRTINT
 (1 << 24)

	)

151 
	#OTG_GINTSTS_IPXFR
 (1 << 21)

	)

152 
	#OTG_GINTSTS_INCOMPISOOUT
 (1 << 21)

	)

153 
	#OTG_GINTSTS_IISOIXFR
 (1 << 20)

	)

154 
	#OTG_GINTSTS_OEPINT
 (1 << 19)

	)

155 
	#OTG_GINTSTS_IEPINT
 (1 << 18)

	)

157 
	#OTG_GINTSTS_EOPF
 (1 << 15)

	)

158 
	#OTG_GINTSTS_ISOODRP
 (1 << 14)

	)

159 
	#OTG_GINTSTS_ENUMDNE
 (1 << 13)

	)

160 
	#OTG_GINTSTS_USBRST
 (1 << 12)

	)

161 
	#OTG_GINTSTS_USBSUSP
 (1 << 11)

	)

162 
	#OTG_GINTSTS_ESUSP
 (1 << 10)

	)

164 
	#OTG_GINTSTS_GONAKEFF
 (1 << 7)

	)

165 
	#OTG_GINTSTS_GINAKEFF
 (1 << 6)

	)

166 
	#OTG_GINTSTS_NPTXFE
 (1 << 5)

	)

167 
	#OTG_GINTSTS_RXFLVL
 (1 << 4)

	)

168 
	#OTG_GINTSTS_SOF
 (1 << 3)

	)

169 
	#OTG_GINTSTS_OTGINT
 (1 << 2)

	)

170 
	#OTG_GINTSTS_MMIS
 (1 << 1)

	)

171 
	#OTG_GINTSTS_CMOD
 (1 << 0)

	)

174 
	#OTG_GINTMSK_MMISM
 0x00000002

	)

175 
	#OTG_GINTMSK_OTGINT
 0x00000004

	)

176 
	#OTG_GINTMSK_SOFM
 0x00000008

	)

177 
	#OTG_GINTMSK_RXFLVLM
 0x00000010

	)

178 
	#OTG_GINTMSK_NPTXFEM
 0x00000020

	)

179 
	#OTG_GINTMSK_GINAKEFFM
 0x00000040

	)

180 
	#OTG_GINTMSK_GONAKEFFM
 0x00000080

	)

181 
	#OTG_GINTMSK_ESUSPM
 0x00000400

	)

182 
	#OTG_GINTMSK_USBSUSPM
 0x00000800

	)

183 
	#OTG_GINTMSK_USBRST
 0x00001000

	)

184 
	#OTG_GINTMSK_ENUMDNEM
 0x00002000

	)

185 
	#OTG_GINTMSK_ISOODRPM
 0x00004000

	)

186 
	#OTG_GINTMSK_EOPFM
 0x00008000

	)

187 
	#OTG_GINTMSK_EPMISM
 0x00020000

	)

188 
	#OTG_GINTMSK_IEPINT
 0x00040000

	)

189 
	#OTG_GINTMSK_OEPINT
 0x00080000

	)

190 
	#OTG_GINTMSK_IISOIXFRM
 0x00100000

	)

191 
	#OTG_GINTMSK_IISOOXFRM
 0x00200000

	)

192 
	#OTG_GINTMSK_IPXFRM
 0x00200000

	)

193 
	#OTG_GINTMSK_PRTIM
 0x01000000

	)

194 
	#OTG_GINTMSK_HCIM
 0x02000000

	)

195 
	#OTG_GINTMSK_PTXFEM
 0x04000000

	)

196 
	#OTG_GINTMSK_CIDSCHGM
 0x10000000

	)

197 
	#OTG_GINTMSK_DISCINT
 0x20000000

	)

198 
	#OTG_GINTMSK_SRQIM
 0x40000000

	)

199 
	#OTG_GINTMSK_WUIM
 0x80000000

	)

203 
	#OTG_GRXSTSP_FRMNUM_MASK
 (0x‡<< 21)

	)

204 
	#OTG_GRXSTSP_PKTSTS_MASK
 (0x‡<< 17)

	)

205 
	#OTG_GRXSTSP_PKTSTS_GOUTNAK
 (0x1 << 17)

	)

206 
	#OTG_GRXSTSP_PKTSTS_OUT
 (0x2 << 17)

	)

207 
	#OTG_GRXSTSP_PKTSTS_IN
 (0x2 << 17)

	)

208 
	#OTG_GRXSTSP_PKTSTS_OUT_COMP
 (0x3 << 17)

	)

209 
	#OTG_GRXSTSP_PKTSTS_IN_COMP
 (0x3 << 17)

	)

210 
	#OTG_GRXSTSP_PKTSTS_SETUP_COMP
 (0x4 << 17)

	)

211 
	#OTG_GRXSTSP_PKTSTS_DTERR
 (0x5 << 17)

	)

212 
	#OTG_GRXSTSP_PKTSTS_SETUP
 (0x6 << 17)

	)

213 
	#OTG_GRXSTSP_PKTSTS_CHH
 (0x7 << 17)

	)

214 
	#OTG_GRXSTSP_DPID_MASK
 (0x3 << 15)

	)

215 
	#OTG_GRXSTSP_DPID_DATA0
 (0x0 << 15)

	)

216 
	#OTG_GRXSTSP_DPID_DATA1
 (0x2 << 15)

	)

217 
	#OTG_GRXSTSP_DPID_DATA2
 (0x1 << 15)

	)

218 
	#OTG_GRXSTSP_DPID_MDATA
 (0x3 << 15)

	)

219 
	#OTG_GRXSTSP_BCNT_MASK
 (0x7f‡<< 4)

	)

220 
	#OTG_GRXSTSP_EPNUM_MASK
 (0x‡<< 0)

	)

224 
	#OTG_GCCFG_NOVBUSSENS
 (1 << 21)

	)

225 
	#OTG_GCCFG_SOFOUTEN
 (1 << 20)

	)

226 
	#OTG_GCCFG_VBUSBSEN
 (1 << 19)

	)

227 
	#OTG_GCCFG_VBUSASEN
 (1 << 18)

	)

229 
	#OTG_GCCFG_PWRDWN
 (1 << 16)

	)

236 
	#OTG_DCTL_POPRGDNE
 (1 << 11)

	)

237 
	#OTG_DCTL_CGONAK
 (1 << 10)

	)

238 
	#OTG_DCTL_SGONAK
 (1 << 9)

	)

239 
	#OTG_DCTL_SGINAK
 (1 << 8)

	)

240 
	#OTG_DCTL_TCTL_MASK
 (7 << 4)

	)

241 
	#OTG_DCTL_GONSTS
 (1 << 3)

	)

242 
	#OTG_DCTL_GINSTS
 (1 << 2)

	)

243 
	#OTG_DCTL_SDIS
 (1 << 1)

	)

244 
	#OTG_DCTL_RWUSIG
 (1 << 0)

	)

247 
	#OTG_DCFG_DSPD
 0x0003

	)

248 
	#OTG_DCFG_NZLSOHSK
 0x0004

	)

249 
	#OTG_DCFG_DAD
 0x07F0

	)

250 
	#OTG_DCFG_PFIVL
 0x1800

	)

254 
	#OTG_DIEPMSK_BIM
 (1 << 9)

	)

255 
	#OTG_DIEPMSK_TXFURM
 (1 << 8)

	)

257 
	#OTG_DIEPMSK_INEPNEM
 (1 << 6)

	)

258 
	#OTG_DIEPMSK_INEPNMM
 (1 << 5)

	)

259 
	#OTG_DIEPMSK_ITTXFEMSK
 (1 << 4)

	)

260 
	#OTG_DIEPMSK_TOM
 (1 << 3)

	)

262 
	#OTG_DIEPMSK_EPDM
 (1 << 1)

	)

263 
	#OTG_DIEPMSK_XFRCM
 (1 << 0)

	)

267 
	#OTG_DOEPMSK_BOIM
 (1 << 9)

	)

268 
	#OTG_DOEPMSK_OPEM
 (1 << 8)

	)

270 
	#OTG_DOEPMSK_B2BSTUP
 (1 << 6)

	)

272 
	#OTG_DOEPMSK_OTEPDM
 (1 << 4)

	)

273 
	#OTG_DOEPMSK_STUPM
 (1 << 3)

	)

275 
	#OTG_DOEPMSK_EPDM
 (1 << 1)

	)

276 
	#OTG_DOEPMSK_XFRCM
 (1 << 0)

	)

279 
	#OTG_DIEPCTL0_EPENA
 (1 << 31)

	)

280 
	#OTG_DIEPCTL0_EPDIS
 (1 << 30)

	)

282 
	#OTG_DIEPCTLX_SD0PID
 (1 << 28)

	)

283 
	#OTG_DIEPCTL0_SNAK
 (1 << 27)

	)

284 
	#OTG_DIEPCTL0_CNAK
 (1 << 26)

	)

285 
	#OTG_DIEPCTL0_TXFNUM_MASK
 (0x‡<< 22)

	)

286 
	#OTG_DIEPCTL0_STALL
 (1 << 21)

	)

288 
	#OTG_DIEPCTL0_EPTYP_MASK
 (0x3 << 18)

	)

289 
	#OTG_DIEPCTL0_NAKSTS
 (1 << 17)

	)

291 
	#OTG_DIEPCTL0_USBAEP
 (1 << 15)

	)

293 
	#OTG_DIEPCTL0_MPSIZ_MASK
 (0x3 << 0)

	)

294 
	#OTG_DIEPCTL0_MPSIZ_64
 (0x0 << 0)

	)

295 
	#OTG_DIEPCTL0_MPSIZ_32
 (0x1 << 0)

	)

296 
	#OTG_DIEPCTL0_MPSIZ_16
 (0x2 << 0)

	)

297 
	#OTG_DIEPCTL0_MPSIZ_8
 (0x3 << 0)

	)

300 
	#OTG_DOEPCTL0_EPENA
 (1 << 31)

	)

301 
	#OTG_DOEPCTL0_EPDIS
 (1 << 30)

	)

303 
	#OTG_DOEPCTLX_SD0PID
 (1 << 28)

	)

304 
	#OTG_DOEPCTL0_SNAK
 (1 << 27)

	)

305 
	#OTG_DOEPCTL0_CNAK
 (1 << 26)

	)

307 
	#OTG_DOEPCTL0_STALL
 (1 << 21)

	)

308 
	#OTG_DOEPCTL0_SNPM
 (1 << 20)

	)

309 
	#OTG_DOEPCTL0_EPTYP_MASK
 (0x3 << 18)

	)

310 
	#OTG_DOEPCTL0_NAKSTS
 (1 << 17)

	)

312 
	#OTG_DOEPCTL0_USBAEP
 (1 << 15)

	)

314 
	#OTG_DOEPCTL0_MPSIZ_MASK
 (0x3 << 0)

	)

315 
	#OTG_DOEPCTL0_MPSIZ_64
 (0x0 << 0)

	)

316 
	#OTG_DOEPCTL0_MPSIZ_32
 (0x1 << 0)

	)

317 
	#OTG_DOEPCTL0_MPSIZ_16
 (0x2 << 0)

	)

318 
	#OTG_DOEPCTL0_MPSIZ_8
 (0x3 << 0)

	)

322 
	#OTG_DIEPINTX_TXFE
 (1 << 7)

	)

323 
	#OTG_DIEPINTX_INEPNE
 (1 << 6)

	)

325 
	#OTG_DIEPINTX_ITTXFE
 (1 << 4)

	)

326 
	#OTG_DIEPINTX_TOC
 (1 << 3)

	)

328 
	#OTG_DIEPINTX_EPDISD
 (1 << 1)

	)

329 
	#OTG_DIEPINTX_XFRC
 (1 << 0)

	)

333 
	#OTG_DOEPINTX_B2BSTUP
 (1 << 6)

	)

335 
	#OTG_DOEPINTX_OTEPDIS
 (1 << 4)

	)

336 
	#OTG_DOEPINTX_STUP
 (1 << 3)

	)

338 
	#OTG_DOEPINTX_EPDISD
 (1 << 1)

	)

339 
	#OTG_DOEPINTX_XFRC
 (1 << 0)

	)

343 
	#OTG_DIEPSIZ0_STUPCNT_1
 (0x1 << 29)

	)

344 
	#OTG_DIEPSIZ0_STUPCNT_2
 (0x2 << 29)

	)

345 
	#OTG_DIEPSIZ0_STUPCNT_3
 (0x3 << 29)

	)

346 
	#OTG_DIEPSIZ0_STUPCNT_MASK
 (0x3 << 29)

	)

348 
	#OTG_DIEPSIZ0_PKTCNT
 (1 << 19)

	)

350 
	#OTG_DIEPSIZ0_XFRSIZ_MASK
 (0x7‡<< 0)

	)

357 
	#OTG_HNPTXFSIZ_PTXFD_MASK
 (0xffff0000)

	)

358 
	#OTG_HNPTXFSIZ_PTXSA_MASK
 (0x0000ffff)

	)

361 
	#OTG_HPTXFSIZ_PTXFD_MASK
 (0xffff0000)

	)

362 
	#OTG_HPTXFSIZ_PTXSA_MASK
 (0x0000ffff)

	)

366 
	#OTG_HCFG_FSLSS
 (1 << 2)

	)

367 
	#OTG_HCFG_FSLSPCS_48MHz
 (0x1 << 0)

	)

368 
	#OTG_HCFG_FSLSPCS_6MHz
 (0x2 << 0)

	)

369 
	#OTG_HCFG_FSLSPCS_MASK
 (0x3 << 0)

	)

373 
	#OTG_HFIR_FRIVL_MASK
 (0x0000ffff)

	)

376 
	#OTG_HFNUM_FTREM_MASK
 (0xffff0000)

	)

377 
	#OTG_HFNUM_FRNUM_MASK
 (0x0000ffff)

	)

380 
	#OTG_HPTXSTS_PTXQTOP_MASK
 (0xff000000)

	)

381 
	#OTG_HPTXSTS_PTXQTOP_ODDFRM
 (1<<31)

	)

382 
	#OTG_HPTXSTS_PTXQTOP_EVENFRM
 (0<<31)

	)

383 
	#OTG_HPTXSTS_PTXQTOP_CHANNEL_NUMBER_MASK
 (0xf<<27)

	)

384 
	#OTG_HPTXSTS_PTXQTOP_ENDPOINT_NUMBER_MASK
 (0xf<<27)

	)

385 
	#OTG_HPTXSTS_PTXQTOP_TYPE_INOUT
 (0x00<<25)

	)

386 
	#OTG_HPTXSTS_PTXQTOP_TYPE_ZEROLENGTH
 (0x01<<25)

	)

387 
	#OTG_HPTXSTS_PTXQTOP_TYPE_DISABLECMD
 (0x11<<25)

	)

388 
	#OTG_HPTXSTS_PTXQTOP_TERMINATE
 (1<<24)

	)

389 
	#OTG_HPTXSTS_PTXQSAV_MASK
 (0x00ff0000)

	)

390 
	#OTG_HPTXSTS_PTXFSAVL_MASK
 (0x0000ffff)

	)

394 
	#OTG_HAINTMSK_HAINT_MASK
 (0x0000ffff)

	)

398 
	#OTG_HAINTMSK_HAINTM_MASK
 (0x0000ffff)

	)

402 
	#OTG_HPRT_PSPD_HIGH
 (0x0 << 17)

	)

403 
	#OTG_HPRT_PSPD_FULL
 (0x1 << 17)

	)

404 
	#OTG_HPRT_PSPD_LOW
 (0x2 << 17)

	)

405 
	#OTG_HPRT_PSPD_MASK
 (0x3 << 17)

	)

406 
	#OTG_HPRT_PTCTL_DISABLED
 (0x0 << 13)

	)

407 
	#OTG_HPRT_PTCTL_J
 (0x1 << 13)

	)

408 
	#OTG_HPRT_PTCTL_K
 (0x2 << 13)

	)

409 
	#OTG_HPRT_PTCTL_SE0_NAK
 (0x3 << 13)

	)

410 
	#OTG_HPRT_PTCTL_PACKET
 (0x4 << 13)

	)

411 
	#OTG_HPRT_PTCTL_FORCE_ENABLE
 (0x5 << 13)

	)

412 
	#OTG_HPRT_PPWR
 (1 << 12)

	)

413 
	#OTG_HPRT_PLSTS_DM
 (1 << 11)

	)

414 
	#OTG_HPRT_PLSTS_DP
 (1 << 10)

	)

416 
	#OTG_HPRT_PRST
 (1 << 8)

	)

417 
	#OTG_HPRT_PSUSP
 (1 << 7)

	)

418 
	#OTG_HPRT_PRES
 (1 << 6)

	)

419 
	#OTG_HPRT_POCCHNG
 (1 << 5)

	)

420 
	#OTG_HPRT_POCA
 (1 << 4)

	)

421 
	#OTG_HPRT_PENCHNG
 (1 << 3)

	)

422 
	#OTG_HPRT_PENA
 (1 << 2)

	)

423 
	#OTG_HPRT_PCDET
 (1 << 1)

	)

424 
	#OTG_HPRT_PCSTS
 (1 << 0)

	)

427 
	#OTG_HCCHAR_CHENA
 (1 << 31)

	)

428 
	#OTG_HCCHAR_CHDIS
 (1 << 30)

	)

429 
	#OTG_HCCHAR_ODDFRM
 (1 << 29)

	)

430 
	#OTG_HCCHAR_DAD_MASK
 (0x7‡<< 22)

	)

431 
	#OTG_HCCHAR_MCNT_1
 (0x1 << 20)

	)

432 
	#OTG_HCCHAR_MCNT_2
 (0x2 << 20)

	)

433 
	#OTG_HCCHAR_MCNT_3
 (0x3 << 20)

	)

434 
	#OTG_HCCHAR_MCNT_MASK
 (0x3 << 20)

	)

435 
	#OTG_HCCHAR_EPTYP_CONTROL
 (0 << 18)

	)

436 
	#OTG_HCCHAR_EPTYP_ISOCHRONOUS
 (1 << 18)

	)

437 
	#OTG_HCCHAR_EPTYP_BULK
 (2 << 18)

	)

438 
	#OTG_HCCHAR_EPTYP_INTERRUPT
 (3 << 18)

	)

439 
	#OTG_HCCHAR_EPTYP_MASK
 (3 << 18)

	)

440 
	#OTG_HCCHAR_LSDEV
 (1 << 17)

	)

442 
	#OTG_HCCHAR_EPDIR_OUT
 (0 << 15)

	)

443 
	#OTG_HCCHAR_EPDIR_IN
 (1 << 15)

	)

444 
	#OTG_HCCHAR_EPDIR_MASK
 (1 << 15)

	)

445 
	#OTG_HCCHAR_EPNUM_MASK
 (0x‡<< 11)

	)

446 
	#OTG_HCCHAR_MPSIZ_MASK
 (0x7f‡<< 0)

	)

450 
	#OTG_HCINT_DTERR
 (1 << 10)

	)

451 
	#OTG_HCINT_FRMOR
 (1 << 9)

	)

452 
	#OTG_HCINT_BBERR
 (1 << 8)

	)

453 
	#OTG_HCINT_TXERR
 (1 << 7)

	)

455 
	#OTG_HCINT_NYET
 (1 << 6)

	)

456 
	#OTG_HCINT_ACK
 (1 << 5)

	)

457 
	#OTG_HCINT_NAK
 (1 << 4)

	)

458 
	#OTG_HCINT_STALL
 (1 << 3)

	)

460 
	#OTG_HCINT_AHBERR
 (1 << 2)

	)

461 
	#OTG_HCINT_CHH
 (1 << 1)

	)

462 
	#OTG_HCINT_XFRC
 (1 << 0)

	)

466 
	#OTG_HCINTMSK_DTERRM
 (1 << 10)

	)

467 
	#OTG_HCINTMSK_FRMORM
 (1 << 9)

	)

468 
	#OTG_HCINTMSK_BBERRM
 (1 << 8)

	)

469 
	#OTG_HCINTMSK_TXERRM
 (1 << 7)

	)

471 
	#OTG_HCINTMSK_NYET
 (1 << 6)

	)

472 
	#OTG_HCINTMSK_ACKM
 (1 << 5)

	)

473 
	#OTG_HCINTMSK_NAKM
 (1 << 4)

	)

474 
	#OTG_HCINTMSK_STALLM
 (1 << 3)

	)

476 
	#OTG_HCINTMSK_AHBERR
 (1 << 2)

	)

477 
	#OTG_HCINTMSK_CHHM
 (1 << 1)

	)

478 
	#OTG_HCINTMSK_XFRCM
 (1 << 0)

	)

482 
	#OTG_HCTSIZ_DOPING
 (1 << 31)

	)

483 
	#OTG_HCTSIZ_DPID_DATA0
 (0x0 << 29)

	)

484 
	#OTG_HCTSIZ_DPID_DATA1
 (0x2 << 29)

	)

485 
	#OTG_HCTSIZ_DPID_DATA2
 (0x1 << 29)

	)

486 
	#OTG_HCTSIZ_DPID_MDATA
 (0x3 << 29)

	)

487 
	#OTG_HCTSIZ_DPID_MASK
 (0x3 << 29)

	)

488 
	#OTG_HCTSIZ_PKTCNT_MASK
 (0x3f‡<< 19)

	)

489 
	#OTG_HCTSIZ_XFRSIZ_MASK
 (0x7fff‡<< 0)

	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\adc.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/adc.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/adc.h
>

27 #ñi‡
deföed
(
STM32F3
)

28 
	~<lib›ícm3/°m32/f3/adc.h
>

29 #ñi‡
deföed
(
STM32F4
)

30 
	~<lib›ícm3/°m32/f4/adc.h
>

31 #ñi‡
deföed
(
STM32L0
)

32 
	~<lib›ícm3/°m32/l0/adc.h
>

33 #ñi‡
deföed
(
STM32L1
)

34 
	~<lib›ícm3/°m32/l1/adc.h
>

35 #ñi‡
deföed
(
STM32L4
)

36 
	~<lib›ícm3/°m32/l4/adc.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\can.h

34 #i‚de‡
LIBOPENCM3_CAN_H


35 
	#LIBOPENCM3_CAN_H


	)

37 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

38 
	~<lib›ícm3/cm3/comm⁄.h
>

50 
	#CAN1
 
BX_CAN1_BASE


	)

51 
	#CAN2
 
BX_CAN2_BASE


	)

57 
	#CAN_MCR
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x000)

	)

59 
	#CAN_MSR
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x004)

	)

61 
	#CAN_TSR
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x008)

	)

64 
	#CAN_RF0R
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x00C)

	)

66 
	#CAN_RF1R
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x010)

	)

69 
	#CAN_IER
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x014)

	)

71 
	#CAN_ESR
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x018)

	)

73 
	#CAN_BTR
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x01C)

	)

80 
	#CAN_MBOX0
 0x180

	)

81 
	#CAN_MBOX1
 0x190

	)

82 
	#CAN_MBOX2
 0x1A0

	)

83 
	#CAN_FIFO0
 0x1B0

	)

84 
	#CAN_FIFO1
 0x1C0

	)

87 
	#CAN_TIxR
(
ˇn_ba£
, 
mbox
Ë
	`MMIO32
((ˇn_ba£Ë+ (mboxË+ 0x0)

	)

88 
	#CAN_TI0R
(
ˇn_ba£
Ë
	`CAN_TIxR
(ˇn_ba£, 
CAN_MBOX0
)

	)

89 
	#CAN_TI1R
(
ˇn_ba£
Ë
	`CAN_TIxR
(ˇn_ba£, 
CAN_MBOX1
)

	)

90 
	#CAN_TI2R
(
ˇn_ba£
Ë
	`CAN_TIxR
(ˇn_ba£, 
CAN_MBOX2
)

	)

93 
	#CAN_TDTxR
(
ˇn_ba£
, 
mbox
Ë
	`MMIO32
((ˇn_ba£Ë+ (mboxË+ 0x4)

	)

94 
	#CAN_TDT0R
(
ˇn_ba£
Ë
	`CAN_TDTxR
((ˇn_ba£), 
CAN_MBOX0
)

	)

95 
	#CAN_TDT1R
(
ˇn_ba£
Ë
	`CAN_TDTxR
((ˇn_ba£), 
CAN_MBOX1
)

	)

96 
	#CAN_TDT2R
(
ˇn_ba£
Ë
	`CAN_TDTxR
((ˇn_ba£), 
CAN_MBOX2
)

	)

99 
	#CAN_TDLxR
(
ˇn_ba£
, 
mbox
Ë
	`MMIO32
((ˇn_ba£Ë+ (mboxË+ 0x8)

	)

100 
	#CAN_TDL0R
(
ˇn_ba£
Ë
	`CAN_TDLxR
((ˇn_ba£), 
CAN_MBOX0
)

	)

101 
	#CAN_TDL1R
(
ˇn_ba£
Ë
	`CAN_TDLxR
((ˇn_ba£), 
CAN_MBOX1
)

	)

102 
	#CAN_TDL2R
(
ˇn_ba£
Ë
	`CAN_TDLxR
((ˇn_ba£), 
CAN_MBOX2
)

	)

105 
	#CAN_TDHxR
(
ˇn_ba£
, 
mbox
Ë
	`MMIO32
((ˇn_ba£Ë+ (mboxË+ 0xC)

	)

106 
	#CAN_TDH0R
(
ˇn_ba£
Ë
	`CAN_TDHxR
((ˇn_ba£), 
CAN_MBOX0
)

	)

107 
	#CAN_TDH1R
(
ˇn_ba£
Ë
	`CAN_TDHxR
((ˇn_ba£), 
CAN_MBOX1
)

	)

108 
	#CAN_TDH2R
(
ˇn_ba£
Ë
	`CAN_TDHxR
((ˇn_ba£), 
CAN_MBOX2
)

	)

111 
	#CAN_RIxR
(
ˇn_ba£
, 
fifo
Ë
	`MMIO32
((ˇn_ba£Ë+ (fifoË+ 0x0)

	)

112 
	#CAN_RI0R
(
ˇn_ba£
Ë
	`CAN_RIxR
((ˇn_ba£), 
CAN_FIFO0
)

	)

113 
	#CAN_RI1R
(
ˇn_ba£
Ë
	`CAN_RIxR
((ˇn_ba£), 
CAN_FIFO1
)

	)

116 
	#CAN_RDTxR
(
ˇn_ba£
, 
fifo
Ë
	`MMIO32
((ˇn_ba£Ë+ (fifoË+ 0x4)

	)

117 
	#CAN_RDT0R
(
ˇn_ba£
Ë
	`CAN_RDTxR
((ˇn_ba£), 
CAN_FIFO0
)

	)

118 
	#CAN_RDT1R
(
ˇn_ba£
Ë
	`CAN_RDTxR
((ˇn_ba£), 
CAN_FIFO1
)

	)

121 
	#CAN_RDLxR
(
ˇn_ba£
, 
fifo
Ë
	`MMIO32
((ˇn_ba£Ë+ (fifoË+ 0x8)

	)

122 
	#CAN_RDL0R
(
ˇn_ba£
Ë
	`CAN_RDLxR
((ˇn_ba£), 
CAN_FIFO0
)

	)

123 
	#CAN_RDL1R
(
ˇn_ba£
Ë
	`CAN_RDLxR
((ˇn_ba£), 
CAN_FIFO1
)

	)

126 
	#CAN_RDHxR
(
ˇn_ba£
, 
fifo
Ë
	`MMIO32
((ˇn_ba£Ë+ (fifoË+ 0xC)

	)

127 
	#CAN_RDH0R
(
ˇn_ba£
Ë
	`CAN_RDHxR
((ˇn_ba£), 
CAN_FIFO0
)

	)

128 
	#CAN_RDH1R
(
ˇn_ba£
Ë
	`CAN_RDHxR
((ˇn_ba£), 
CAN_FIFO1
)

	)

133 
	#CAN_FMR
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x200)

	)

136 
	#CAN_FM1R
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x204)

	)

141 
	#CAN_FS1R
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x20C)

	)

146 
	#CAN_FFA1R
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x214)

	)

151 
	#CAN_FA1R
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x21C)

	)

162 
	#CAN_FiR1
(
ˇn_ba£
, 
b™k
Ë
	`MMIO32
((can_base) + 0x240 + \

163 ((
b™k
Ë* 0x8Ë+ 0x0)

	)

164 
	#CAN_FiR2
(
ˇn_ba£
, 
b™k
Ë
	`MMIO32
((can_base) + 0x240 + \

165 ((
b™k
Ë* 0x8Ë+ 0x4)

	)

172 
	#CAN_MCR_DBF
 (1 << 16)

	)

175 
	#CAN_MCR_RESET
 (1 << 15)

	)

180 
	#CAN_MCR_TTCM
 (1 << 7)

	)

183 
	#CAN_MCR_ABOM
 (1 << 6)

	)

186 
	#CAN_MCR_AWUM
 (1 << 5)

	)

189 
	#CAN_MCR_NART
 (1 << 4)

	)

192 
	#CAN_MCR_RFLM
 (1 << 3)

	)

195 
	#CAN_MCR_TXFP
 (1 << 2)

	)

198 
	#CAN_MCR_SLEEP
 (1 << 1)

	)

201 
	#CAN_MCR_INRQ
 (1 << 0)

	)

208 
	#CAN_MSR_RX
 (1 << 11)

	)

211 
	#CAN_MSR_SAMP
 (1 << 10)

	)

214 
	#CAN_MSR_RXM
 (1 << 9)

	)

217 
	#CAN_MSR_TXM
 (1 << 8)

	)

222 
	#CAN_MSR_SLAKI
 (1 << 4)

	)

225 
	#CAN_MSR_WKUI
 (1 << 3)

	)

228 
	#CAN_MSR_ERRI
 (1 << 2)

	)

231 
	#CAN_MSR_SLAK
 (1 << 1)

	)

234 
	#CAN_MSR_INAK
 (1 << 0)

	)

239 
	#CAN_TSR_LOW2
 (1 << 31)

	)

242 
	#CAN_TSR_LOW1
 (1 << 30)

	)

245 
	#CAN_TSR_LOW0
 (1 << 29)

	)

248 
	#CAN_TSR_TME2
 (1 << 28)

	)

251 
	#CAN_TSR_TME1
 (1 << 27)

	)

254 
	#CAN_TSR_TME0
 (1 << 26)

	)

257 
	#CAN_TSR_CODE_MASK
 (0x3 << 24)

	)

260 
	#CAN_TSR_TABRQ2
 (1 << 23)

	)

265 
	#CAN_TSR_TERR2
 (1 << 19)

	)

268 
	#CAN_TSR_ALST2
 (1 << 18)

	)

271 
	#CAN_TSR_TXOK2
 (1 << 17)

	)

274 
	#CAN_TSR_RQCP2
 (1 << 16)

	)

277 
	#CAN_TSR_ABRQ1
 (1 << 15)

	)

282 
	#CAN_TSR_TERR1
 (1 << 11)

	)

285 
	#CAN_TSR_ALST1
 (1 << 10)

	)

288 
	#CAN_TSR_TXOK1
 (1 << 9)

	)

291 
	#CAN_TSR_RQCP1
 (1 << 8)

	)

294 
	#CAN_TSR_ABRQ0
 (1 << 7)

	)

299 
	#CAN_TSR_TERR0
 (1 << 3)

	)

302 
	#CAN_TSR_ALST0
 (1 << 2)

	)

305 
	#CAN_TSR_TXOK0
 (1 << 1)

	)

308 
	#CAN_TSR_RQCP0
 (1 << 0)

	)

315 
	#CAN_RF0R_RFOM0
 (1 << 5)

	)

318 
	#CAN_RF0R_FAVR0
 (1 << 4)

	)

321 
	#CAN_RF0R_FULL0
 (1 << 3)

	)

326 
	#CAN_RF0R_FMP0_MASK
 (0x3 << 0)

	)

333 
	#CAN_RF1R_RFOM1
 (1 << 5)

	)

336 
	#CAN_RF1R_FAVR1
 (1 << 4)

	)

339 
	#CAN_RF1R_FULL1
 (1 << 3)

	)

344 
	#CAN_RF1R_FMP1_MASK
 (0x3 << 0)

	)

351 
	#CAN_IER_SLKIE
 (1 << 17)

	)

354 
	#CAN_IER_WKUIE
 (1 << 16)

	)

357 
	#CAN_IER_ERRIE
 (1 << 15)

	)

362 
	#CAN_IER_LECIE
 (1 << 11)

	)

365 
	#CAN_IER_BOFIE
 (1 << 10)

	)

368 
	#CAN_IER_EPVIE
 (1 << 9)

	)

371 
	#CAN_IER_EWGIE
 (1 << 8)

	)

376 
	#CAN_IER_FOVIE1
 (1 << 6)

	)

379 
	#CAN_IER_FFIE1
 (1 << 5)

	)

382 
	#CAN_IER_FMPIE1
 (1 << 4)

	)

385 
	#CAN_IER_FOVIE0
 (1 << 3)

	)

388 
	#CAN_IER_FFIE0
 (1 << 2)

	)

391 
	#CAN_IER_FMPIE0
 (1 << 1)

	)

394 
	#CAN_IER_TMEIE
 (1 << 0)

	)

399 
	#CAN_ESR_REC_MASK
 (0xF << 24)

	)

402 
	#CAN_ESR_TEC_MASK
 (0xF << 16)

	)

407 
	#CAN_ESR_LEC_NO_ERROR
 (0x0 << 4)

	)

408 
	#CAN_ESR_LEC_STUFF_ERROR
 (0x1 << 4)

	)

409 
	#CAN_ESR_LEC_FORM_ERROR
 (0x2 << 4)

	)

410 
	#CAN_ESR_LEC_ACK_ERROR
 (0x3 << 4)

	)

411 
	#CAN_ESR_LEC_REC_ERROR
 (0x4 << 4)

	)

412 
	#CAN_ESR_LEC_DOM_ERROR
 (0x5 << 4)

	)

413 
	#CAN_ESR_LEC_CRC_ERROR
 (0x6 << 4)

	)

414 
	#CAN_ESR_LEC_SOFT_ERROR
 (0x7 << 4)

	)

415 
	#CAN_ESR_LEC_MASK
 (0x7 << 4)

	)

420 
	#CAN_ESR_BOFF
 (1 << 2)

	)

423 
	#CAN_ESR_EPVF
 (1 << 1)

	)

426 
	#CAN_ESR_EWGF
 (1 << 0)

	)

431 
	#CAN_BTR_SILM
 (1 << 31)

	)

434 
	#CAN_BTR_LBKM
 (1 << 30)

	)

439 
	#CAN_BTR_SJW_1TQ
 (0x0 << 24)

	)

440 
	#CAN_BTR_SJW_2TQ
 (0x1 << 24)

	)

441 
	#CAN_BTR_SJW_3TQ
 (0x2 << 24)

	)

442 
	#CAN_BTR_SJW_4TQ
 (0x3 << 24)

	)

443 
	#CAN_BTR_SJW_MASK
 (0x3 << 24)

	)

444 
	#CAN_BTR_SJW_SHIFT
 24

	)

449 
	#CAN_BTR_TS2_1TQ
 (0x0 << 20)

	)

450 
	#CAN_BTR_TS2_2TQ
 (0x1 << 20)

	)

451 
	#CAN_BTR_TS2_3TQ
 (0x2 << 20)

	)

452 
	#CAN_BTR_TS2_4TQ
 (0x3 << 20)

	)

453 
	#CAN_BTR_TS2_5TQ
 (0x4 << 20)

	)

454 
	#CAN_BTR_TS2_6TQ
 (0x5 << 20)

	)

455 
	#CAN_BTR_TS2_7TQ
 (0x6 << 20)

	)

456 
	#CAN_BTR_TS2_8TQ
 (0x7 << 20)

	)

457 
	#CAN_BTR_TS2_MASK
 (0x7 << 20)

	)

458 
	#CAN_BTR_TS2_SHIFT
 20

	)

461 
	#CAN_BTR_TS1_1TQ
 (0x0 << 16)

	)

462 
	#CAN_BTR_TS1_2TQ
 (0x1 << 16)

	)

463 
	#CAN_BTR_TS1_3TQ
 (0x2 << 16)

	)

464 
	#CAN_BTR_TS1_4TQ
 (0x3 << 16)

	)

465 
	#CAN_BTR_TS1_5TQ
 (0x4 << 16)

	)

466 
	#CAN_BTR_TS1_6TQ
 (0x5 << 16)

	)

467 
	#CAN_BTR_TS1_7TQ
 (0x6 << 16)

	)

468 
	#CAN_BTR_TS1_8TQ
 (0x7 << 16)

	)

469 
	#CAN_BTR_TS1_9TQ
 (0x8 << 16)

	)

470 
	#CAN_BTR_TS1_10TQ
 (0x9 << 16)

	)

471 
	#CAN_BTR_TS1_11TQ
 (0xA << 16)

	)

472 
	#CAN_BTR_TS1_12TQ
 (0xB << 16)

	)

473 
	#CAN_BTR_TS1_13TQ
 (0xC << 16)

	)

474 
	#CAN_BTR_TS1_14TQ
 (0xD << 16)

	)

475 
	#CAN_BTR_TS1_15TQ
 (0xE << 16)

	)

476 
	#CAN_BTR_TS1_16TQ
 (0xF << 16)

	)

477 
	#CAN_BTR_TS1_MASK
 (0xF << 16)

	)

478 
	#CAN_BTR_TS1_SHIFT
 16

	)

483 
	#CAN_BTR_BRP_MASK
 (0x1FFUL << 0)

	)

488 
	#CAN_TIxR_STID_MASK
 (0x7FF << 21)

	)

489 
	#CAN_TIxR_STID_SHIFT
 21

	)

492 
	#CAN_TIxR_EXID_MASK
 (0x1FFFFFF << 3)

	)

493 
	#CAN_TIxR_EXID_SHIFT
 3

	)

496 
	#CAN_TIxR_IDE
 (1 << 2)

	)

499 
	#CAN_TIxR_RTR
 (1 << 1)

	)

502 
	#CAN_TIxR_TXRQ
 (1 << 0)

	)

507 
	#CAN_TDTxR_TIME_MASK
 (0xFFFF << 15)

	)

508 
	#CAN_TDTxR_TIME_SHIFT
 15

	)

513 
	#CAN_TDTxR_TGT
 (1 << 5)

	)

518 
	#CAN_TDTxR_DLC_MASK
 (0xF << 0)

	)

519 
	#CAN_TDTxR_DLC_SHIFT
 0

	)

538 
	#CAN_RIxR_STID_MASK
 (0x7FF)

	)

539 
	#CAN_RIxR_STID_SHIFT
 21

	)

542 
	#CAN_RIxR_EXID_MASK
 (0x1FFFFFFF)

	)

543 
	#CAN_RIxR_EXID_SHIFT
 3

	)

546 
	#CAN_RIxR_IDE
 (1 << 2)

	)

549 
	#CAN_RIxR_RTR
 (1 << 1)

	)

556 
	#CAN_RDTxR_TIME_MASK
 (0xFFFF << 15)

	)

557 
	#CAN_RDTxR_TIME_SHIFT
 15

	)

560 
	#CAN_RDTxR_FMI_MASK
 (0xFF << 8)

	)

561 
	#CAN_RDTxR_FMI_SHIFT
 8

	)

566 
	#CAN_RDTxR_DLC_MASK
 (0xF << 0)

	)

567 
	#CAN_RDTxR_DLC_SHIFT
 0

	)

591 
	#CAN_FMR_CAN2SB_MASK
 (0x3F << 8)

	)

592 
	#CAN_FMR_CAN2SB_SHIFT
 15

	)

597 
	#CAN_FMR_FINIT
 (1 << 0)

	)

645 
BEGIN_DECLS


647 
ˇn_ª£t
(
uöt32_t
 
ˇ≈‹t
);

648 
ˇn_öô
(
uöt32_t
 
ˇ≈‹t
, 
boﬁ
 
âcm
, boﬁ 
abom
, boﬁ 
awum
, boﬁ 
«π
,

649 
boﬁ
 
rÊm
, boﬁ 
txÂ
, 
uöt32_t
 
sjw
, uöt32_à
ts1
, uöt32_à
ts2
,

650 
uöt32_t
 
bΩ
, 
boﬁ
 
lo›back
, boﬁ 
sûít
);

652 
ˇn_fûãr_öô
(
uöt32_t
 
ˇ≈‹t
, uöt32_à
ƒ
, 
boﬁ
 
sˇÀ_32bô
,

653 
boﬁ
 
id_li°_mode
, 
uöt32_t
 
‰1
, uöt32_à
‰2
,

654 
uöt32_t
 
fifo
, 
boﬁ
 
íabÀ
);

655 
ˇn_fûãr_id_mask_16bô_öô
(
uöt32_t
 
ˇ≈‹t
, uöt32_à
ƒ
, 
uöt16_t
 
id1
,

656 
uöt16_t
 
mask1
, uöt16_à
id2
,

657 
uöt16_t
 
mask2
, 
uöt32_t
 
fifo
, 
boﬁ
 
íabÀ
);

658 
ˇn_fûãr_id_mask_32bô_öô
(
uöt32_t
 
ˇ≈‹t
, uöt32_à
ƒ
, uöt32_à
id
,

659 
uöt32_t
 
mask
, uöt32_à
fifo
, 
boﬁ
 
íabÀ
);

660 
ˇn_fûãr_id_li°_16bô_öô
(
uöt32_t
 
ˇ≈‹t
, uöt32_à
ƒ
, 
uöt16_t
 
id1
,

661 
uöt16_t
 
id2
, uöt16_à
id3
, uöt16_à
id4
,

662 
uöt32_t
 
fifo
, 
boﬁ
 
íabÀ
);

663 
ˇn_fûãr_id_li°_32bô_öô
(
uöt32_t
 
ˇ≈‹t
, uöt32_à
ƒ
, uöt32_à
id1
,

664 
uöt32_t
 
id2
, uöt32_à
fifo
, 
boﬁ
 
íabÀ
);

666 
ˇn_íabÀ_úq
(
uöt32_t
 
ˇ≈‹t
, uöt32_à
úq
);

667 
ˇn_dißbÀ_úq
(
uöt32_t
 
ˇ≈‹t
, uöt32_à
úq
);

669 
ˇn_å™smô
(
uöt32_t
 
ˇ≈‹t
, uöt32_à
id
, 
boﬁ
 
ext
, boﬁ 
πr
,

670 
uöt8_t
 
Àngth
, uöt8_à*
d©a
);

671 
ˇn_ª˚ive
(
uöt32_t
 
ˇ≈‹t
, 
uöt8_t
 
fifo
, 
boﬁ
 
ªÀa£
, uöt32_à*
id
,

672 
boﬁ
 *
ext
, boﬁ *
πr
, 
uöt32_t
 *
fmi
, 
uöt8_t
 *
Àngth
,

673 
uöt8_t
 *
d©a
);

675 
ˇn_fifo_ªÀa£
(
uöt32_t
 
ˇ≈‹t
, 
uöt8_t
 
fifo
);

676 
boﬁ
 
ˇn_avaûabÀ_maûbox
(
uöt32_t
 
ˇ≈‹t
);

677 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\ADC_CO~1.H

33 #ifde‡
LIBOPENCM3_ADC_H


35 #i‚de‡
LIBOPENCM3_ADC_COMMON_V1_H


36 
	#LIBOPENCM3_ADC_COMMON_V1_H


	)

46 
	#ADC1
 
ADC1_BASE


	)

52 
	#ADC_SR
(
block
Ë
	`MMIO32
((blockË+ 0x00)

	)

55 
	#ADC_CR1
(
block
Ë
	`MMIO32
((blockË+ 0x04)

	)

58 
	#ADC_CR2
(
block
Ë
	`MMIO32
((blockË+ 0x08)

	)

61 
	#ADC_SMPR1
(
block
Ë
	`MMIO32
((blockË+ 0x0c)

	)

64 
	#ADC_SMPR2
(
block
Ë
	`MMIO32
((blockË+ 0x10)

	)

66 
	#ADC1_SR
 
	`ADC_SR
(
ADC1
)

	)

67 
	#ADC1_CR1
 
	`ADC_CR1
(
ADC1
)

	)

68 
	#ADC1_CR2
 
	`ADC_CR2
(
ADC1
)

	)

69 
	#ADC1_SMPR1
 
	`ADC_SMPR1
(
ADC1
)

	)

70 
	#ADC1_SMPR2
 
	`ADC_SMPR2
(
ADC1
)

	)

72 
	#ADC1_JOFR1
 
	`ADC_JOFR1
(
ADC1
)

	)

73 
	#ADC1_JOFR2
 
	`ADC_JOFR2
(
ADC1
)

	)

74 
	#ADC1_JOFR3
 
	`ADC_JOFR3
(
ADC1
)

	)

75 
	#ADC1_JOFR4
 
	`ADC_JOFR4
(
ADC1
)

	)

77 
	#ADC1_HTR
 
	`ADC_HTR
(
ADC1
)

	)

78 
	#ADC1_LTR
 
	`ADC_LTR
(
ADC1
)

	)

80 
	#ADC1_SQR1
 
	`ADC_SQR1
(
ADC1
)

	)

81 
	#ADC1_SQR2
 
	`ADC_SQR2
(
ADC1
)

	)

82 
	#ADC1_SQR3
 
	`ADC_SQR3
(
ADC1
)

	)

83 
	#ADC1_JSQR
 
	`ADC_JSQR
(
ADC1
)

	)

85 
	#ADC1_JDR1
 
	`ADC_JDR1
(
ADC1
)

	)

86 
	#ADC1_JDR2
 
	`ADC_JDR2
(
ADC1
)

	)

87 
	#ADC1_JDR3
 
	`ADC_JDR3
(
ADC1
)

	)

88 
	#ADC1_JDR4
 
	`ADC_JDR4
(
ADC1
)

	)

89 
	#ADC1_DR
 
	`ADC_DR
(
ADC1
)

	)

91 #i‡
deföed
(
ADC2_BASE
)

92 
	#ADC2
 
ADC2_BASE


	)

93 
	#ADC2_SR
 
	`ADC_SR
(
ADC2
)

	)

94 
	#ADC2_CR1
 
	`ADC_CR1
(
ADC2
)

	)

95 
	#ADC2_CR2
 
	`ADC_CR2
(
ADC2
)

	)

96 
	#ADC2_SMPR1
 
	`ADC_SMPR1
(
ADC2
)

	)

97 
	#ADC2_SMPR2
 
	`ADC_SMPR2
(
ADC2
)

	)

99 
	#ADC2_JOFR1
 
	`ADC_JOFR1
(
ADC2
)

	)

100 
	#ADC2_JOFR2
 
	`ADC_JOFR2
(
ADC2
)

	)

101 
	#ADC2_JOFR3
 
	`ADC_JOFR3
(
ADC2
)

	)

102 
	#ADC2_JOFR4
 
	`ADC_JOFR4
(
ADC2
)

	)

105 
	#ADC2_HTR
 
	`ADC_HTR
(
ADC2
)

	)

107 
	#ADC2_LTR
 
	`ADC_LTR
(
ADC2
)

	)

110 
	#ADC2_SQR1
 
	`ADC_SQR1
(
ADC2
)

	)

112 
	#ADC2_SQR2
 
	`ADC_SQR2
(
ADC2
)

	)

114 
	#ADC2_SQR3
 
	`ADC_SQR3
(
ADC2
)

	)

116 
	#ADC2_JSQR
 
	`ADC_JSQR
(
ADC2
)

	)

119 
	#ADC2_JDR1
 
	`ADC_JDR1
(
ADC2
)

	)

120 
	#ADC2_JDR2
 
	`ADC_JDR2
(
ADC2
)

	)

121 
	#ADC2_JDR3
 
	`ADC_JDR3
(
ADC2
)

	)

122 
	#ADC2_JDR4
 
	`ADC_JDR4
(
ADC2
)

	)

124 
	#ADC2_DR
 
	`ADC_DR
(
ADC2
)

	)

127 #i‡
deföed
(
ADC3_BASE
)

128 
	#ADC3
 
ADC3_BASE


	)

129 
	#ADC3_SR
 
	`ADC_SR
(
ADC3
)

	)

130 
	#ADC3_CR1
 
	`ADC_CR1
(
ADC3
)

	)

131 
	#ADC3_CR2
 
	`ADC_CR2
(
ADC3
)

	)

132 
	#ADC3_SMPR1
 
	`ADC_SMPR1
(
ADC3
)

	)

133 
	#ADC3_SMPR2
 
	`ADC_SMPR2
(
ADC3
)

	)

135 
	#ADC3_JOFR1
 
	`ADC_JOFR1
(
ADC3
)

	)

136 
	#ADC3_JOFR2
 
	`ADC_JOFR2
(
ADC3
)

	)

137 
	#ADC3_JOFR3
 
	`ADC_JOFR3
(
ADC3
)

	)

138 
	#ADC3_JOFR4
 
	`ADC_JOFR4
(
ADC3
)

	)

140 
	#ADC3_HTR
 
	`ADC_HTR
(
ADC3
)

	)

141 
	#ADC3_LTR
 
	`ADC_LTR
(
ADC3
)

	)

143 
	#ADC3_SQR1
 
	`ADC_SQR1
(
ADC3
)

	)

144 
	#ADC3_SQR2
 
	`ADC_SQR2
(
ADC3
)

	)

145 
	#ADC3_SQR3
 
	`ADC_SQR3
(
ADC3
)

	)

146 
	#ADC3_JSQR
 
	`ADC_JSQR
(
ADC3
)

	)

148 
	#ADC3_JDR1
 
	`ADC_JDR1
(
ADC3
)

	)

149 
	#ADC3_JDR2
 
	`ADC_JDR2
(
ADC3
)

	)

150 
	#ADC3_JDR3
 
	`ADC_JDR3
(
ADC3
)

	)

151 
	#ADC3_JDR4
 
	`ADC_JDR4
(
ADC3
)

	)

152 
	#ADC3_DR
 
	`ADC_DR
(
ADC3
)

	)

164 
	#ADC_CHANNEL0
 0x00

	)

165 
	#ADC_CHANNEL1
 0x01

	)

166 
	#ADC_CHANNEL2
 0x02

	)

167 
	#ADC_CHANNEL3
 0x03

	)

168 
	#ADC_CHANNEL4
 0x04

	)

169 
	#ADC_CHANNEL5
 0x05

	)

170 
	#ADC_CHANNEL6
 0x06

	)

171 
	#ADC_CHANNEL7
 0x07

	)

172 
	#ADC_CHANNEL8
 0x08

	)

173 
	#ADC_CHANNEL9
 0x09

	)

174 
	#ADC_CHANNEL10
 0x0A

	)

175 
	#ADC_CHANNEL11
 0x0B

	)

176 
	#ADC_CHANNEL12
 0x0C

	)

177 
	#ADC_CHANNEL13
 0x0D

	)

178 
	#ADC_CHANNEL14
 0x0E

	)

179 
	#ADC_CHANNEL15
 0x0F

	)

180 
	#ADC_CHANNEL16
 0x10

	)

181 
	#ADC_CHANNEL17
 0x11

	)

182 
	#ADC_CHANNEL18
 0x12

	)

184 
	#ADC_CHANNEL_MASK
 0x1F

	)

189 
	#ADC_SR_STRT
 (1 << 4)

	)

190 
	#ADC_SR_JSTRT
 (1 << 3)

	)

191 
	#ADC_SR_JEOC
 (1 << 2)

	)

192 
	#ADC_SR_EOC
 (1 << 1)

	)

193 
	#ADC_SR_AWD
 (1 << 0)

	)

198 
	#ADC_CR1_AWDEN
 (1 << 23)

	)

201 
	#ADC_CR1_JAWDEN
 (1 << 22)

	)

212 
	#ADC_CR1_DISCNUM_1CHANNELS
 (0x0 << 13)

	)

213 
	#ADC_CR1_DISCNUM_2CHANNELS
 (0x1 << 13)

	)

214 
	#ADC_CR1_DISCNUM_3CHANNELS
 (0x2 << 13)

	)

215 
	#ADC_CR1_DISCNUM_4CHANNELS
 (0x3 << 13)

	)

216 
	#ADC_CR1_DISCNUM_5CHANNELS
 (0x4 << 13)

	)

217 
	#ADC_CR1_DISCNUM_6CHANNELS
 (0x5 << 13)

	)

218 
	#ADC_CR1_DISCNUM_7CHANNELS
 (0x6 << 13)

	)

219 
	#ADC_CR1_DISCNUM_8CHANNELS
 (0x7 << 13)

	)

221 
	#ADC_CR1_DISCNUM_MASK
 (0x7 << 13)

	)

222 
	#ADC_CR1_DISCNUM_SHIFT
 13

	)

225 
	#ADC_CR1_JDISCEN
 (1 << 12)

	)

228 
	#ADC_CR1_DISCEN
 (1 << 11)

	)

231 
	#ADC_CR1_JAUTO
 (1 << 10)

	)

234 
	#ADC_CR1_AWDSGL
 (1 << 9)

	)

237 
	#ADC_CR1_SCAN
 (1 << 8)

	)

240 
	#ADC_CR1_JEOCIE
 (1 << 7)

	)

243 
	#ADC_CR1_AWDIE
 (1 << 6)

	)

246 
	#ADC_CR1_EOCIE
 (1 << 5)

	)

258 
	#ADC_CR1_AWDCH_CHANNEL0
 (0x00 << 0)

	)

259 
	#ADC_CR1_AWDCH_CHANNEL1
 (0x01 << 0)

	)

260 
	#ADC_CR1_AWDCH_CHANNEL2
 (0x02 << 0)

	)

261 
	#ADC_CR1_AWDCH_CHANNEL3
 (0x03 << 0)

	)

262 
	#ADC_CR1_AWDCH_CHANNEL4
 (0x04 << 0)

	)

263 
	#ADC_CR1_AWDCH_CHANNEL5
 (0x05 << 0)

	)

264 
	#ADC_CR1_AWDCH_CHANNEL6
 (0x06 << 0)

	)

265 
	#ADC_CR1_AWDCH_CHANNEL7
 (0x07 << 0)

	)

266 
	#ADC_CR1_AWDCH_CHANNEL8
 (0x08 << 0)

	)

267 
	#ADC_CR1_AWDCH_CHANNEL9
 (0x09 << 0)

	)

268 
	#ADC_CR1_AWDCH_CHANNEL10
 (0x0A << 0)

	)

269 
	#ADC_CR1_AWDCH_CHANNEL11
 (0x0B << 0)

	)

270 
	#ADC_CR1_AWDCH_CHANNEL12
 (0x0C << 0)

	)

271 
	#ADC_CR1_AWDCH_CHANNEL13
 (0x0D << 0)

	)

272 
	#ADC_CR1_AWDCH_CHANNEL14
 (0x0E << 0)

	)

273 
	#ADC_CR1_AWDCH_CHANNEL15
 (0x0F << 0)

	)

274 
	#ADC_CR1_AWDCH_CHANNEL16
 (0x10 << 0)

	)

275 
	#ADC_CR1_AWDCH_CHANNEL17
 (0x11 << 0)

	)

277 
	#ADC_CR1_AWDCH_MASK
 (0x1F << 0)

	)

278 
	#ADC_CR1_AWDCH_SHIFT
 0

	)

283 
	#ADC_CR2_ALIGN_RIGHT
 (0 << 11)

	)

284 
	#ADC_CR2_ALIGN_LEFT
 (1 << 11)

	)

285 
	#ADC_CR2_ALIGN
 (1 << 11)

	)

288 
	#ADC_CR2_DMA
 (1 << 8)

	)

291 
	#ADC_CR2_CONT
 (1 << 1)

	)

299 
	#ADC_CR2_ADON
 (1 << 0)

	)

303 
	#ADC_JOFFSET_LSB
 0

	)

304 
	#ADC_JOFFSET_MSK
 0xfff

	)

305 
	#ADC_HT_LSB
 0

	)

306 
	#ADC_HT_MSK
 0xfff

	)

307 
	#ADC_LT_LSB
 0

	)

308 
	#ADC_LT_MSK
 0xfff

	)

313 
	#ADC_SQR1_L_LSB
 20

	)

316 
	#ADC_JSQR_JL_LSB
 20

	)

317 
	#ADC_JSQR_JSQ4_LSB
 15

	)

318 
	#ADC_JSQR_JSQ3_LSB
 10

	)

319 
	#ADC_JSQR_JSQ2_LSB
 5

	)

320 
	#ADC_JSQR_JSQ1_LSB
 0

	)

328 
	#ADC_JSQR_JL_1CHANNELS
 (0x0 << 
ADC_JSQR_JL_LSB
)

	)

329 
	#ADC_JSQR_JL_2CHANNELS
 (0x1 << 
ADC_JSQR_JL_LSB
)

	)

330 
	#ADC_JSQR_JL_3CHANNELS
 (0x2 << 
ADC_JSQR_JL_LSB
)

	)

331 
	#ADC_JSQR_JL_4CHANNELS
 (0x3 << 
ADC_JSQR_JL_LSB
)

	)

333 
	#ADC_JSQR_JL_MSK
 (0x2 << 
ADC_JSQR_JL_LSB
)

	)

334 
	#ADC_JSQR_JSQ4_MSK
 (0x1‡<< 
ADC_JSQR_JSQ4_LSB
)

	)

335 
	#ADC_JSQR_JSQ3_MSK
 (0x1‡<< 
ADC_JSQR_JSQ3_LSB
)

	)

336 
	#ADC_JSQR_JSQ2_MSK
 (0x1‡<< 
ADC_JSQR_JSQ2_LSB
)

	)

337 
	#ADC_JSQR_JSQ1_MSK
 (0x1‡<< 
ADC_JSQR_JSQ1_LSB
)

	)

339 
	#ADC_JSQR_JSQ_VAL
(
n
, 
vÆ
Ë((vÆË<< ((“Ë- 1Ë* 5))

	)

340 
	#ADC_JSQR_JL_VAL
(
vÆ
Ë(((vÆË- 1Ë<< 
ADC_JSQR_JL_LSB
)

	)

342 #i‡(
deföed
(
THESE_HAVE_BAD_NAMES_PROBABLY
) && (THESE_HAVE_BAD_NAMES_PROBABLY))

345 
	#ADC_JDATA_LSB
 0

	)

346 
	#ADC_DATA_LSB
 0

	)

347 
	#ADC_ADC2DATA_LSB
 16

	)

348 
	#ADC_JDATA_MSK
 (0xfff‡<< 
ADC_JDATA_LSB
)

	)

349 
	#ADC_DATA_MSK
 (0xfff‡<< 
ADC_DA
)

	)

350 
	#ADC_ADC2DATA_MSK
 (0xfff‡<< 
ADC_ADC2DATA_LSB
)

	)

357 
BEGIN_DECLS


359 
adc_powî_⁄
(
uöt32_t
 
adc
);

360 
adc_powî_off
(
uöt32_t
 
adc
);

361 
adc_íabÀ_™Æog_w©chdog_ªguœr
(
uöt32_t
 
adc
);

362 
adc_dißbÀ_™Æog_w©chdog_ªguœr
(
uöt32_t
 
adc
);

363 
adc_íabÀ_™Æog_w©chdog_öje˘ed
(
uöt32_t
 
adc
);

364 
adc_dißbÀ_™Æog_w©chdog_öje˘ed
(
uöt32_t
 
adc
);

365 
adc_íabÀ_disc⁄töuous_mode_ªguœr
(
uöt32_t
 
adc
, 
uöt8_t
 
Àngth
);

366 
adc_dißbÀ_disc⁄töuous_mode_ªguœr
(
uöt32_t
 
adc
);

367 
adc_íabÀ_disc⁄töuous_mode_öje˘ed
(
uöt32_t
 
adc
);

368 
adc_dißbÀ_disc⁄töuous_mode_öje˘ed
(
uöt32_t
 
adc
);

369 
adc_íabÀ_autom©ic_öje˘ed_group_c⁄vîsi⁄
(
uöt32_t
 
adc
);

370 
adc_dißbÀ_autom©ic_öje˘ed_group_c⁄vîsi⁄
(
uöt32_t
 
adc
);

371 
adc_íabÀ_™Æog_w©chdog_⁄_Æl_ch™√ls
(
uöt32_t
 
adc
);

372 
adc_íabÀ_™Æog_w©chdog_⁄_£À˘ed_ch™√l
(
uöt32_t
 
adc
,

373 
uöt8_t
 
ch™√l
);

374 
adc_íabÀ_sˇn_mode
(
uöt32_t
 
adc
);

375 
adc_dißbÀ_sˇn_mode
(
uöt32_t
 
adc
);

376 
adc_íabÀ_eoc_öãºu±_öje˘ed
(
uöt32_t
 
adc
);

377 
adc_dißbÀ_eoc_öãºu±_öje˘ed
(
uöt32_t
 
adc
);

378 
adc_íabÀ_awd_öãºu±
(
uöt32_t
 
adc
);

379 
adc_dißbÀ_awd_öãºu±
(
uöt32_t
 
adc
);

380 
adc_íabÀ_eoc_öãºu±
(
uöt32_t
 
adc
);

381 
adc_dißbÀ_eoc_öãºu±
(
uöt32_t
 
adc
);

382 
adc_£t_À·_Æig√d
(
uöt32_t
 
adc
);

383 
adc_£t_right_Æig√d
(
uöt32_t
 
adc
);

384 
boﬁ
 
adc_eoc
(
uöt32_t
 
adc
);

385 
boﬁ
 
adc_eoc_öje˘ed
(
uöt32_t
 
adc
);

386 
uöt32_t
 
adc_ªad_ªguœr
(uöt32_à
adc
);

387 
uöt32_t
 
adc_ªad_öje˘ed
(uöt32_à
adc
, 
uöt8_t
 
ªg
);

388 
adc_£t_c⁄töuous_c⁄vîsi⁄_mode
(
uöt32_t
 
adc
);

389 
adc_£t_sögÀ_c⁄vîsi⁄_mode
(
uöt32_t
 
adc
);

390 
adc_£t_ªguœr_£quí˚
(
uöt32_t
 
adc
, 
uöt8_t
 
Àngth
, uöt8_à
ch™√l
[]);

391 
adc_£t_öje˘ed_£quí˚
(
uöt32_t
 
adc
, 
uöt8_t
 
Àngth
, uöt8_à
ch™√l
[]);

392 
adc_£t_öje˘ed_off£t
(
uöt32_t
 
adc
, 
uöt8_t
 
ªg
, uöt32_à
off£t
);

393 
adc_£t_w©chdog_high_thªshﬁd
(
uöt32_t
 
adc
, 
uöt16_t
 
thªshﬁd
);

394 
adc_£t_w©chdog_low_thªshﬁd
(
uöt32_t
 
adc
, 
uöt16_t
 
thªshﬁd
);

395 
adc_°¨t_c⁄vîsi⁄_ªguœr
(
uöt32_t
 
adc
);

396 
adc_°¨t_c⁄vîsi⁄_öje˘ed
(
uöt32_t
 
adc
);

397 
adc_íabÀ_dma
(
uöt32_t
 
adc
);

398 
adc_dißbÀ_dma
(
uöt32_t
 
adc
);

401 
adc_£t_ßm∂e_time
(
uöt32_t
 
adc
, 
uöt8_t
 
ch™√l
, uöt8_à
time
);

402 
adc_£t_ßm∂e_time_⁄_Æl_ch™√ls
(
uöt32_t
 
adc
, 
uöt8_t
 
time
);

403 
adc_dißbÀ_exã∫Æ_åiggî_ªguœr
(
uöt32_t
 
adc
);

404 
adc_dißbÀ_exã∫Æ_åiggî_öje˘ed
(
uöt32_t
 
adc
);

406 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\CRC_CO~1.H

31 #ifde‡
LIBOPENCM3_CRC_H


33 #i‚de‡
LIBOPENCM3_CRC_COMMON_ALL_H


34 
	#LIBOPENCM3_CRC_COMMON_ALL_H


	)

47 
	#CRC_DR
 
	`MMIO32
(
CRC_BASE
 + 0x00)

	)

50 
	#CRC_IDR
 
	`MMIO32
(
CRC_BASE
 + 0x04)

	)

53 
	#CRC_CR
 
	`MMIO32
(
CRC_BASE
 + 0x08)

	)

74 
	#CRC_CR_RESET
 (1 << 0)

	)

84 
BEGIN_DECLS


91 
¸c_ª£t
();

98 
uöt32_t
 
¸c_ˇlcuœã
(uöt32_à
d©a
);

106 
uöt32_t
 
¸c_ˇlcuœã_block
(uöt32_à*
d©≠
, 
size
);

108 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\DAC_CO~1.H

34 #ifde‡
LIBOPENCM3_DAC_H


36 #i‚de‡
LIBOPENCM3_DAC_COMMON_ALL_H


37 
	#LIBOPENCM3_DAC_COMMON_ALL_H


	)

42 
	#DAC_CR
 
	`MMIO32
(
DAC_BASE
 + 0x00)

	)

45 
	#DAC_SWTRIGR
 
	`MMIO32
(
DAC_BASE
 + 0x04)

	)

48 
	#DAC_DHR12R1
 
	`MMIO32
(
DAC_BASE
 + 0x08)

	)

51 
	#DAC_DHR12L1
 
	`MMIO32
(
DAC_BASE
 + 0x0C)

	)

54 
	#DAC_DHR8R1
 
	`MMIO32
(
DAC_BASE
 + 0x10)

	)

57 
	#DAC_DHR12R2
 
	`MMIO32
(
DAC_BASE
 + 0x14)

	)

60 
	#DAC_DHR12L2
 
	`MMIO32
(
DAC_BASE
 + 0x18)

	)

63 
	#DAC_DHR8R2
 
	`MMIO32
(
DAC_BASE
 + 0x1C)

	)

66 
	#DAC_DHR12RD
 
	`MMIO32
(
DAC_BASE
 + 0x20)

	)

69 
	#DAC_DHR12LD
 
	`MMIO32
(
DAC_BASE
 + 0x24)

	)

72 
	#DAC_DHR8RD
 
	`MMIO32
(
DAC_BASE
 + 0x28)

	)

75 
	#DAC_DOR1
 
	`MMIO32
(
DAC_BASE
 + 0x2C)

	)

78 
	#DAC_DOR2
 
	`MMIO32
(
DAC_BASE
 + 0x30)

	)

85 
	#DAC_CR_DMAUDRIE2
 (1 << 29)

	)

88 
	#DAC_CR_DMAEN2
 (1 << 28)

	)

94 
	#DAC_CR_MAMP2_SHIFT
 24

	)

101 
	#DAC_CR_MAMP2_1
 (0x0 << 
DAC_CR_MAMP2_SHIFT
)

	)

102 
	#DAC_CR_MAMP2_2
 (0x1 << 
DAC_CR_MAMP2_SHIFT
)

	)

103 
	#DAC_CR_MAMP2_3
 (0x2 << 
DAC_CR_MAMP2_SHIFT
)

	)

104 
	#DAC_CR_MAMP2_4
 (0x3 << 
DAC_CR_MAMP2_SHIFT
)

	)

105 
	#DAC_CR_MAMP2_5
 (0x4 << 
DAC_CR_MAMP2_SHIFT
)

	)

106 
	#DAC_CR_MAMP2_6
 (0x5 << 
DAC_CR_MAMP2_SHIFT
)

	)

107 
	#DAC_CR_MAMP2_7
 (0x6 << 
DAC_CR_MAMP2_SHIFT
)

	)

108 
	#DAC_CR_MAMP2_8
 (0x7 << 
DAC_CR_MAMP2_SHIFT
)

	)

109 
	#DAC_CR_MAMP2_9
 (0x8 << 
DAC_CR_MAMP2_SHIFT
)

	)

110 
	#DAC_CR_MAMP2_10
 (0x9 << 
DAC_CR_MAMP2_SHIFT
)

	)

111 
	#DAC_CR_MAMP2_11
 (0xA << 
DAC_CR_MAMP2_SHIFT
)

	)

112 
	#DAC_CR_MAMP2_12
 (0xB << 
DAC_CR_MAMP2_SHIFT
)

	)

123 
	#DAC_CR_WAVE2_SHIFT
 22

	)

124 
	#DAC_CR_WAVE2_DIS
 (0x3 << 
DAC_CR_WAVE2_SHIFT
)

	)

133 
	#DAC_CR_WAVE2_NOISE
 (0x1 << 
DAC_CR_WAVE2_SHIFT
)

	)

134 
	#DAC_CR_WAVE2_TRI
 (0x2 << 
DAC_CR_WAVE2_SHIFT
)

	)

155 
	#DAC_CR_TSEL2_SHIFT
 19

	)

175 
	#DAC_CR_TSEL2_T6
 (0x0 << 
DAC_CR_TSEL2_SHIFT
)

	)

176 
	#DAC_CR_TSEL2_T3
 (0x1 << 
DAC_CR_TSEL2_SHIFT
)

	)

177 
	#DAC_CR_TSEL2_T8
 (0x1 << 
DAC_CR_TSEL2_SHIFT
)

	)

178 
	#DAC_CR_TSEL2_T7
 (0x2 << 
DAC_CR_TSEL2_SHIFT
)

	)

179 
	#DAC_CR_TSEL2_T5
 (0x3 << 
DAC_CR_TSEL2_SHIFT
)

	)

180 
	#DAC_CR_TSEL2_T15
 (0x3 << 
DAC_CR_TSEL2_SHIFT
)

	)

181 
	#DAC_CR_TSEL2_T2
 (0x4 << 
DAC_CR_TSEL2_SHIFT
)

	)

182 
	#DAC_CR_TSEL2_T4
 (0x5 << 
DAC_CR_TSEL2_SHIFT
)

	)

183 
	#DAC_CR_TSEL2_E9
 (0x6 << 
DAC_CR_TSEL2_SHIFT
)

	)

184 
	#DAC_CR_TSEL2_SW
 (0x7 << 
DAC_CR_TSEL2_SHIFT
)

	)

188 
	#DAC_CR_TEN2
 (1 << 18)

	)

191 
	#DAC_CR_BOFF2
 (1 << 17)

	)

194 
	#DAC_CR_EN2
 (1 << 16)

	)

198 
	#DAC_CR_DMAUDRIE1
 (1 << 13)

	)

201 
	#DAC_CR_DMAEN1
 (1 << 12)

	)

207 
	#DAC_CR_MAMP1_SHIFT
 8

	)

214 
	#DAC_CR_MAMP1_1
 (0x0 << 
DAC_CR_MAMP1_SHIFT
)

	)

215 
	#DAC_CR_MAMP1_2
 (0x1 << 
DAC_CR_MAMP1_SHIFT
)

	)

216 
	#DAC_CR_MAMP1_3
 (0x2 << 
DAC_CR_MAMP1_SHIFT
)

	)

217 
	#DAC_CR_MAMP1_4
 (0x3 << 
DAC_CR_MAMP1_SHIFT
)

	)

218 
	#DAC_CR_MAMP1_5
 (0x4 << 
DAC_CR_MAMP1_SHIFT
)

	)

219 
	#DAC_CR_MAMP1_6
 (0x5 << 
DAC_CR_MAMP1_SHIFT
)

	)

220 
	#DAC_CR_MAMP1_7
 (0x6 << 
DAC_CR_MAMP1_SHIFT
)

	)

221 
	#DAC_CR_MAMP1_8
 (0x7 << 
DAC_CR_MAMP1_SHIFT
)

	)

222 
	#DAC_CR_MAMP1_9
 (0x8 << 
DAC_CR_MAMP1_SHIFT
)

	)

223 
	#DAC_CR_MAMP1_10
 (0x9 << 
DAC_CR_MAMP1_SHIFT
)

	)

224 
	#DAC_CR_MAMP1_11
 (0xA << 
DAC_CR_MAMP1_SHIFT
)

	)

225 
	#DAC_CR_MAMP1_12
 (0xB << 
DAC_CR_MAMP1_SHIFT
)

	)

236 
	#DAC_CR_WAVE1_SHIFT
 6

	)

237 
	#DAC_CR_WAVE1_DIS
 (0x3 << 
DAC_CR_WAVE1_SHIFT
)

	)

247 
	#DAC_CR_WAVE1_NOISE
 (0x1 << 
DAC_CR_WAVE1_SHIFT
)

	)

248 
	#DAC_CR_WAVE1_TRI
 (0x2 << 
DAC_CR_WAVE1_SHIFT
)

	)

269 
	#DAC_CR_TSEL1_SHIFT
 3

	)

289 
	#DAC_CR_TSEL1_T6
 (0x0 << 
DAC_CR_TSEL1_SHIFT
)

	)

290 
	#DAC_CR_TSEL1_T3
 (0x1 << 
DAC_CR_TSEL1_SHIFT
)

	)

291 
	#DAC_CR_TSEL1_T8
 (0x1 << 
DAC_CR_TSEL1_SHIFT
)

	)

292 
	#DAC_CR_TSEL1_T7
 (0x2 << 
DAC_CR_TSEL1_SHIFT
)

	)

293 
	#DAC_CR_TSEL1_T5
 (0x3 << 
DAC_CR_TSEL1_SHIFT
)

	)

294 
	#DAC_CR_TSEL1_T15
 (0x3 << 
DAC_CR_TSEL1_SHIFT
)

	)

295 
	#DAC_CR_TSEL1_T2
 (0x4 << 
DAC_CR_TSEL1_SHIFT
)

	)

296 
	#DAC_CR_TSEL1_T4
 (0x5 << 
DAC_CR_TSEL1_SHIFT
)

	)

297 
	#DAC_CR_TSEL1_E9
 (0x6 << 
DAC_CR_TSEL1_SHIFT
)

	)

298 
	#DAC_CR_TSEL1_SW
 (0x7 << 
DAC_CR_TSEL1_SHIFT
)

	)

302 
	#DAC_CR_TEN1
 (1 << 2)

	)

305 
	#DAC_CR_BOFF1
 (1 << 1)

	)

308 
	#DAC_CR_EN1
 (1 << 0)

	)

314 
	#DAC_SWTRIGR_SWTRIG2
 (1 << 1)

	)

317 
	#DAC_SWTRIGR_SWTRIG1
 (1 << 0)

	)

321 
	#DAC_DHR12R1_DACC1DHR_LSB
 (1 << 0)

	)

322 
	#DAC_DHR12R1_DACC1DHR_MSK
 (0x0FFF << 0)

	)

326 
	#DAC_DHR12L1_DACC1DHR_LSB
 (1 << 4)

	)

327 
	#DAC_DHR12L1_DACC1DHR_MSK
 (0x0FFF << 4)

	)

331 
	#DAC_DHR8R1_DACC1DHR_LSB
 (1 << 0)

	)

332 
	#DAC_DHR8R1_DACC1DHR_MSK
 (0x00FF << 0)

	)

336 
	#DAC_DHR12R2_DACC2DHR_LSB
 (1 << 0)

	)

337 
	#DAC_DHR12R2_DACC2DHR_MSK
 (0x00FFF << 0)

	)

341 
	#DAC_DHR12L2_DACC2DHR_LSB
 (1 << 4)

	)

342 
	#DAC_DHR12L2_DACC2DHR_MSK
 (0x0FFF << 4)

	)

346 
	#DAC_DHR8R2_DACC2DHR_LSB
 (1 << 0)

	)

347 
	#DAC_DHR8R2_DACC2DHR_MSK
 (0x00FF << 0)

	)

351 
	#DAC_DHR12RD_DACC2DHR_LSB
 (1 << 16)

	)

352 
	#DAC_DHR12RD_DACC2DHR_MSK
 (0x0FFF << 16)

	)

353 
	#DAC_DHR12RD_DACC1DHR_LSB
 (1 << 0)

	)

354 
	#DAC_DHR12RD_DACC1DHR_MSK
 (0x0FFF << 0)

	)

358 
	#DAC_DHR12LD_DACC2DHR_LSB
 (1 << 16)

	)

359 
	#DAC_DHR12LD_DACC2DHR_MSK
 (0x0FFF << 20)

	)

360 
	#DAC_DHR12LD_DACC1DHR_LSB
 (1 << 0)

	)

361 
	#DAC_DHR12LD_DACC1DHR_MSK
 (0x0FFF << 4)

	)

365 
	#DAC_DHR8RD_DACC2DHR_LSB
 (1 << 8)

	)

366 
	#DAC_DHR8RD_DACC2DHR_MSK
 (0x00FF << 8)

	)

367 
	#DAC_DHR8RD_DACC1DHR_LSB
 (1 << 0)

	)

368 
	#DAC_DHR8RD_DACC1DHR_MSK
 (0x00FF << 0)

	)

372 
	#DAC_DOR1_DACC1DOR_LSB
 (1 << 0)

	)

373 
	#DAC_DOR1_DACC1DOR_MSK
 (0x0FFF << 0)

	)

377 
	#DAC_DOR2_DACC2DOR_LSB
 (1 << 0)

	)

378 
	#DAC_DOR2_DACC2DOR_MSK
 (0x0FFF << 0)

	)

382 
	mCHANNEL_1
, 
	mCHANNEL_2
, 
	mCHANNEL_D


383 } 
	td©a_ch™√l
;

387 
	mRIGHT8
, 
	mRIGHT12
, 
	mLEFT12


388 } 
	td©a_Æign
;

392 
BEGIN_DECLS


394 
dac_íabÀ
(
d©a_ch™√l
 
dac_ch™√l
);

395 
dac_dißbÀ
(
d©a_ch™√l
 
dac_ch™√l
);

396 
dac_buf„r_íabÀ
(
d©a_ch™√l
 
dac_ch™√l
);

397 
dac_buf„r_dißbÀ
(
d©a_ch™√l
 
dac_ch™√l
);

398 
dac_dma_íabÀ
(
d©a_ch™√l
 
dac_ch™√l
);

399 
dac_dma_dißbÀ
(
d©a_ch™√l
 
dac_ch™√l
);

400 
dac_åiggî_íabÀ
(
d©a_ch™√l
 
dac_ch™√l
);

401 
dac_åiggî_dißbÀ
(
d©a_ch™√l
 
dac_ch™√l
);

402 
dac_£t_åiggî_sour˚
(
uöt32_t
 
dac_åig_§c
);

403 
dac_£t_wavef‹m_gíî©i⁄
(
uöt32_t
 
dac_wave_ís
);

404 
dac_dißbÀ_wavef‹m_gíî©i⁄
(
d©a_ch™√l
 
dac_ch™√l
);

405 
dac_£t_wavef‹m_ch¨a˘îi°ics
(
uöt32_t
 
dac_mamp
);

406 
dac_lﬂd_d©a_buf„r_sögÀ
(
uöt16_t
 
dac_d©a
, 
d©a_Æign
 
dac_d©a_f‹m©
,

407 
d©a_ch™√l
 
dac_ch™√l
);

408 
dac_lﬂd_d©a_buf„r_duÆ
(
uöt16_t
 
dac_d©a1
, uöt16_à
dac_d©a2
,

409 
d©a_Æign
 
dac_d©a_f‹m©
);

410 
dac_so·w¨e_åiggî
(
d©a_ch™√l
 
dac_ch™√l
);

412 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\DMA_CO~1.H

37 #ifde‡
LIBOPENCM3_DMA_H


39 #i‚de‡
LIBOPENCM3_DMA_COMMON_F13_H


40 
	#LIBOPENCM3_DMA_COMMON_F13_H


	)

45 
	#DMA1
 
DMA1_BASE


	)

46 
	#DMA2
 
DMA2_BASE


	)

51 
	#DMA_ISR
(
dma_ba£
Ë
	`MMIO32
((dma_ba£Ë+ 0x00)

	)

52 
	#DMA1_ISR
 
	`DMA_ISR
(
DMA1
)

	)

53 
	#DMA2_ISR
 
	`DMA_ISR
(
DMA2
)

	)

56 
	#DMA_IFCR
(
dma_ba£
Ë
	`MMIO32
((dma_ba£Ë+ 0x04)

	)

57 
	#DMA1_IFCR
 
	`DMA_IFCR
(
DMA1
)

	)

58 
	#DMA2_IFCR
 
	`DMA_IFCR
(
DMA2
)

	)

61 
	#DMA_CCR
(
dma_ba£
, 
ch™√l
Ë
	`MMIO32
((dma_base) + 0x08 + \

62 (0x14 * ((
ch™√l
Ë- 1)))

	)

64 
	#DMA1_CCR
(
ch™√l
Ë
	`DMA_CCR
(
DMA1
, ch™√l)

	)

65 
	#DMA1_CCR1
 
	`DMA1_CCR
(
DMA_CHANNEL1
)

	)

66 
	#DMA1_CCR2
 
	`DMA1_CCR
(
DMA_CHANNEL2
)

	)

67 
	#DMA1_CCR3
 
	`DMA1_CCR
(
DMA_CHANNEL3
)

	)

68 
	#DMA1_CCR4
 
	`DMA1_CCR
(
DMA_CHANNEL4
)

	)

69 
	#DMA1_CCR5
 
	`DMA1_CCR
(
DMA_CHANNEL5
)

	)

70 
	#DMA1_CCR6
 
	`DMA1_CCR
(
DMA_CHANNEL6
)

	)

71 
	#DMA1_CCR7
 
	`DMA1_CCR
(
DMA_CHANNEL7
)

	)

73 
	#DMA2_CCR
(
ch™√l
Ë
	`DMA_CCR
(
DMA2
, ch™√l)

	)

74 
	#DMA2_CCR1
 
	`DMA2_CCR
(
DMA_CHANNEL1
)

	)

75 
	#DMA2_CCR2
 
	`DMA2_CCR
(
DMA_CHANNEL2
)

	)

76 
	#DMA2_CCR3
 
	`DMA2_CCR
(
DMA_CHANNEL3
)

	)

77 
	#DMA2_CCR4
 
	`DMA2_CCR
(
DMA_CHANNEL4
)

	)

78 
	#DMA2_CCR5
 
	`DMA2_CCR
(
DMA_CHANNEL5
)

	)

81 
	#DMA_CNDTR
(
dma_ba£
, 
ch™√l
Ë
	`MMIO32
((dma_base) + 0x0C + \

82 (0x14 * ((
ch™√l
Ë- 1)))

	)

84 
	#DMA1_CNDTR
(
ch™√l
Ë
	`DMA_CNDTR
(
DMA1
, ch™√l)

	)

85 
	#DMA1_CNDTR1
 
	`DMA1_CNDTR
(
DMA_CHANNEL1
)

	)

86 
	#DMA1_CNDTR2
 
	`DMA1_CNDTR
(
DMA_CHANNEL2
)

	)

87 
	#DMA1_CNDTR3
 
	`DMA1_CNDTR
(
DMA_CHANNEL3
)

	)

88 
	#DMA1_CNDTR4
 
	`DMA1_CNDTR
(
DMA_CHANNEL4
)

	)

89 
	#DMA1_CNDTR5
 
	`DMA1_CNDTR
(
DMA_CHANNEL5
)

	)

90 
	#DMA1_CNDTR6
 
	`DMA1_CNDTR
(
DMA_CHANNEL6
)

	)

91 
	#DMA1_CNDTR7
 
	`DMA1_CNDTR
(
DMA_CHANNEL7
)

	)

93 
	#DMA2_CNDTR
(
ch™√l
Ë
	`DMA_CNDTR
(
DMA2
, ch™√l)

	)

94 
	#DMA2_CNDTR1
 
	`DMA2_CNDTR
(
DMA_CHANNEL1
)

	)

95 
	#DMA2_CNDTR2
 
	`DMA2_CNDTR
(
DMA_CHANNEL2
)

	)

96 
	#DMA2_CNDTR3
 
	`DMA2_CNDTR
(
DMA_CHANNEL3
)

	)

97 
	#DMA2_CNDTR4
 
	`DMA2_CNDTR
(
DMA_CHANNEL4
)

	)

98 
	#DMA2_CNDTR5
 
	`DMA2_CNDTR
(
DMA_CHANNEL5
)

	)

101 
	#DMA_CPAR
(
dma_ba£
, 
ch™√l
Ë
	`MMIO32
((dma_base) + 0x10 + \

102 (0x14 * ((
ch™√l
Ë- 1)))

	)

104 
	#DMA1_CPAR
(
ch™√l
Ë
	`DMA_CPAR
(
DMA1
, ch™√l)

	)

105 
	#DMA1_CPAR1
 
	`DMA1_CPAR
(
DMA_CHANNEL1
)

	)

106 
	#DMA1_CPAR2
 
	`DMA1_CPAR
(
DMA_CHANNEL2
)

	)

107 
	#DMA1_CPAR3
 
	`DMA1_CPAR
(
DMA_CHANNEL3
)

	)

108 
	#DMA1_CPAR4
 
	`DMA1_CPAR
(
DMA_CHANNEL4
)

	)

109 
	#DMA1_CPAR5
 
	`DMA1_CPAR
(
DMA_CHANNEL5
)

	)

110 
	#DMA1_CPAR6
 
	`DMA1_CPAR
(
DMA_CHANNEL6
)

	)

111 
	#DMA1_CPAR7
 
	`DMA1_CPAR
(
DMA_CHANNEL7
)

	)

113 
	#DMA2_CPAR
(
ch™√l
Ë
	`DMA_CPAR
(
DMA2
, ch™√l)

	)

114 
	#DMA2_CPAR1
 
	`DMA2_CPAR
(
DMA_CHANNEL1
)

	)

115 
	#DMA2_CPAR2
 
	`DMA2_CPAR
(
DMA_CHANNEL2
)

	)

116 
	#DMA2_CPAR3
 
	`DMA2_CPAR
(
DMA_CHANNEL3
)

	)

117 
	#DMA2_CPAR4
 
	`DMA2_CPAR
(
DMA_CHANNEL4
)

	)

118 
	#DMA2_CPAR5
 
	`DMA2_CPAR
(
DMA_CHANNEL5
)

	)

122 
	#DMA_CMAR
(
dma_ba£
, 
ch™√l
Ë
	`MMIO32
((dma_base) + 0x14 + \

123 (0x14 * ((
ch™√l
Ë- 1)))

	)

125 
	#DMA1_CMAR
(
ch™√l
Ë
	`DMA_CMAR
(
DMA1
, ch™√l)

	)

126 
	#DMA1_CMAR1
 
	`DMA1_CMAR
(
DMA_CHANNEL1
)

	)

127 
	#DMA1_CMAR2
 
	`DMA1_CMAR
(
DMA_CHANNEL2
)

	)

128 
	#DMA1_CMAR3
 
	`DMA1_CMAR
(
DMA_CHANNEL3
)

	)

129 
	#DMA1_CMAR4
 
	`DMA1_CMAR
(
DMA_CHANNEL4
)

	)

130 
	#DMA1_CMAR5
 
	`DMA1_CMAR
(
DMA_CHANNEL5
)

	)

131 
	#DMA1_CMAR6
 
	`DMA1_CMAR
(
DMA_CHANNEL6
)

	)

132 
	#DMA1_CMAR7
 
	`DMA1_CMAR
(
DMA_CHANNEL7
)

	)

134 
	#DMA2_CMAR
(
ch™√l
Ë
	`DMA_CMAR
(
DMA2
, ch™√l)

	)

135 
	#DMA2_CMAR1
 
	`DMA2_CMAR
(
DMA_CHANNEL1
)

	)

136 
	#DMA2_CMAR2
 
	`DMA2_CMAR
(
DMA_CHANNEL2
)

	)

137 
	#DMA2_CMAR3
 
	`DMA2_CMAR
(
DMA_CHANNEL3
)

	)

138 
	#DMA2_CMAR4
 
	`DMA2_CMAR
(
DMA_CHANNEL4
)

	)

139 
	#DMA2_CMAR5
 
	`DMA2_CMAR
(
DMA_CHANNEL5
)

	)

153 
	#DMA_TEIF
 (1 << 3)

	)

155 
	#DMA_HTIF
 (1 << 2)

	)

157 
	#DMA_TCIF
 (1 << 1)

	)

159 
	#DMA_GIF
 (1 << 0)

	)

165 
	#DMA_FLAG_OFFSET
(
ch™√l
Ë(4*((ch™√lË- 1))

	)

166 
	#DMA_FLAGS
 (
DMA_TEIF
 | 
DMA_TCIF
 | 
DMA_HTIF
 | \

167 
DMA_GIF
)

	)

168 
	#DMA_ISR_MASK
(
ch™√l
Ë(
DMA_FLAGS
 << 
	`DMA_FLAG_OFFSET
(ch™√l))

	)

171 
	#DMA_ISR_TEIF_BIT
 
DMA_TEIF


	)

172 
	#DMA_ISR_TEIF
(
ch™√l
Ë(
DMA_ISR_TEIF_BIT
 << \

173 (
	`DMA_FLAG_OFFSET
(
ch™√l
)))

	)

175 
	#DMA_ISR_TEIF1
 
	`DMA_ISR_TEIF
(
DMA_CHANNEL1
)

	)

176 
	#DMA_ISR_TEIF2
 
	`DMA_ISR_TEIF
(
DMA_CHANNEL2
)

	)

177 
	#DMA_ISR_TEIF3
 
	`DMA_ISR_TEIF
(
DMA_CHANNEL3
)

	)

178 
	#DMA_ISR_TEIF4
 
	`DMA_ISR_TEIF
(
DMA_CHANNEL4
)

	)

179 
	#DMA_ISR_TEIF5
 
	`DMA_ISR_TEIF
(
DMA_CHANNEL5
)

	)

180 
	#DMA_ISR_TEIF6
 
	`DMA_ISR_TEIF
(
DMA_CHANNEL6
)

	)

181 
	#DMA_ISR_TEIF7
 
	`DMA_ISR_TEIF
(
DMA_CHANNEL7
)

	)

184 
	#DMA_ISR_HTIF_BIT
 
DMA_HTIF


	)

185 
	#DMA_ISR_HTIF
(
ch™√l
Ë(
DMA_ISR_HTIF_BIT
 << \

186 (
	`DMA_FLAG_OFFSET
(
ch™√l
)))

	)

188 
	#DMA_ISR_HTIF1
 
	`DMA_ISR_HTIF
(
DMA_CHANNEL1
)

	)

189 
	#DMA_ISR_HTIF2
 
	`DMA_ISR_HTIF
(
DMA_CHANNEL2
)

	)

190 
	#DMA_ISR_HTIF3
 
	`DMA_ISR_HTIF
(
DMA_CHANNEL3
)

	)

191 
	#DMA_ISR_HTIF4
 
	`DMA_ISR_HTIF
(
DMA_CHANNEL4
)

	)

192 
	#DMA_ISR_HTIF5
 
	`DMA_ISR_HTIF
(
DMA_CHANNEL5
)

	)

193 
	#DMA_ISR_HTIF6
 
	`DMA_ISR_HTIF
(
DMA_CHANNEL6
)

	)

194 
	#DMA_ISR_HTIF7
 
	`DMA_ISR_HTIF
(
DMA_CHANNEL7
)

	)

197 
	#DMA_ISR_TCIF_BIT
 
DMA_TCIF


	)

198 
	#DMA_ISR_TCIF
(
ch™√l
Ë(
DMA_ISR_TCIF_BIT
 << \

199 (
	`DMA_FLAG_OFFSET
(
ch™√l
)))

	)

201 
	#DMA_ISR_TCIF1
 
	`DMA_ISR_TCIF
(
DMA_CHANNEL1
)

	)

202 
	#DMA_ISR_TCIF2
 
	`DMA_ISR_TCIF
(
DMA_CHANNEL2
)

	)

203 
	#DMA_ISR_TCIF3
 
	`DMA_ISR_TCIF
(
DMA_CHANNEL3
)

	)

204 
	#DMA_ISR_TCIF4
 
	`DMA_ISR_TCIF
(
DMA_CHANNEL4
)

	)

205 
	#DMA_ISR_TCIF5
 
	`DMA_ISR_TCIF
(
DMA_CHANNEL5
)

	)

206 
	#DMA_ISR_TCIF6
 
	`DMA_ISR_TCIF
(
DMA_CHANNEL6
)

	)

207 
	#DMA_ISR_TCIF7
 
	`DMA_ISR_TCIF
(
DMA_CHANNEL7
)

	)

210 
	#DMA_ISR_GIF_BIT
 
DMA_GIF


	)

211 
	#DMA_ISR_GIF
(
ch™√l
Ë(
DMA_ISR_GIF_BIT
 << \

212 (
	`DMA_FLAG_OFFSET
(
ch™√l
)))

	)

214 
	#DMA_ISR_GIF1
 
	`DMA_ISR_GIF
(
DMA_CHANNEL1
)

	)

215 
	#DMA_ISR_GIF2
 
	`DMA_ISR_GIF
(
DMA_CHANNEL2
)

	)

216 
	#DMA_ISR_GIF3
 
	`DMA_ISR_GIF
(
DMA_CHANNEL3
)

	)

217 
	#DMA_ISR_GIF4
 
	`DMA_ISR_GIF
(
DMA_CHANNEL4
)

	)

218 
	#DMA_ISR_GIF5
 
	`DMA_ISR_GIF
(
DMA_CHANNEL5
)

	)

219 
	#DMA_ISR_GIF6
 
	`DMA_ISR_GIF
(
DMA_CHANNEL6
)

	)

220 
	#DMA_ISR_GIF7
 
	`DMA_ISR_GIF
(
DMA_CHANNEL7
)

	)

225 
	#DMA_IFCR_CTEIF_BIT
 
DMA_TEIF


	)

226 
	#DMA_IFCR_CTEIF
(
ch™√l
Ë(
DMA_IFCR_CTEIF_BIT
 << \

227 (
	`DMA_FLAG_OFFSET
(
ch™√l
)))

	)

229 
	#DMA_IFCR_CTEIF1
 
	`DMA_IFCR_CTEIF
(
DMA_CHANNEL1
)

	)

230 
	#DMA_IFCR_CTEIF2
 
	`DMA_IFCR_CTEIF
(
DMA_CHANNEL2
)

	)

231 
	#DMA_IFCR_CTEIF3
 
	`DMA_IFCR_CTEIF
(
DMA_CHANNEL3
)

	)

232 
	#DMA_IFCR_CTEIF4
 
	`DMA_IFCR_CTEIF
(
DMA_CHANNEL4
)

	)

233 
	#DMA_IFCR_CTEIF5
 
	`DMA_IFCR_CTEIF
(
DMA_CHANNEL5
)

	)

234 
	#DMA_IFCR_CTEIF6
 
	`DMA_IFCR_CTEIF
(
DMA_CHANNEL6
)

	)

235 
	#DMA_IFCR_CTEIF7
 
	`DMA_IFCR_CTEIF
(
DMA_CHANNEL7
)

	)

238 
	#DMA_IFCR_CHTIF_BIT
 
DMA_HTIF


	)

239 
	#DMA_IFCR_CHTIF
(
ch™√l
Ë(
DMA_IFCR_CHTIF_BIT
 << \

240 (
	`DMA_FLAG_OFFSET
(
ch™√l
)))

	)

242 
	#DMA_IFCR_CHTIF1
 
	`DMA_IFCR_CHTIF
(
DMA_CHANNEL1
)

	)

243 
	#DMA_IFCR_CHTIF2
 
	`DMA_IFCR_CHTIF
(
DMA_CHANNEL2
)

	)

244 
	#DMA_IFCR_CHTIF3
 
	`DMA_IFCR_CHTIF
(
DMA_CHANNEL3
)

	)

245 
	#DMA_IFCR_CHTIF4
 
	`DMA_IFCR_CHTIF
(
DMA_CHANNEL4
)

	)

246 
	#DMA_IFCR_CHTIF5
 
	`DMA_IFCR_CHTIF
(
DMA_CHANNEL5
)

	)

247 
	#DMA_IFCR_CHTIF6
 
	`DMA_IFCR_CHTIF
(
DMA_CHANNEL6
)

	)

248 
	#DMA_IFCR_CHTIF7
 
	`DMA_IFCR_CHTIF
(
DMA_CHANNEL7
)

	)

251 
	#DMA_IFCR_CTCIF_BIT
 
DMA_TCIF


	)

252 
	#DMA_IFCR_CTCIF
(
ch™√l
Ë(
DMA_IFCR_CTCIF_BIT
 << \

253 (
	`DMA_FLAG_OFFSET
(
ch™√l
)))

	)

255 
	#DMA_IFCR_CTCIF1
 
	`DMA_IFCR_CTCIF
(
DMA_CHANNEL1
)

	)

256 
	#DMA_IFCR_CTCIF2
 
	`DMA_IFCR_CTCIF
(
DMA_CHANNEL2
)

	)

257 
	#DMA_IFCR_CTCIF3
 
	`DMA_IFCR_CTCIF
(
DMA_CHANNEL3
)

	)

258 
	#DMA_IFCR_CTCIF4
 
	`DMA_IFCR_CTCIF
(
DMA_CHANNEL4
)

	)

259 
	#DMA_IFCR_CTCIF5
 
	`DMA_IFCR_CTCIF
(
DMA_CHANNEL5
)

	)

260 
	#DMA_IFCR_CTCIF6
 
	`DMA_IFCR_CTCIF
(
DMA_CHANNEL6
)

	)

261 
	#DMA_IFCR_CTCIF7
 
	`DMA_IFCR_CTCIF
(
DMA_CHANNEL7
)

	)

264 
	#DMA_IFCR_CGIF_BIT
 
DMA_GIF


	)

265 
	#DMA_IFCR_CGIF
(
ch™√l
Ë(
DMA_IFCR_CGIF_BIT
 << \

266 (
	`DMA_FLAG_OFFSET
(
ch™√l
)))

	)

268 
	#DMA_IFCR_CGIF1
 
	`DMA_IFCR_CGIF
(
DMA_CHANNEL1
)

	)

269 
	#DMA_IFCR_CGIF2
 
	`DMA_IFCR_CGIF
(
DMA_CHANNEL2
)

	)

270 
	#DMA_IFCR_CGIF3
 
	`DMA_IFCR_CGIF
(
DMA_CHANNEL3
)

	)

271 
	#DMA_IFCR_CGIF4
 
	`DMA_IFCR_CGIF
(
DMA_CHANNEL4
)

	)

272 
	#DMA_IFCR_CGIF5
 
	`DMA_IFCR_CGIF
(
DMA_CHANNEL5
)

	)

273 
	#DMA_IFCR_CGIF6
 
	`DMA_IFCR_CGIF
(
DMA_CHANNEL6
)

	)

274 
	#DMA_IFCR_CGIF7
 
	`DMA_IFCR_CGIF
(
DMA_CHANNEL7
)

	)

277 
	#DMA_IFCR_CIF_BIT
 0xF

	)

278 
	#DMA_IFCR_CIF
(
ch™√l
Ë(
DMA_IFCR_CIF_BIT
 << \

279 (
	`DMA_FLAG_OFFSET
(
ch™√l
)))

	)

281 
	#DMA_IFCR_CIF1
 
	`DMA_IFCR_CIF
(
DMA_CHANNEL1
)

	)

282 
	#DMA_IFCR_CIF2
 
	`DMA_IFCR_CIF
(
DMA_CHANNEL2
)

	)

283 
	#DMA_IFCR_CIF3
 
	`DMA_IFCR_CIF
(
DMA_CHANNEL3
)

	)

284 
	#DMA_IFCR_CIF4
 
	`DMA_IFCR_CIF
(
DMA_CHANNEL4
)

	)

285 
	#DMA_IFCR_CIF5
 
	`DMA_IFCR_CIF
(
DMA_CHANNEL5
)

	)

286 
	#DMA_IFCR_CIF6
 
	`DMA_IFCR_CIF
(
DMA_CHANNEL6
)

	)

287 
	#DMA_IFCR_CIF7
 
	`DMA_IFCR_CIF
(
DMA_CHANNEL7
)

	)

292 
	#DMA_CCR_MEM2MEM
 (1 << 14)

	)

299 
	#DMA_CCR_PL_LOW
 (0x0 << 12)

	)

300 
	#DMA_CCR_PL_MEDIUM
 (0x1 << 12)

	)

301 
	#DMA_CCR_PL_HIGH
 (0x2 << 12)

	)

302 
	#DMA_CCR_PL_VERY_HIGH
 (0x3 << 12)

	)

304 
	#DMA_CCR_PL_MASK
 (0x3 << 12)

	)

305 
	#DMA_CCR_PL_SHIFT
 12

	)

312 
	#DMA_CCR_MSIZE_8BIT
 (0x0 << 10)

	)

313 
	#DMA_CCR_MSIZE_16BIT
 (0x1 << 10)

	)

314 
	#DMA_CCR_MSIZE_32BIT
 (0x2 << 10)

	)

316 
	#DMA_CCR_MSIZE_MASK
 (0x3 << 10)

	)

317 
	#DMA_CCR_MSIZE_SHIFT
 10

	)

324 
	#DMA_CCR_PSIZE_8BIT
 (0x0 << 8)

	)

325 
	#DMA_CCR_PSIZE_16BIT
 (0x1 << 8)

	)

326 
	#DMA_CCR_PSIZE_32BIT
 (0x2 << 8)

	)

328 
	#DMA_CCR_PSIZE_MASK
 (0x3 << 8)

	)

329 
	#DMA_CCR_PSIZE_SHIFT
 8

	)

332 
	#DMA_CCR_MINC
 (1 << 7)

	)

335 
	#DMA_CCR_PINC
 (1 << 6)

	)

338 
	#DMA_CCR_CIRC
 (1 << 5)

	)

341 
	#DMA_CCR_DIR
 (1 << 4)

	)

344 
	#DMA_CCR_TEIE
 (1 << 3)

	)

347 
	#DMA_CCR_HTIE
 (1 << 2)

	)

350 
	#DMA_CCR_TCIE
 (1 << 1)

	)

353 
	#DMA_CCR_EN
 (1 << 0)

	)

373 
	#DMA_CHANNEL1
 1

	)

374 
	#DMA_CHANNEL2
 2

	)

375 
	#DMA_CHANNEL3
 3

	)

376 
	#DMA_CHANNEL4
 4

	)

377 
	#DMA_CHANNEL5
 5

	)

378 
	#DMA_CHANNEL6
 6

	)

379 
	#DMA_CHANNEL7
 7

	)

384 
BEGIN_DECLS


386 
dma_ch™√l_ª£t
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

387 
dma_˛ór_öãºu±_Êags
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
,

388 
uöt32_t
 
öãºu±s
);

389 
boﬁ
 
dma_gë_öãºu±_Êag
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
, uöt32_à
öãºu±s
);

390 
dma_íabÀ_mem2mem_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

391 
dma_£t_¥i‹ôy
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
, uöt32_à
¥io
);

392 
dma_£t_mem‹y_size
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
, uöt32_à
mem_size
);

393 
dma_£t_≥rùhîÆ_size
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
,

394 
uöt32_t
 
≥rùhîÆ_size
);

395 
dma_íabÀ_mem‹y_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

396 
dma_dißbÀ_mem‹y_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

397 
dma_íabÀ_≥rùhîÆ_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

398 
dma_dißbÀ_≥rùhîÆ_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

399 
dma_íabÀ_cúcuœr_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

400 
dma_£t_ªad_‰om_≥rùhîÆ
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

401 
dma_£t_ªad_‰om_mem‹y
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

402 
dma_íabÀ_å™s„r_îr‹_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

403 
dma_dißbÀ_å™s„r_îr‹_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

404 
dma_íabÀ_hÆf_å™s„r_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

405 
dma_dißbÀ_hÆf_å™s„r_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

406 
dma_íabÀ_å™s„r_com∂ëe_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

407 
dma_dißbÀ_å™s„r_com∂ëe_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

408 
dma_íabÀ_ch™√l
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

409 
dma_dißbÀ_ch™√l
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

410 
dma_£t_≥rùhîÆ_addªss
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
,

411 
uöt32_t
 
addªss
);

412 
dma_£t_mem‹y_addªss
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
, uöt32_à
addªss
);

413 
dma_£t_numbî_of_d©a
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
, 
uöt16_t
 
numbî
);

415 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\EXTI_C~1.H

26 #i‡
deföed
(
LIBOPENCM3_EXTI_H
)

28 #i‚de‡
LIBOPENCM3_EXTI_COMMON_ALL_H


29 
	#LIBOPENCM3_EXTI_COMMON_ALL_H


	)

34 
	#EXTI_IMR
 
	`MMIO32
(
EXTI_BASE
 + 0x00)

	)

35 
	#EXTI_EMR
 
	`MMIO32
(
EXTI_BASE
 + 0x04)

	)

36 
	#EXTI_RTSR
 
	`MMIO32
(
EXTI_BASE
 + 0x08)

	)

37 
	#EXTI_FTSR
 
	`MMIO32
(
EXTI_BASE
 + 0x0c)

	)

38 
	#EXTI_SWIER
 
	`MMIO32
(
EXTI_BASE
 + 0x10)

	)

39 
	#EXTI_PR
 
	`MMIO32
(
EXTI_BASE
 + 0x14)

	)

42 
	#EXTI0
 (1 << 0)

	)

43 
	#EXTI1
 (1 << 1)

	)

44 
	#EXTI2
 (1 << 2)

	)

45 
	#EXTI3
 (1 << 3)

	)

46 
	#EXTI4
 (1 << 4)

	)

47 
	#EXTI5
 (1 << 5)

	)

48 
	#EXTI6
 (1 << 6)

	)

49 
	#EXTI7
 (1 << 7)

	)

50 
	#EXTI8
 (1 << 8)

	)

51 
	#EXTI9
 (1 << 9)

	)

52 
	#EXTI10
 (1 << 10)

	)

53 
	#EXTI11
 (1 << 11)

	)

54 
	#EXTI12
 (1 << 12)

	)

55 
	#EXTI13
 (1 << 13)

	)

56 
	#EXTI14
 (1 << 14)

	)

57 
	#EXTI15
 (1 << 15)

	)

58 
	#EXTI16
 (1 << 16)

	)

59 
	#EXTI17
 (1 << 17)

	)

60 
	#EXTI18
 (1 << 18)

	)

61 
	#EXTI19
 (1 << 19)

	)

62 
	#EXTI20
 (1 << 20)

	)

63 
	#EXTI21
 (1 << 21)

	)

64 
	#EXTI22
 (1 << 22)

	)

65 
	#EXTI23
 (1 << 23)

	)

66 
	#EXTI24
 (1 << 24)

	)

67 
	#EXTI25
 (1 << 25)

	)

68 
	#EXTI26
 (1 << 26)

	)

69 
	#EXTI27
 (1 << 27)

	)

70 
	#EXTI28
 (1 << 28)

	)

71 
	#EXTI29
 (1 << 29)

	)

72 
	#EXTI30
 (1 << 30)

	)

73 
	#EXTI31
 (1 << 31)

	)

75 
	#EXTI32
 (1 << 0)

	)

76 
	#EXTI33
 (1 << 1)

	)

77 
	#EXTI34
 (1 << 2)

	)

78 
	#EXTI35
 (1 << 3)

	)

79 
	#EXTI36
 (1 << 4)

	)

80 
	#EXTI37
 (1 << 5)

	)

83 
	eexti_åiggî_ty≥
 {

84 
	mEXTI_TRIGGER_RISING
,

85 
	mEXTI_TRIGGER_FALLING
,

86 
	mEXTI_TRIGGER_BOTH
,

89 
BEGIN_DECLS


91 
exti_£t_åiggî
(
uöt32_t
 
extis
, 
exti_åiggî_ty≥
 
åig
);

92 
exti_íabÀ_ªque°
(
uöt32_t
 
extis
);

93 
exti_dißbÀ_ªque°
(
uöt32_t
 
extis
);

94 
exti_ª£t_ªque°
(
uöt32_t
 
extis
);

95 
exti_£À˘_sour˚
(
uöt32_t
 
exti
, uöt32_à
gpi›‹t
);

96 
uöt32_t
 
exti_gë_Êag_°©us
(uöt32_à
exti
);

98 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\FLASH_~1.H

32 #ifde‡
LIBOPENCM3_FLASH_H


34 #i‚de‡
LIBOPENCM3_FLASH_COMMON_F01_H


35 
	#LIBOPENCM3_FLASH_COMMON_F01_H


	)

40 
	#FLASH_ACR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x00)

	)

41 
	#FLASH_KEYR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x04)

	)

42 
	#FLASH_OPTKEYR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x08)

	)

43 
	#FLASH_SR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x0C)

	)

44 
	#FLASH_CR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x10)

	)

45 
	#FLASH_AR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x14)

	)

46 
	#FLASH_OBR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x1C)

	)

47 
	#FLASH_WRPR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x20)

	)

49 
	#FLASH_KEYR2
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x44)

	)

50 
	#FLASH_SR2
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x4C)

	)

51 
	#FLASH_CR2
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x50)

	)

52 
	#FLASH_AR2
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x54)

	)

56 
	#FLASH_OPTION_BYTE
(
i
Ë
	`MMIO16
(
INFO_BASE
+0x0800 + (i)*2)

	)

60 
	#FLASH_ACR_LATENCY_SHIFT
 0

	)

61 
	#FLASH_ACR_LATENCY
 7

	)

63 
	#FLASH_ACR_PRFTBS
 (1 << 5)

	)

64 
	#FLASH_ACR_PRFTBE
 (1 << 4)

	)

68 
	#FLASH_SR_EOP
 (1 << 5)

	)

69 
	#FLASH_SR_WRPRTERR
 (1 << 4)

	)

70 
	#FLASH_SR_PGERR
 (1 << 2)

	)

71 
	#FLASH_SR_BSY
 (1 << 0)

	)

75 
	#FLASH_CR_EOPIE
 (1 << 12)

	)

76 
	#FLASH_CR_ERRIE
 (1 << 10)

	)

77 
	#FLASH_CR_OPTWRE
 (1 << 9)

	)

78 
	#FLASH_CR_LOCK
 (1 << 7)

	)

79 
	#FLASH_CR_STRT
 (1 << 6)

	)

80 
	#FLASH_CR_OPTER
 (1 << 5)

	)

81 
	#FLASH_CR_OPTPG
 (1 << 4)

	)

82 
	#FLASH_CR_MER
 (1 << 2)

	)

83 
	#FLASH_CR_PER
 (1 << 1)

	)

84 
	#FLASH_CR_PG
 (1 << 0)

	)

88 
	#FLASH_OBR_RDPRT_SHIFT
 1

	)

89 
	#FLASH_OBR_OPTERR
 (1 << 0)

	)

93 
	#FLASH_KEYR_KEY1
 ((
uöt32_t
)0x45670123)

	)

94 
	#FLASH_KEYR_KEY2
 ((
uöt32_t
)0xcdef89ab)

	)

98 
BEGIN_DECLS


100 
Êash_£t_ws
(
uöt32_t
 
ws
);

101 
Êash_¥e„tch_buf„r_íabÀ
();

102 
Êash_¥e„tch_buf„r_dißbÀ
();

103 
Êash_u∆ock
();

104 
Êash_lock
();

105 
Êash_˛ór_pgîr_Êag
();

106 
Êash_˛ór_e›_Êag
();

107 
Êash_˛ór_wΩπîr_Êag
();

108 
Êash_˛ór_bsy_Êag
();

109 
Êash_˛ór_°©us_Êags
();

110 
uöt32_t
 
Êash_gë_°©us_Êags
();

111 
Êash_waô_f‹_œ°_›î©i⁄
();

112 
Êash_¥ogøm_w‹d
(
uöt32_t
 
addªss
, uöt32_à
d©a
);

113 
Êash_¥ogøm_hÆf_w‹d
(
uöt32_t
 
addªss
, 
uöt16_t
 
d©a
);

114 
Êash_îa£_∑ge
(
uöt32_t
 
∑ge_addªss
);

115 
Êash_îa£_Æl_∑ges
();

116 
Êash_u∆ock_›ti⁄_byãs
();

117 
Êash_îa£_›ti⁄_byãs
();

118 
Êash_¥ogøm_›ti⁄_byãs
(
uöt32_t
 
addªss
, 
uöt16_t
 
d©a
);

120 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\GPIO_C~1.H

34 #i‡
deföed
(
LIBOPENCM3_GPIO_H
)

36 #i‚de‡
LIBOPENCM3_GPIO_COMMON_ALL_H


37 
	#LIBOPENCM3_GPIO_COMMON_ALL_H


	)

45 
	#GPIO_LCKK
 (1 << 16)

	)

53 
	#GPIO0
 (1 << 0)

	)

54 
	#GPIO1
 (1 << 1)

	)

55 
	#GPIO2
 (1 << 2)

	)

56 
	#GPIO3
 (1 << 3)

	)

57 
	#GPIO4
 (1 << 4)

	)

58 
	#GPIO5
 (1 << 5)

	)

59 
	#GPIO6
 (1 << 6)

	)

60 
	#GPIO7
 (1 << 7)

	)

61 
	#GPIO8
 (1 << 8)

	)

62 
	#GPIO9
 (1 << 9)

	)

63 
	#GPIO10
 (1 << 10)

	)

64 
	#GPIO11
 (1 << 11)

	)

65 
	#GPIO12
 (1 << 12)

	)

66 
	#GPIO13
 (1 << 13)

	)

67 
	#GPIO14
 (1 << 14)

	)

68 
	#GPIO15
 (1 << 15)

	)

69 
	#GPIO_ALL
 0xffff

	)

72 
BEGIN_DECLS


74 
gpio_£t
(
uöt32_t
 
gpi›‹t
, 
uöt16_t
 
gpios
);

75 
gpio_˛ór
(
uöt32_t
 
gpi›‹t
, 
uöt16_t
 
gpios
);

76 
uöt16_t
 
gpio_gë
(
uöt32_t
 
gpi›‹t
, uöt16_à
gpios
);

77 
gpio_toggÀ
(
uöt32_t
 
gpi›‹t
, 
uöt16_t
 
gpios
);

78 
uöt16_t
 
gpio_p‹t_ªad
(
uöt32_t
 
gpi›‹t
);

79 
gpio_p‹t_wrôe
(
uöt32_t
 
gpi›‹t
, 
uöt16_t
 
d©a
);

80 
gpio_p‹t_c⁄fig_lock
(
uöt32_t
 
gpi›‹t
, 
uöt16_t
 
gpios
);

82 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\I2C_CO~1.H

30 #i‡
deföed
(
LIBOPENCM3_I2C_H
)

32 #i‚de‡
LIBOPENCM3_I2C_COMMON_ALL_H


33 
	#LIBOPENCM3_I2C_COMMON_ALL_H


	)

45 
	#I2C1
 
I2C1_BASE


	)

46 
	#I2C2
 
I2C2_BASE


	)

52 
	#I2C_CR1
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x00)

	)

53 
	#I2C1_CR1
 
	`I2C_CR1
(
I2C1
)

	)

54 
	#I2C2_CR1
 
	`I2C_CR1
(
I2C2
)

	)

57 
	#I2C_CR2
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x04)

	)

58 
	#I2C1_CR2
 
	`I2C_CR2
(
I2C1
)

	)

59 
	#I2C2_CR2
 
	`I2C_CR2
(
I2C2
)

	)

62 
	#I2C_OAR1
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x08)

	)

63 
	#I2C1_OAR1
 
	`I2C_OAR1
(
I2C1
)

	)

64 
	#I2C2_OAR1
 
	`I2C_OAR1
(
I2C2
)

	)

67 
	#I2C_OAR2
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x0c)

	)

68 
	#I2C1_OAR2
 
	`I2C_OAR2
(
I2C1
)

	)

69 
	#I2C2_OAR2
 
	`I2C_OAR2
(
I2C2
)

	)

72 
	#I2C_DR
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x10)

	)

73 
	#I2C1_DR
 
	`I2C_DR
(
I2C1
)

	)

74 
	#I2C2_DR
 
	`I2C_DR
(
I2C2
)

	)

77 
	#I2C_SR1
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x14)

	)

78 
	#I2C1_SR1
 
	`I2C_SR1
(
I2C1
)

	)

79 
	#I2C2_SR1
 
	`I2C_SR1
(
I2C2
)

	)

82 
	#I2C_SR2
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x18)

	)

83 
	#I2C1_SR2
 
	`I2C_SR2
(
I2C1
)

	)

84 
	#I2C2_SR2
 
	`I2C_SR2
(
I2C2
)

	)

87 
	#I2C_CCR
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x1c)

	)

88 
	#I2C1_CCR
 
	`I2C_CCR
(
I2C1
)

	)

89 
	#I2C2_CCR
 
	`I2C_CCR
(
I2C2
)

	)

92 
	#I2C_TRISE
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x20)

	)

93 
	#I2C1_TRISE
 
	`I2C_TRISE
(
I2C1
)

	)

94 
	#I2C2_TRISE
 
	`I2C_TRISE
(
I2C2
)

	)

99 
	#I2C_CR1_SWRST
 (1 << 15)

	)

104 
	#I2C_CR1_ALERT
 (1 << 13)

	)

107 
	#I2C_CR1_PEC
 (1 << 12)

	)

110 
	#I2C_CR1_POS
 (1 << 11)

	)

113 
	#I2C_CR1_ACK
 (1 << 10)

	)

116 
	#I2C_CR1_STOP
 (1 << 9)

	)

119 
	#I2C_CR1_START
 (1 << 8)

	)

122 
	#I2C_CR1_NOSTRETCH
 (1 << 7)

	)

125 
	#I2C_CR1_ENGC
 (1 << 6)

	)

128 
	#I2C_CR1_ENPEC
 (1 << 5)

	)

131 
	#I2C_CR1_ENARP
 (1 << 4)

	)

134 
	#I2C_CR1_SMBTYPE
 (1 << 3)

	)

139 
	#I2C_CR1_SMBUS
 (1 << 1)

	)

142 
	#I2C_CR1_PE
 (1 << 0)

	)

149 
	#I2C_CR2_LAST
 (1 << 12)

	)

152 
	#I2C_CR2_DMAEN
 (1 << 11)

	)

155 
	#I2C_CR2_ITBUFEN
 (1 << 10)

	)

158 
	#I2C_CR2_ITEVTEN
 (1 << 9)

	)

161 
	#I2C_CR2_ITERREN
 (1 << 8)

	)

172 
	#I2C_CR2_FREQ_2MHZ
 0x02

	)

173 
	#I2C_CR2_FREQ_3MHZ
 0x03

	)

174 
	#I2C_CR2_FREQ_4MHZ
 0x04

	)

175 
	#I2C_CR2_FREQ_5MHZ
 0x05

	)

176 
	#I2C_CR2_FREQ_6MHZ
 0x06

	)

177 
	#I2C_CR2_FREQ_7MHZ
 0x07

	)

178 
	#I2C_CR2_FREQ_8MHZ
 0x08

	)

179 
	#I2C_CR2_FREQ_9MHZ
 0x09

	)

180 
	#I2C_CR2_FREQ_10MHZ
 0x0a

	)

181 
	#I2C_CR2_FREQ_11MHZ
 0x0b

	)

182 
	#I2C_CR2_FREQ_12MHZ
 0x0c

	)

183 
	#I2C_CR2_FREQ_13MHZ
 0x0d

	)

184 
	#I2C_CR2_FREQ_14MHZ
 0x0e

	)

185 
	#I2C_CR2_FREQ_15MHZ
 0x0f

	)

186 
	#I2C_CR2_FREQ_16MHZ
 0x10

	)

187 
	#I2C_CR2_FREQ_17MHZ
 0x11

	)

188 
	#I2C_CR2_FREQ_18MHZ
 0x12

	)

189 
	#I2C_CR2_FREQ_19MHZ
 0x13

	)

190 
	#I2C_CR2_FREQ_20MHZ
 0x14

	)

191 
	#I2C_CR2_FREQ_21MHZ
 0x15

	)

192 
	#I2C_CR2_FREQ_22MHZ
 0x16

	)

193 
	#I2C_CR2_FREQ_23MHZ
 0x17

	)

194 
	#I2C_CR2_FREQ_24MHZ
 0x18

	)

195 
	#I2C_CR2_FREQ_25MHZ
 0x19

	)

196 
	#I2C_CR2_FREQ_26MHZ
 0x1a

	)

197 
	#I2C_CR2_FREQ_27MHZ
 0x1b

	)

198 
	#I2C_CR2_FREQ_28MHZ
 0x1c

	)

199 
	#I2C_CR2_FREQ_29MHZ
 0x1d

	)

200 
	#I2C_CR2_FREQ_30MHZ
 0x1e

	)

201 
	#I2C_CR2_FREQ_31MHZ
 0x1f

	)

202 
	#I2C_CR2_FREQ_32MHZ
 0x20

	)

203 
	#I2C_CR2_FREQ_33MHZ
 0x21

	)

204 
	#I2C_CR2_FREQ_34MHZ
 0x22

	)

205 
	#I2C_CR2_FREQ_35MHZ
 0x23

	)

206 
	#I2C_CR2_FREQ_36MHZ
 0x24

	)

207 
	#I2C_CR2_FREQ_37MHZ
 0x25

	)

208 
	#I2C_CR2_FREQ_38MHZ
 0x26

	)

209 
	#I2C_CR2_FREQ_39MHZ
 0x27

	)

210 
	#I2C_CR2_FREQ_40MHZ
 0x28

	)

211 
	#I2C_CR2_FREQ_41MHZ
 0x29

	)

212 
	#I2C_CR2_FREQ_42MHZ
 0x2a

	)

218 
	#I2C_OAR1_ADDMODE
 (1 << 15)

	)

219 
	#I2C_OAR1_ADDMODE_7BIT
 0

	)

220 
	#I2C_OAR1_ADDMODE_10BIT
 1

	)

235 
	#I2C_OAR2_ENDUAL
 (1 << 0)

	)

246 
	#I2C_SR1_SMBALERT
 (1 << 15)

	)

249 
	#I2C_SR1_TIMEOUT
 (1 << 14)

	)

254 
	#I2C_SR1_PECERR
 (1 << 12)

	)

257 
	#I2C_SR1_OVR
 (1 << 11)

	)

260 
	#I2C_SR1_AF
 (1 << 10)

	)

263 
	#I2C_SR1_ARLO
 (1 << 9)

	)

266 
	#I2C_SR1_BERR
 (1 << 8)

	)

269 
	#I2C_SR1_TxE
 (1 << 7)

	)

272 
	#I2C_SR1_RxNE
 (1 << 6)

	)

277 
	#I2C_SR1_STOPF
 (1 << 4)

	)

280 
	#I2C_SR1_ADD10
 (1 << 3)

	)

283 
	#I2C_SR1_BTF
 (1 << 2)

	)

286 
	#I2C_SR1_ADDR
 (1 << 1)

	)

289 
	#I2C_SR1_SB
 (1 << 0)

	)

296 
	#I2C_SR2_DUALF
 (1 << 7)

	)

299 
	#I2C_SR2_SMBHOST
 (1 << 6)

	)

302 
	#I2C_SR2_SMBDEFAULT
 (1 << 5)

	)

305 
	#I2C_SR2_GENCALL
 (1 << 4)

	)

310 
	#I2C_SR2_TRA
 (1 << 2)

	)

313 
	#I2C_SR2_BUSY
 (1 << 1)

	)

316 
	#I2C_SR2_MSL
 (1 << 0)

	)

321 
	#I2C_CCR_FS
 (1 << 15)

	)

328 
	#I2C_CCR_DUTY
 (1 << 14)

	)

329 
	#I2C_CCR_DUTY_DIV2
 0

	)

330 
	#I2C_CCR_DUTY_16_DIV_9
 1

	)

356 
	#I2C_WRITE
 0

	)

357 
	#I2C_READ
 1

	)

362 
BEGIN_DECLS


364 
i2c_ª£t
(
uöt32_t
 
i2c
);

365 
i2c_≥rùhîÆ_íabÀ
(
uöt32_t
 
i2c
);

366 
i2c_≥rùhîÆ_dißbÀ
(
uöt32_t
 
i2c
);

367 
i2c_£nd_°¨t
(
uöt32_t
 
i2c
);

368 
i2c_£nd_°›
(
uöt32_t
 
i2c
);

369 
i2c_˛ór_°›
(
uöt32_t
 
i2c
);

370 
i2c_£t_own_7bô_¶ave_addªss
(
uöt32_t
 
i2c
, 
uöt8_t
 
¶ave
);

371 
i2c_£t_own_10bô_¶ave_addªss
(
uöt32_t
 
i2c
, 
uöt16_t
 
¶ave
);

372 
i2c_£t_own_7bô_¶ave_addªss_two
(
uöt32_t
 
i2c
, 
uöt8_t
 
¶ave
);

373 
i2c_íabÀ_duÆ_addªssög_mode
(
uöt32_t
 
i2c
);

374 
i2c_dißbÀ_duÆ_addªssög_mode
(
uöt32_t
 
i2c
);

375 
i2c_£t_˛ock_‰equícy
(
uöt32_t
 
i2c
, 
uöt8_t
 
‰eq
);

376 
i2c_£nd_d©a
(
uöt32_t
 
i2c
, 
uöt8_t
 
d©a
);

377 
i2c_£t_Á°_mode
(
uöt32_t
 
i2c
);

378 
i2c_£t_°™d¨d_mode
(
uöt32_t
 
i2c
);

379 
i2c_£t_c¸
(
uöt32_t
 
i2c
, 
uöt16_t
 
‰eq
);

380 
i2c_£t_åi£
(
uöt32_t
 
i2c
, 
uöt16_t
 
åi£
);

381 
i2c_£nd_7bô_addªss
(
uöt32_t
 
i2c
, 
uöt8_t
 
¶ave
, uöt8_à
ªadwrôe
);

382 
uöt8_t
 
i2c_gë_d©a
(
uöt32_t
 
i2c
);

383 
i2c_íabÀ_öãºu±
(
uöt32_t
 
i2c
, uöt32_à
öãºu±
);

384 
i2c_dißbÀ_öãºu±
(
uöt32_t
 
i2c
, uöt32_à
öãºu±
);

385 
i2c_íabÀ_ack
(
uöt32_t
 
i2c
);

386 
i2c_dißbÀ_ack
(
uöt32_t
 
i2c
);

387 
i2c_«ck_√xt
(
uöt32_t
 
i2c
);

388 
i2c_«ck_cuºít
(
uöt32_t
 
i2c
);

389 
i2c_£t_dutycy˛e
(
uöt32_t
 
i2c
, uöt32_à
dutycy˛e
);

390 
i2c_íabÀ_dma
(
uöt32_t
 
i2c
);

391 
i2c_dißbÀ_dma
(
uöt32_t
 
i2c
);

392 
i2c_£t_dma_œ°_å™s„r
(
uöt32_t
 
i2c
);

393 
i2c_˛ór_dma_œ°_å™s„r
(
uöt32_t
 
i2c
);

395 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\IWDG_C~1.H

30 #ifde‡
LIBOPENCM3_IWDG_H


32 #i‚de‡
LIBOPENCM3_IWDG_COMMON_ALL_H


33 
	#LIBOPENCM3_IWDG_COMMON_ALL_H


	)

40 
	#IWDG_KR
 
	`MMIO32
(
IWDG_BASE
 + 0x00)

	)

43 
	#IWDG_PR
 
	`MMIO32
(
IWDG_BASE
 + 0x04)

	)

46 
	#IWDG_RLR
 
	`MMIO32
(
IWDG_BASE
 + 0x08)

	)

49 
	#IWDG_SR
 
	`MMIO32
(
IWDG_BASE
 + 0x0c)

	)

60 
	#IWDG_KR_RESET
 0xØØ

	)

61 
	#IWDG_KR_UNLOCK
 0x5555

	)

62 
	#IWDG_KR_START
 0xcccc

	)

70 
	#IWDG_PR_LSB
 0

	)

75 
	#IWDG_PR_DIV4
 0x0

	)

76 
	#IWDG_PR_DIV8
 0x1

	)

77 
	#IWDG_PR_DIV16
 0x2

	)

78 
	#IWDG_PR_DIV32
 0x3

	)

79 
	#IWDG_PR_DIV64
 0x4

	)

80 
	#IWDG_PR_DIV128
 0x5

	)

81 
	#IWDG_PR_DIV256
 0x6

	)

97 
	#IWDG_SR_RVU
 (1 << 1)

	)

100 
	#IWDG_SR_PVU
 (1 << 0)

	)

104 
BEGIN_DECLS


106 
iwdg_°¨t
();

107 
iwdg_£t_≥riod_ms
(
uöt32_t
 
≥riod
);

108 
boﬁ
 
iwdg_ªlﬂd_busy
();

109 
boﬁ
 
iwdg_¥esˇÀr_busy
();

110 
iwdg_ª£t
();

112 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\PWR_CO~1.H

31 #ifde‡
LIBOPENCM3_PWR_H


33 #i‚de‡
LIBOPENCM3_PWR_COMMON_ALL_H


34 
	#LIBOPENCM3_PWR_COMMON_ALL_H


	)

41 
	#PWR_CR
 
	`MMIO32
(
POWER_CONTROL_BASE
 + 0x00)

	)

44 
	#PWR_CSR
 
	`MMIO32
(
POWER_CONTROL_BASE
 + 0x04)

	)

51 
	#PWR_CR_DBP
 (1 << 8)

	)

54 
	#PWR_CR_PLS_LSB
 5

	)

59 
	#PWR_CR_PLS_2V2
 (0x0 << 
PWR_CR_PLS_LSB
)

	)

60 
	#PWR_CR_PLS_2V3
 (0x1 << 
PWR_CR_PLS_LSB
)

	)

61 
	#PWR_CR_PLS_2V4
 (0x2 << 
PWR_CR_PLS_LSB
)

	)

62 
	#PWR_CR_PLS_2V5
 (0x3 << 
PWR_CR_PLS_LSB
)

	)

63 
	#PWR_CR_PLS_2V6
 (0x4 << 
PWR_CR_PLS_LSB
)

	)

64 
	#PWR_CR_PLS_2V7
 (0x5 << 
PWR_CR_PLS_LSB
)

	)

65 
	#PWR_CR_PLS_2V8
 (0x6 << 
PWR_CR_PLS_LSB
)

	)

66 
	#PWR_CR_PLS_2V9
 (0x7 << 
PWR_CR_PLS_LSB
)

	)

68 
	#PWR_CR_PLS_MASK
 (0x7 << 
PWR_CR_PLS_LSB
)

	)

71 
	#PWR_CR_PVDE
 (1 << 4)

	)

74 
	#PWR_CR_CSBF
 (1 << 3)

	)

77 
	#PWR_CR_CWUF
 (1 << 2)

	)

80 
	#PWR_CR_PDDS
 (1 << 1)

	)

83 
	#PWR_CR_LPDS
 (1 << 0)

	)

90 
	#PWR_CSR_EWUP
 (1 << 8)

	)

95 
	#PWR_CSR_PVDO
 (1 << 2)

	)

98 
	#PWR_CSR_SBF
 (1 << 1)

	)

101 
	#PWR_CSR_WUF
 (1 << 0)

	)

105 
BEGIN_DECLS


107 
pwr_dißbÀ_backup_domaö_wrôe_¥Ÿe˘
();

108 
pwr_íabÀ_backup_domaö_wrôe_¥Ÿe˘
();

109 
pwr_íabÀ_powî_vﬁège_dëe˘
(
uöt32_t
 
pvd_Àvñ
);

110 
pwr_dißbÀ_powî_vﬁège_dëe˘
();

111 
pwr_˛ór_°™dby_Êag
();

112 
pwr_˛ór_wakeup_Êag
();

113 
pwr_£t_°™dby_mode
();

114 
pwr_£t_°›_mode
();

115 
pwr_vﬁège_ªguœt‹_⁄_ö_°›
();

116 
pwr_vﬁège_ªguœt‹_low_powî_ö_°›
();

117 
pwr_íabÀ_wakeup_pö
();

118 
pwr_dißbÀ_wakeup_pö
();

119 
boﬁ
 
pwr_vﬁège_high
();

120 
boﬁ
 
pwr_gë_°™dby_Êag
();

121 
boﬁ
 
pwr_gë_wakeup_Êag
();

123 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\RCC_CO~1.H

31 #ifde‡
LIBOPENCM3_RCC_H


34 #i‚de‡
LIBOPENCM3_RCC_COMMON_ALL_H


35 
	#LIBOPENCM3_RCC_COMMON_ALL_H


	)

39 
BEGIN_DECLS


41 
rcc_≥rùhîÆ_íabÀ_˛ock
(vﬁ©ûê
uöt32_t
 *
ªg
, uöt32_à
í
);

42 
rcc_≥rùhîÆ_dißbÀ_˛ock
(vﬁ©ûê
uöt32_t
 *
ªg
, uöt32_à
í
);

43 
rcc_≥rùhîÆ_ª£t
(vﬁ©ûê
uöt32_t
 *
ªg
, uöt32_à
ª£t
);

44 
rcc_≥rùhîÆ_˛ór_ª£t
(vﬁ©ûê
uöt32_t
 *
ªg
, uöt32_à
˛ór_ª£t
);

46 
rcc_≥rùh_˛ock_íabÀ
(
rcc_≥rùh_˛kí
 
˛kí
);

47 
rcc_≥rùh_˛ock_dißbÀ
(
rcc_≥rùh_˛kí
 
˛kí
);

48 
rcc_≥rùh_ª£t_pul£
(
rcc_≥rùh_r°
 
r°
);

49 
rcc_≥rùh_ª£t_hﬁd
(
rcc_≥rùh_r°
 
r°
);

50 
rcc_≥rùh_ª£t_ªÀa£
(
rcc_≥rùh_r°
 
r°
);

52 
rcc_£t_mco
(
uöt32_t
 
mco§c
);

54 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\SPI_CO~1.H

30 #i‡
deföed
(
LIBOPENCM3_SPI_H
)

32 #i‚de‡
LIBOPENCM3_SPI_COMMON_ALL_H


33 
	#LIBOPENCM3_SPI_COMMON_ALL_H


	)

46 
	#SPI1
 
SPI1_BASE


	)

47 
	#SPI2
 
SPI2_BASE


	)

48 
	#SPI3
 
SPI3_BASE


	)

49 
	#SPI4
 
SPI4_BASE


	)

50 
	#SPI5
 
SPI5_BASE


	)

51 
	#SPI6
 
SPI6_BASE


	)

58 
	#SPI_CR1
(
•i_ba£
Ë
	`MMIO32
((•i_ba£Ë+ 0x00)

	)

59 
	#SPI1_CR1
 
	`SPI_CR1
(
SPI1_BASE
)

	)

60 
	#SPI2_CR1
 
	`SPI_CR1
(
SPI2_BASE
)

	)

61 
	#SPI3_CR1
 
	`SPI_CR1
(
SPI3_BASE
)

	)

64 
	#SPI_CR2
(
•i_ba£
Ë
	`MMIO32
((•i_ba£Ë+ 0x04)

	)

65 
	#SPI1_CR2
 
	`SPI_CR2
(
SPI1_BASE
)

	)

66 
	#SPI2_CR2
 
	`SPI_CR2
(
SPI2_BASE
)

	)

67 
	#SPI3_CR2
 
	`SPI_CR2
(
SPI3_BASE
)

	)

70 
	#SPI_SR
(
•i_ba£
Ë
	`MMIO32
((•i_ba£Ë+ 0x08)

	)

71 
	#SPI1_SR
 
	`SPI_SR
(
SPI1_BASE
)

	)

72 
	#SPI2_SR
 
	`SPI_SR
(
SPI2_BASE
)

	)

73 
	#SPI3_SR
 
	`SPI_SR
(
SPI3_BASE
)

	)

76 
	#SPI_DR
(
•i_ba£
Ë
	`MMIO32
((•i_ba£Ë+ 0x0c)

	)

77 
	#SPI1_DR
 
	`SPI_DR
(
SPI1_BASE
)

	)

78 
	#SPI2_DR
 
	`SPI_DR
(
SPI2_BASE
)

	)

79 
	#SPI3_DR
 
	`SPI_DR
(
SPI3_BASE
)

	)

83 
	#SPI_CRCPR
(
•i_ba£
Ë
	`MMIO32
((•i_ba£Ë+ 0x10)

	)

84 
	#SPI1_CRCPR
 
	`SPI_CRCPR
(
SPI1_BASE
)

	)

85 
	#SPI2_CRCPR
 
	`SPI_CRCPR
(
SPI2_BASE
)

	)

86 
	#SPI3_CRCPR
 
	`SPI_CRCPR
(
SPI3_BASE
)

	)

90 
	#SPI_RXCRCR
(
•i_ba£
Ë
	`MMIO32
((•i_ba£Ë+ 0x14)

	)

91 
	#SPI1_RXCRCR
 
	`SPI_RXCRCR
(
SPI1_BASE
)

	)

92 
	#SPI2_RXCRCR
 
	`SPI_RXCRCR
(
SPI2_BASE
)

	)

93 
	#SPI3_RXCRCR
 
	`SPI_RXCRCR
(
SPI3_BASE
)

	)

97 
	#SPI_TXCRCR
(
•i_ba£
Ë
	`MMIO32
((•i_ba£Ë+ 0x18)

	)

98 
	#SPI1_TXCRCR
 
	`SPI_TXCRCR
(
SPI1_BASE
)

	)

99 
	#SPI2_TXCRCR
 
	`SPI_TXCRCR
(
SPI2_BASE
)

	)

100 
	#SPI3_TXCRCR
 
	`SPI_TXCRCR
(
SPI3_BASE
)

	)

103 
	#SPI_I2SCFGR
(
•i_ba£
Ë
	`MMIO32
((•i_ba£Ë+ 0x1c)

	)

104 
	#SPI1_I2SCFGR
 
	`SPI_I2SCFGR
(
SPI1_BASE
)

	)

105 
	#SPI2_I2SCFGR
 
	`SPI_I2SCFGR
(
SPI2_BASE
)

	)

106 
	#SPI3_I2SCFGR
 
	`SPI_I2SCFGR
(
SPI3_BASE
)

	)

109 
	#SPI_I2SPR
(
•i_ba£
Ë
	`MMIO32
((•i_ba£Ë+ 0x20)

	)

110 
	#SPI1_I2SPR
 
	`SPI_I2SPR
(
SPI1_BASE
)

	)

111 
	#SPI2_I2SPR
 
	`SPI_I2SPR
(
SPI2_BASE
)

	)

112 
	#SPI3_I2SPR
 
	`SPI_I2SPR
(
SPI3_BASE
)

	)

119 
	#SPI_CR1_BIDIMODE_2LINE_UNIDIR
 (0 << 15)

	)

120 
	#SPI_CR1_BIDIMODE_1LINE_BIDIR
 (1 << 15)

	)

121 
	#SPI_CR1_BIDIMODE
 (1 << 15)

	)

124 
	#SPI_CR1_BIDIOE
 (1 << 14)

	)

127 
	#SPI_CR1_CRCEN
 (1 << 13)

	)

130 
	#SPI_CR1_CRCNEXT
 (1 << 12)

	)

133 
	#SPI_CR1_RXONLY
 (1 << 10)

	)

136 
	#SPI_CR1_SSM
 (1 << 9)

	)

139 
	#SPI_CR1_SSI
 (1 << 8)

	)

147 
	#SPI_CR1_MSBFIRST
 (0 << 7)

	)

148 
	#SPI_CR1_LSBFIRST
 (1 << 7)

	)

152 
	#SPI_CR1_SPE
 (1 << 6)

	)

160 
	#SPI_CR1_BAUDRATE_FPCLK_DIV_2
 (0x00 << 3)

	)

161 
	#SPI_CR1_BAUDRATE_FPCLK_DIV_4
 (0x01 << 3)

	)

162 
	#SPI_CR1_BAUDRATE_FPCLK_DIV_8
 (0x02 << 3)

	)

163 
	#SPI_CR1_BAUDRATE_FPCLK_DIV_16
 (0x03 << 3)

	)

164 
	#SPI_CR1_BAUDRATE_FPCLK_DIV_32
 (0x04 << 3)

	)

165 
	#SPI_CR1_BAUDRATE_FPCLK_DIV_64
 (0x05 << 3)

	)

166 
	#SPI_CR1_BAUDRATE_FPCLK_DIV_128
 (0x06 << 3)

	)

167 
	#SPI_CR1_BAUDRATE_FPCLK_DIV_256
 (0x07 << 3)

	)

174 
	#SPI_CR1_BR_FPCLK_DIV_2
 0x0

	)

175 
	#SPI_CR1_BR_FPCLK_DIV_4
 0x1

	)

176 
	#SPI_CR1_BR_FPCLK_DIV_8
 0x2

	)

177 
	#SPI_CR1_BR_FPCLK_DIV_16
 0x3

	)

178 
	#SPI_CR1_BR_FPCLK_DIV_32
 0x4

	)

179 
	#SPI_CR1_BR_FPCLK_DIV_64
 0x5

	)

180 
	#SPI_CR1_BR_FPCLK_DIV_128
 0x6

	)

181 
	#SPI_CR1_BR_FPCLK_DIV_256
 0x7

	)

185 
	#SPI_CR1_MSTR
 (1 << 2)

	)

193 
	#SPI_CR1_CPOL_CLK_TO_0_WHEN_IDLE
 (0 << 1)

	)

194 
	#SPI_CR1_CPOL_CLK_TO_1_WHEN_IDLE
 (1 << 1)

	)

196 
	#SPI_CR1_CPOL
 (1 << 1)

	)

204 
	#SPI_CR1_CPHA_CLK_TRANSITION_1
 (0 << 0)

	)

205 
	#SPI_CR1_CPHA_CLK_TRANSITION_2
 (1 << 0)

	)

207 
	#SPI_CR1_CPHA
 (1 << 0)

	)

214 
	#SPI_CR2_TXEIE
 (1 << 7)

	)

217 
	#SPI_CR2_RXNEIE
 (1 << 6)

	)

220 
	#SPI_CR2_ERRIE
 (1 << 5)

	)

226 
	#SPI_CR2_SSOE
 (1 << 2)

	)

229 
	#SPI_CR2_TXDMAEN
 (1 << 1)

	)

232 
	#SPI_CR2_RXDMAEN
 (1 << 0)

	)

239 
	#SPI_SR_BSY
 (1 << 7)

	)

242 
	#SPI_SR_OVR
 (1 << 6)

	)

246 
	#SPI_SR_MODF
 (1 << 5)

	)

250 
	#SPI_SR_CRCERR
 (1 << 4)

	)

254 
	#SPI_SR_UDR
 (1 << 3)

	)

258 
	#SPI_SR_CHSIDE
 (1 << 2)

	)

261 
	#SPI_SR_TXE
 (1 << 1)

	)

264 
	#SPI_SR_RXNE
 (1 << 0)

	)

292 
	#SPI_I2SCFGR_I2SMOD
 (1 << 11)

	)

295 
	#SPI_I2SCFGR_I2SE
 (1 << 10)

	)

298 
	#SPI_I2SCFGR_I2SCFG_LSB
 8

	)

299 
	#SPI_I2SCFGR_I2SCFG_SLAVE_TRANSMIT
 0x0

	)

300 
	#SPI_I2SCFGR_I2SCFG_SLAVE_RECEIVE
 0x1

	)

301 
	#SPI_I2SCFGR_I2SCFG_MASTER_TRANSMIT
 0x2

	)

302 
	#SPI_I2SCFGR_I2SCFG_MASTER_RECEIVE
 0x3

	)

305 
	#SPI_I2SCFGR_PCMSYNC
 (1 << 7)

	)

310 
	#SPI_I2SCFGR_I2SSTD_LSB
 4

	)

311 
	#SPI_I2SCFGR_I2SSTD_I2S_PHILIPS
 0x0

	)

312 
	#SPI_I2SCFGR_I2SSTD_MSB_JUSTIFIED
 0x1

	)

313 
	#SPI_I2SCFGR_I2SSTD_LSB_JUSTIFIED
 0x2

	)

314 
	#SPI_I2SCFGR_I2SSTD_PCM
 0x3

	)

317 
	#SPI_I2SCFGR_CKPOL
 (1 << 3)

	)

320 
	#SPI_I2SCFGR_DATLEN_LSB
 1

	)

321 
	#SPI_I2SCFGR_DATLEN_16BIT
 0x0

	)

322 
	#SPI_I2SCFGR_DATLEN_24BIT
 0x1

	)

323 
	#SPI_I2SCFGR_DATLEN_32BIT
 0x2

	)

326 
	#SPI_I2SCFGR_CHLEN
 (1 << 0)

	)

335 
	#SPI_I2SPR_MCKOE
 (1 << 9)

	)

338 
	#SPI_I2SPR_ODD
 (1 << 8)

	)

345 
BEGIN_DECLS


347 
•i_ª£t
(
uöt32_t
 
•i_≥rùhîÆ
);

348 
•i_öô_ma°î
(
uöt32_t
 
•i
, uöt32_à
br
, uöt32_à
˝ﬁ
, uöt32_à
˝ha
,

349 
uöt32_t
 
dff
, uöt32_à
lsbfú°
);

350 
•i_íabÀ
(
uöt32_t
 
•i
);

351 
•i_dißbÀ
(
uöt32_t
 
•i
);

352 
uöt16_t
 
•i_˛ón_dißbÀ
(
uöt32_t
 
•i
);

353 
•i_wrôe
(
uöt32_t
 
•i
, 
uöt16_t
 
d©a
);

354 
•i_£nd
(
uöt32_t
 
•i
, 
uöt16_t
 
d©a
);

355 
uöt16_t
 
•i_ªad
(
uöt32_t
 
•i
);

356 
uöt16_t
 
•i_x„r
(
uöt32_t
 
•i
, uöt16_à
d©a
);

357 
•i_£t_bidúe˘i⁄Æ_mode
(
uöt32_t
 
•i
);

358 
•i_£t_unidúe˘i⁄Æ_mode
(
uöt32_t
 
•i
);

359 
•i_£t_bidúe˘i⁄Æ_ª˚ive_⁄ly_mode
(
uöt32_t
 
•i
);

360 
•i_£t_bidúe˘i⁄Æ_å™smô_⁄ly_mode
(
uöt32_t
 
•i
);

361 
•i_íabÀ_¸c
(
uöt32_t
 
•i
);

362 
•i_dißbÀ_¸c
(
uöt32_t
 
•i
);

363 
•i_£t_√xt_tx_‰om_buf„r
(
uöt32_t
 
•i
);

364 
•i_£t_√xt_tx_‰om_¸c
(
uöt32_t
 
•i
);

365 
•i_£t_dff_8bô
(
uöt32_t
 
•i
);

366 
•i_£t_dff_16bô
(
uöt32_t
 
•i
);

367 
•i_£t_fuŒ_du∂ex_mode
(
uöt32_t
 
•i
);

368 
•i_£t_ª˚ive_⁄ly_mode
(
uöt32_t
 
•i
);

369 
•i_dißbÀ_so·w¨e_¶ave_m™agemít
(
uöt32_t
 
•i
);

370 
•i_íabÀ_so·w¨e_¶ave_m™agemít
(
uöt32_t
 
•i
);

371 
•i_£t_nss_high
(
uöt32_t
 
•i
);

372 
•i_£t_nss_low
(
uöt32_t
 
•i
);

373 
•i_£nd_lsb_fú°
(
uöt32_t
 
•i
);

374 
•i_£nd_msb_fú°
(
uöt32_t
 
•i
);

375 
•i_£t_baudøã_¥esˇÀr
(
uöt32_t
 
•i
, 
uöt8_t
 
baudøã
);

376 
•i_£t_ma°î_mode
(
uöt32_t
 
•i
);

377 
•i_£t_¶ave_mode
(
uöt32_t
 
•i
);

378 
•i_£t_˛ock_pﬁ¨ôy_1
(
uöt32_t
 
•i
);

379 
•i_£t_˛ock_pﬁ¨ôy_0
(
uöt32_t
 
•i
);

380 
•i_£t_˛ock_pha£_1
(
uöt32_t
 
•i
);

381 
•i_£t_˛ock_pha£_0
(
uöt32_t
 
•i
);

382 
•i_íabÀ_tx_buf„r_em±y_öãºu±
(
uöt32_t
 
•i
);

383 
•i_dißbÀ_tx_buf„r_em±y_öãºu±
(
uöt32_t
 
•i
);

384 
•i_íabÀ_rx_buf„r_nŸ_em±y_öãºu±
(
uöt32_t
 
•i
);

385 
•i_dißbÀ_rx_buf„r_nŸ_em±y_öãºu±
(
uöt32_t
 
•i
);

386 
•i_íabÀ_îr‹_öãºu±
(
uöt32_t
 
•i
);

387 
•i_dißbÀ_îr‹_öãºu±
(
uöt32_t
 
•i
);

388 
•i_íabÀ_ss_ouçut
(
uöt32_t
 
•i
);

389 
•i_dißbÀ_ss_ouçut
(
uöt32_t
 
•i
);

390 
•i_íabÀ_tx_dma
(
uöt32_t
 
•i
);

391 
•i_dißbÀ_tx_dma
(
uöt32_t
 
•i
);

392 
•i_íabÀ_rx_dma
(
uöt32_t
 
•i
);

393 
•i_dißbÀ_rx_dma
(
uöt32_t
 
•i
);

394 
•i_£t_°™d¨d_mode
(
uöt32_t
 
•i
, 
uöt8_t
 
mode
);

396 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\SPI_CO~2.H

30 #ifde‡
LIBOPENCM3_SPI_H


32 #i‚de‡
LIBOPENCM3_SPI_COMMON_L1F124_H


33 
	#LIBOPENCM3_SPI_COMMON_L1F124_H


	)

37 
	~<lib›ícm3/°m32/comm⁄/•i_comm⁄_Æl.h
>

51 
	#SPI_CR1_DFF_8BIT
 (0 << 11)

	)

52 
	#SPI_CR1_DFF_16BIT
 (1 << 11)

	)

56 
	#SPI_CR1_DFF
 (1 << 11)

	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\ST_USB~1.H

42 #ifde‡
LIBOPENCM3_ST_USBFS_H


44 #i‚de‡
LIBOPENCM3_ST_USBFS_COMMON_H


45 
	#LIBOPENCM3_ST_USBFS_COMMON_H


	)

47 
	~<lib›ícm3/°m32/toﬁs.h
>

60 
	#USB_CNTR_REG
 (&
	`MMIO32
(
USB_DEV_FS_BASE
 + 0x40))

	)

62 
	#USB_ISTR_REG
 (&
	`MMIO32
(
USB_DEV_FS_BASE
 + 0x44))

	)

64 
	#USB_FNR_REG
 (&
	`MMIO32
(
USB_DEV_FS_BASE
 + 0x48))

	)

66 
	#USB_DADDR_REG
 (&
	`MMIO32
(
USB_DEV_FS_BASE
 + 0x4C))

	)

68 
	#USB_BTABLE_REG
 (&
	`MMIO32
(
USB_DEV_FS_BASE
 + 0x50))

	)

71 
	#USB_EP_REG
(
EP
Ë(&
	`MMIO32
(
USB_DEV_FS_BASE
Ë+ (EP))

	)

81 
	#USB_CNTR_CTRM
 0x8000

	)

82 
	#USB_CNTR_PMAOVRM
 0x4000

	)

83 
	#USB_CNTR_ERRM
 0x2000

	)

84 
	#USB_CNTR_WKUPM
 0x1000

	)

85 
	#USB_CNTR_SUSPM
 0x0800

	)

86 
	#USB_CNTR_RESETM
 0x0400

	)

87 
	#USB_CNTR_SOFM
 0x0200

	)

88 
	#USB_CNTR_ESOFM
 0x0100

	)

91 
	#USB_CNTR_RESUME
 0x0010

	)

92 
	#USB_CNTR_FSUSP
 0x0008

	)

93 
	#USB_CNTR_LP_MODE
 0x0004

	)

94 
	#USB_CNTR_PWDN
 0x0002

	)

95 
	#USB_CNTR_FRES
 0x0001

	)

99 
	#USB_ISTR_CTR
 0x8000

	)

100 
	#USB_ISTR_PMAOVR
 0x4000

	)

101 
	#USB_ISTR_ERR
 0x2000

	)

102 
	#USB_ISTR_WKUP
 0x1000

	)

103 
	#USB_ISTR_SUSP
 0x0800

	)

104 
	#USB_ISTR_RESET
 0x0400

	)

105 
	#USB_ISTR_SOF
 0x0200

	)

106 
	#USB_ISTR_ESOF
 0x0100

	)

107 
	#USB_ISTR_DIR
 0x0010

	)

108 
	#USB_ISTR_EP_ID
 0x000F

	)

113 
	#USB_CLR_ISTR_PMAOVR
(Ë
	`CLR_REG_BIT
(
USB_ISTR_REG
, 
USB_ISTR_PMAOVR
)

	)

114 
	#USB_CLR_ISTR_ERR
(Ë
	`CLR_REG_BIT
(
USB_ISTR_REG
, 
USB_ISTR_ERR
)

	)

115 
	#USB_CLR_ISTR_WKUP
(Ë
	`CLR_REG_BIT
(
USB_ISTR_REG
, 
USB_ISTR_WKUP
)

	)

116 
	#USB_CLR_ISTR_SUSP
(Ë
	`CLR_REG_BIT
(
USB_ISTR_REG
, 
USB_ISTR_SUSP
)

	)

117 
	#USB_CLR_ISTR_RESET
(Ë
	`CLR_REG_BIT
(
USB_ISTR_REG
, 
USB_ISTR_RESET
)

	)

118 
	#USB_CLR_ISTR_SOF
(Ë
	`CLR_REG_BIT
(
USB_ISTR_REG
, 
USB_ISTR_SOF
)

	)

119 
	#USB_CLR_ISTR_ESOF
(Ë
	`CLR_REG_BIT
(
USB_ISTR_REG
, 
USB_ISTR_ESOF
)

	)

123 
	#USB_FNR_RXDP
 (1 << 15)

	)

124 
	#USB_FNR_RXDM
 (1 << 14)

	)

125 
	#USB_FNR_LCK
 (1 << 13)

	)

127 
	#USB_FNR_LSOF_SHIFT
 11

	)

128 
	#USB_FNR_LSOF
 (3 << 
USB_FNR_LSOF_SHIFT
)

	)

130 
	#USB_FNR_FN
 (0x7FF << 0)

	)

134 
	#USB_DADDR_EF
 (1 << 7)

	)

135 
	#USB_DADDR_ADDR
 0x007F

	)

139 
	#USB_BTABLE_BTABLE
 0xFFF8

	)

145 
	#USB_EP0
 0

	)

146 
	#USB_EP1
 1

	)

147 
	#USB_EP2
 2

	)

148 
	#USB_EP3
 3

	)

149 
	#USB_EP4
 4

	)

150 
	#USB_EP5
 5

	)

151 
	#USB_EP6
 6

	)

152 
	#USB_EP7
 7

	)

157 
	#USB_EP_RX_CTR
 0x8000

	)

158 
	#USB_EP_RX_DTOG
 0x4000

	)

159 
	#USB_EP_RX_STAT
 0x3000

	)

161 
	#USB_EP_SETUP
 0x0800

	)

162 
	#USB_EP_TYPE
 0x0600

	)

163 
	#USB_EP_KIND
 0x0100

	)

168 
	#USB_EP_TX_CTR
 0x0080

	)

169 
	#USB_EP_TX_DTOG
 0x0040

	)

170 
	#USB_EP_TX_STAT
 0x0030

	)

172 
	#USB_EP_ADDR
 0x000F

	)

175 
	#USB_EP_NTOGGLE_MSK
 (
USB_EP_RX_CTR
 | \

176 
USB_EP_SETUP
 | \

177 
USB_EP_TYPE
 | \

178 
USB_EP_KIND
 | \

179 
USB_EP_TX_CTR
 | \

180 
USB_EP_ADDR
)

	)

183 
	#USB_EP_RX_STAT_TOG_MSK
 (
USB_EP_RX_STAT
 | 
USB_EP_NTOGGLE_MSK
)

	)

185 
	#USB_EP_TX_STAT_TOG_MSK
 (
USB_EP_TX_STAT
 | 
USB_EP_NTOGGLE_MSK
)

	)

188 
	#USB_EP_RX_STAT_DISABLED
 0x0000

	)

189 
	#USB_EP_RX_STAT_STALL
 0x1000

	)

190 
	#USB_EP_RX_STAT_NAK
 0x2000

	)

191 
	#USB_EP_RX_STAT_VALID
 0x3000

	)

194 
	#USB_EP_TX_STAT_DISABLED
 0x0000

	)

195 
	#USB_EP_TX_STAT_STALL
 0x0010

	)

196 
	#USB_EP_TX_STAT_NAK
 0x0020

	)

197 
	#USB_EP_TX_STAT_VALID
 0x0030

	)

200 
	#USB_EP_TYPE_BULK
 0x0000

	)

201 
	#USB_EP_TYPE_CONTROL
 0x0200

	)

202 
	#USB_EP_TYPE_ISO
 0x0400

	)

203 
	#USB_EP_TYPE_INTERRUPT
 0x0600

	)

213 
	#USB_SET_EP_RX_STAT
(
EP
, 
STAT
) \

214 
	`TOG_SET_REG_BIT_MSK_AND_SET
(
	`USB_EP_REG
(
EP
), \

215 
USB_EP_RX_STAT_TOG_MSK
, 
STAT
, 
USB_EP_RX_CTR
 | 
USB_EP_TX_CTR
)

	)

217 
	#USB_SET_EP_TX_STAT
(
EP
, 
STAT
) \

218 
	`TOG_SET_REG_BIT_MSK_AND_SET
(
	`USB_EP_REG
(
EP
), \

219 
USB_EP_TX_STAT_TOG_MSK
, 
STAT
, 
USB_EP_RX_CTR
 | 
USB_EP_TX_CTR
)

	)

228 
	#USB_CLR_EP_NTOGGLE_BIT_AND_SET
(
EP
, 
BIT
, 
EXTRA_BITS
) \

229 
	`CLR_REG_BIT_MSK_AND_SET
(
	`USB_EP_REG
(
EP
), \

230 
USB_EP_NTOGGLE_MSK
, 
BIT
, 
EXTRA_BITS
)

	)

232 
	#USB_CLR_EP_RX_CTR
(
EP
) \

233 
	`USB_CLR_EP_NTOGGLE_BIT_AND_SET
(
EP
, 
USB_EP_RX_CTR
, 
USB_EP_TX_CTR
)

	)

235 
	#USB_CLR_EP_TX_CTR
(
EP
) \

236 
	`USB_CLR_EP_NTOGGLE_BIT_AND_SET
(
EP
, 
USB_EP_TX_CTR
, 
USB_EP_RX_CTR
)

	)

239 
	#USB_SET_EP_TYPE
(
EP
, 
TYPE
) \

240 
	`SET_REG
(
	`USB_EP_REG
(
EP
), \

241 (
	`GET_REG
(
	`USB_EP_REG
(
EP
)) & \

242 (
USB_EP_NTOGGLE_MSK
 & \

243 (~
USB_EP_TYPE
))Ë| 
TYPE
)

	)

245 
	#USB_SET_EP_KIND
(
EP
) \

246 
	`SET_REG
(
	`USB_EP_REG
(
EP
), \

247 (
	`GET_REG
(
	`USB_EP_REG
(
EP
)) & \

248 (
USB_EP_NTOGGLE_MSK
 & \

249 (~
USB_EP_KIND
))Ë| USB_EP_KIND)

	)

251 
	#USB_CLR_EP_KIND
(
EP
) \

252 
	`SET_REG
(
	`USB_EP_REG
(
EP
), \

253 (
	`GET_REG
(
	`USB_EP_REG
(
EP
)) & \

254 (
USB_EP_NTOGGLE_MSK
 & (~
USB_EP_KIND
))))

	)

256 
	#USB_SET_EP_STAT_OUT
(
EP
Ë
	`USB_SET_EP_KIND
(EP)

	)

257 
	#USB_CLR_EP_STAT_OUT
(
EP
Ë
	`USB_CLR_EP_KIND
(EP)

	)

259 
	#USB_SET_EP_ADDR
(
EP
, 
ADDR
) \

260 
	`SET_REG
(
	`USB_EP_REG
(
EP
), \

261 ((
	`GET_REG
(
	`USB_EP_REG
(
EP
)) & \

262 (
USB_EP_NTOGGLE_MSK
 & \

263 (~
USB_EP_ADDR
))Ë| 
ADDR
))

	)

266 
	#USB_CLR_EP_TX_DTOG
(
EP
) \

267 
	`SET_REG
(
	`USB_EP_REG
(
EP
), \

268 
	`GET_REG
(
	`USB_EP_REG
(
EP
)) & \

269 (
USB_EP_NTOGGLE_MSK
 | 
USB_EP_TX_DTOG
))

	)

271 
	#USB_CLR_EP_RX_DTOG
(
EP
) \

272 
	`SET_REG
(
	`USB_EP_REG
(
EP
), \

273 
	`GET_REG
(
	`USB_EP_REG
(
EP
)) & \

274 (
USB_EP_NTOGGLE_MSK
 | 
USB_EP_RX_DTOG
))

	)

279 
	#USB_GET_BTABLE
 
	`GET_REG
(
USB_BTABLE_REG
)

	)

283 
	#USB_GET_EP_TX_ADDR
(
EP
Ë
	`GET_REG
(
	`USB_EP_TX_ADDR
(EP))

	)

284 
	#USB_GET_EP_TX_COUNT
(
EP
Ë
	`GET_REG
(
	`USB_EP_TX_COUNT
(EP))

	)

285 
	#USB_GET_EP_RX_ADDR
(
EP
Ë
	`GET_REG
(
	`USB_EP_RX_ADDR
(EP))

	)

286 
	#USB_GET_EP_RX_COUNT
(
EP
Ë
	`GET_REG
(
	`USB_EP_RX_COUNT
(EP))

	)

287 
	#USB_SET_EP_TX_ADDR
(
EP
, 
ADDR
Ë
	`SET_REG
(
	`USB_EP_TX_ADDR
(EP), ADDR)

	)

288 
	#USB_SET_EP_TX_COUNT
(
EP
, 
COUNT
Ë
	`SET_REG
(
	`USB_EP_TX_COUNT
(EP), COUNT)

	)

289 
	#USB_SET_EP_RX_ADDR
(
EP
, 
ADDR
Ë
	`SET_REG
(
	`USB_EP_RX_ADDR
(EP), ADDR)

	)

290 
	#USB_SET_EP_RX_COUNT
(
EP
, 
COUNT
Ë
	`SET_REG
(
	`USB_EP_RX_COUNT
(EP), COUNT)

	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\ST_USB~2.H

32 #ifde‡
LIBOPENCM3_ST_USBFS_H


34 #i‚de‡
LIBOPENCM3_ST_USBFS_V1_H


35 
	#LIBOPENCM3_ST_USBFS_V1_H


	)

37 
	~<lib›ícm3/°m32/comm⁄/°_usbfs_comm⁄.h
>

41 
	#USB_EP_TX_ADDR
(
EP
) \

42 ((
uöt32_t
 *)(
USB_PMA_BASE
 + (
USB_GET_BTABLE
 + 
EP
 * 8 + 0Ë* 2))

	)

44 
	#USB_EP_TX_COUNT
(
EP
) \

45 ((
uöt32_t
 *)(
USB_PMA_BASE
 + (
USB_GET_BTABLE
 + 
EP
 * 8 + 2Ë* 2))

	)

47 
	#USB_EP_RX_ADDR
(
EP
) \

48 ((
uöt32_t
 *)(
USB_PMA_BASE
 + (
USB_GET_BTABLE
 + 
EP
 * 8 + 4Ë* 2))

	)

50 
	#USB_EP_RX_COUNT
(
EP
) \

51 ((
uöt32_t
 *)(
USB_PMA_BASE
 + (
USB_GET_BTABLE
 + 
EP
 * 8 + 6Ë* 2))

	)

55 
	#USB_GET_EP_TX_BUFF
(
EP
) \

56 (
USB_PMA_BASE
 + (
uöt8_t
 *)(
	`USB_GET_EP_TX_ADDR
(
EP
Ë* 2))

	)

58 
	#USB_GET_EP_RX_BUFF
(
EP
) \

59 (
USB_PMA_BASE
 + (
uöt8_t
 *)(
	`USB_GET_EP_RX_ADDR
(
EP
Ë* 2))

	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\TIMER_~1.H

32 #i‡
deföed
(
LIBOPENCM3_TIMER_H
)

34 #i‚de‡
LIBOPENCM3_TIMER_COMMON_H


35 
	#LIBOPENCM3_TIMER_COMMON_H


	)

45 
	#TIM1
 
TIM1_BASE


	)

46 
	#TIM2
 
TIM2_BASE


	)

47 
	#TIM3
 
TIM3_BASE


	)

48 #i‡
deföed
(
TIM4_BASE
)

49 
	#TIM4
 
TIM4_BASE


	)

51 
	#TIM5
 
TIM5_BASE


	)

52 
	#TIM6
 
TIM6_BASE


	)

53 
	#TIM7
 
TIM7_BASE


	)

54 #i‡
deföed
(
TIM8_BASE
)

55 
	#TIM8
 
TIM8_BASE


	)

57 #i‡
deföed
(
TIM9_BASE
)

58 
	#TIM9
 
TIM9_BASE


	)

60 #i‡
deföed
(
TIM10_BASE
)

61 
	#TIM10
 
TIM10_BASE


	)

63 #i‡
deföed
(
TIM11_BASE
)

64 
	#TIM11
 
TIM11_BASE


	)

66 #i‡
deföed
(
TIM12_BASE
)

67 
	#TIM12
 
TIM12_BASE


	)

69 #i‡
deföed
(
TIM13_BASE
)

70 
	#TIM13
 
TIM13_BASE


	)

72 #i‡
deföed
(
TIM14_BASE
)

73 
	#TIM14
 
TIM14_BASE


	)

75 #i‡
deföed
(
TIM15_BASE
)

76 
	#TIM15
 
TIM15_BASE


	)

78 #i‡
deföed
(
TIM16_BASE
)

79 
	#TIM16
 
TIM16_BASE


	)

81 #i‡
deföed
(
TIM17_BASE
)

82 
	#TIM17
 
TIM17_BASE


	)

89 
	#TIM_CR1
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x00)

	)

90 
	#TIM1_CR1
 
	`TIM_CR1
(
TIM1
)

	)

91 
	#TIM2_CR1
 
	`TIM_CR1
(
TIM2
)

	)

92 
	#TIM3_CR1
 
	`TIM_CR1
(
TIM3
)

	)

93 
	#TIM4_CR1
 
	`TIM_CR1
(
TIM4
)

	)

94 
	#TIM5_CR1
 
	`TIM_CR1
(
TIM5
)

	)

95 
	#TIM6_CR1
 
	`TIM_CR1
(
TIM6
)

	)

96 
	#TIM7_CR1
 
	`TIM_CR1
(
TIM7
)

	)

97 
	#TIM8_CR1
 
	`TIM_CR1
(
TIM8
)

	)

98 
	#TIM9_CR1
 
	`TIM_CR1
(
TIM9
)

	)

99 
	#TIM10_CR1
 
	`TIM_CR1
(
TIM10
)

	)

100 
	#TIM11_CR1
 
	`TIM_CR1
(
TIM11
)

	)

101 
	#TIM12_CR1
 
	`TIM_CR1
(
TIM12
)

	)

102 
	#TIM13_CR1
 
	`TIM_CR1
(
TIM13
)

	)

103 
	#TIM14_CR1
 
	`TIM_CR1
(
TIM14
)

	)

104 
	#TIM15_CR1
 
	`TIM_CR1
(
TIM15
)

	)

105 
	#TIM16_CR1
 
	`TIM_CR1
(
TIM16
)

	)

106 
	#TIM17_CR1
 
	`TIM_CR1
(
TIM17
)

	)

109 
	#TIM_CR2
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x04)

	)

110 
	#TIM1_CR2
 
	`TIM_CR2
(
TIM1
)

	)

111 
	#TIM2_CR2
 
	`TIM_CR2
(
TIM2
)

	)

112 
	#TIM3_CR2
 
	`TIM_CR2
(
TIM3
)

	)

113 
	#TIM4_CR2
 
	`TIM_CR2
(
TIM4
)

	)

114 
	#TIM5_CR2
 
	`TIM_CR2
(
TIM5
)

	)

115 
	#TIM6_CR2
 
	`TIM_CR2
(
TIM6
)

	)

116 
	#TIM7_CR2
 
	`TIM_CR2
(
TIM7
)

	)

117 
	#TIM8_CR2
 
	`TIM_CR2
(
TIM8
)

	)

118 
	#TIM15_CR2
 
	`TIM_CR2
(
TIM15
)

	)

119 
	#TIM16_CR2
 
	`TIM_CR2
(
TIM16
)

	)

120 
	#TIM17_CR2
 
	`TIM_CR2
(
TIM17
)

	)

123 
	#TIM_SMCR
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x08)

	)

124 
	#TIM1_SMCR
 
	`TIM_SMCR
(
TIM1
)

	)

125 
	#TIM2_SMCR
 
	`TIM_SMCR
(
TIM2
)

	)

126 
	#TIM3_SMCR
 
	`TIM_SMCR
(
TIM3
)

	)

127 
	#TIM4_SMCR
 
	`TIM_SMCR
(
TIM4
)

	)

128 
	#TIM5_SMCR
 
	`TIM_SMCR
(
TIM5
)

	)

129 
	#TIM8_SMCR
 
	`TIM_SMCR
(
TIM8
)

	)

130 
	#TIM9_SMCR
 
	`TIM_SMCR
(
TIM9
)

	)

131 
	#TIM12_SMCR
 
	`TIM_SMCR
(
TIM12
)

	)

132 
	#TIM15_SMCR
 
	`TIM_SMCR
(
TIM15
)

	)

135 
	#TIM_DIER
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x0C)

	)

136 
	#TIM1_DIER
 
	`TIM_DIER
(
TIM1
)

	)

137 
	#TIM2_DIER
 
	`TIM_DIER
(
TIM2
)

	)

138 
	#TIM3_DIER
 
	`TIM_DIER
(
TIM3
)

	)

139 
	#TIM4_DIER
 
	`TIM_DIER
(
TIM4
)

	)

140 
	#TIM5_DIER
 
	`TIM_DIER
(
TIM5
)

	)

141 
	#TIM6_DIER
 
	`TIM_DIER
(
TIM6
)

	)

142 
	#TIM7_DIER
 
	`TIM_DIER
(
TIM7
)

	)

143 
	#TIM8_DIER
 
	`TIM_DIER
(
TIM8
)

	)

144 
	#TIM9_DIER
 
	`TIM_DIER
(
TIM9
)

	)

145 
	#TIM10_DIER
 
	`TIM_DIER
(
TIM10
)

	)

146 
	#TIM11_DIER
 
	`TIM_DIER
(
TIM11
)

	)

147 
	#TIM12_DIER
 
	`TIM_DIER
(
TIM12
)

	)

148 
	#TIM13_DIER
 
	`TIM_DIER
(
TIM13
)

	)

149 
	#TIM14_DIER
 
	`TIM_DIER
(
TIM14
)

	)

150 
	#TIM15_DIER
 
	`TIM_DIER
(
TIM15
)

	)

151 
	#TIM16_DIER
 
	`TIM_DIER
(
TIM16
)

	)

152 
	#TIM17_DIER
 
	`TIM_DIER
(
TIM17
)

	)

155 
	#TIM_SR
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x10)

	)

156 
	#TIM1_SR
 
	`TIM_SR
(
TIM1
)

	)

157 
	#TIM2_SR
 
	`TIM_SR
(
TIM2
)

	)

158 
	#TIM3_SR
 
	`TIM_SR
(
TIM3
)

	)

159 
	#TIM4_SR
 
	`TIM_SR
(
TIM4
)

	)

160 
	#TIM5_SR
 
	`TIM_SR
(
TIM5
)

	)

161 
	#TIM6_SR
 
	`TIM_SR
(
TIM6
)

	)

162 
	#TIM7_SR
 
	`TIM_SR
(
TIM7
)

	)

163 
	#TIM8_SR
 
	`TIM_SR
(
TIM8
)

	)

164 
	#TIM9_SR
 
	`TIM_SR
(
TIM9
)

	)

165 
	#TIM10_SR
 
	`TIM_SR
(
TIM10
)

	)

166 
	#TIM11_SR
 
	`TIM_SR
(
TIM11
)

	)

167 
	#TIM12_SR
 
	`TIM_SR
(
TIM12
)

	)

168 
	#TIM13_SR
 
	`TIM_SR
(
TIM13
)

	)

169 
	#TIM14_SR
 
	`TIM_SR
(
TIM14
)

	)

170 
	#TIM15_SR
 
	`TIM_SR
(
TIM15
)

	)

171 
	#TIM16_SR
 
	`TIM_SR
(
TIM16
)

	)

172 
	#TIM17_SR
 
	`TIM_SR
(
TIM17
)

	)

175 
	#TIM_EGR
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x14)

	)

176 
	#TIM1_EGR
 
	`TIM_EGR
(
TIM1
)

	)

177 
	#TIM2_EGR
 
	`TIM_EGR
(
TIM2
)

	)

178 
	#TIM3_EGR
 
	`TIM_EGR
(
TIM3
)

	)

179 
	#TIM4_EGR
 
	`TIM_EGR
(
TIM4
)

	)

180 
	#TIM5_EGR
 
	`TIM_EGR
(
TIM5
)

	)

181 
	#TIM6_EGR
 
	`TIM_EGR
(
TIM6
)

	)

182 
	#TIM7_EGR
 
	`TIM_EGR
(
TIM7
)

	)

183 
	#TIM8_EGR
 
	`TIM_EGR
(
TIM8
)

	)

184 
	#TIM9_EGR
 
	`TIM_EGR
(
TIM9
)

	)

185 
	#TIM10_EGR
 
	`TIM_EGR
(
TIM10
)

	)

186 
	#TIM11_EGR
 
	`TIM_EGR
(
TIM11
)

	)

187 
	#TIM12_EGR
 
	`TIM_EGR
(
TIM12
)

	)

188 
	#TIM13_EGR
 
	`TIM_EGR
(
TIM13
)

	)

189 
	#TIM14_EGR
 
	`TIM_EGR
(
TIM14
)

	)

190 
	#TIM15_EGR
 
	`TIM_EGR
(
TIM15
)

	)

191 
	#TIM16_EGR
 
	`TIM_EGR
(
TIM16
)

	)

192 
	#TIM17_EGR
 
	`TIM_EGR
(
TIM17
)

	)

195 
	#TIM_CCMR1
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x18)

	)

196 
	#TIM1_CCMR1
 
	`TIM_CCMR1
(
TIM1
)

	)

197 
	#TIM2_CCMR1
 
	`TIM_CCMR1
(
TIM2
)

	)

198 
	#TIM3_CCMR1
 
	`TIM_CCMR1
(
TIM3
)

	)

199 
	#TIM4_CCMR1
 
	`TIM_CCMR1
(
TIM4
)

	)

200 
	#TIM5_CCMR1
 
	`TIM_CCMR1
(
TIM5
)

	)

201 
	#TIM8_CCMR1
 
	`TIM_CCMR1
(
TIM8
)

	)

202 
	#TIM9_CCMR1
 
	`TIM_CCMR1
(
TIM9
)

	)

203 
	#TIM10_CCMR1
 
	`TIM_CCMR1
(
TIM10
)

	)

204 
	#TIM11_CCMR1
 
	`TIM_CCMR1
(
TIM11
)

	)

205 
	#TIM12_CCMR1
 
	`TIM_CCMR1
(
TIM12
)

	)

206 
	#TIM13_CCMR1
 
	`TIM_CCMR1
(
TIM13
)

	)

207 
	#TIM14_CCMR1
 
	`TIM_CCMR1
(
TIM14
)

	)

208 
	#TIM15_CCMR1
 
	`TIM_CCMR1
(
TIM15
)

	)

209 
	#TIM16_CCMR1
 
	`TIM_CCMR1
(
TIM16
)

	)

210 
	#TIM17_CCMR1
 
	`TIM_CCMR1
(
TIM17
)

	)

213 
	#TIM_CCMR2
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x1C)

	)

214 
	#TIM1_CCMR2
 
	`TIM_CCMR2
(
TIM1
)

	)

215 
	#TIM2_CCMR2
 
	`TIM_CCMR2
(
TIM2
)

	)

216 
	#TIM3_CCMR2
 
	`TIM_CCMR2
(
TIM3
)

	)

217 
	#TIM4_CCMR2
 
	`TIM_CCMR2
(
TIM4
)

	)

218 
	#TIM5_CCMR2
 
	`TIM_CCMR2
(
TIM5
)

	)

219 
	#TIM8_CCMR2
 
	`TIM_CCMR2
(
TIM8
)

	)

222 
	#TIM_CCER
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x20)

	)

223 
	#TIM1_CCER
 
	`TIM_CCER
(
TIM1
)

	)

224 
	#TIM2_CCER
 
	`TIM_CCER
(
TIM2
)

	)

225 
	#TIM3_CCER
 
	`TIM_CCER
(
TIM3
)

	)

226 
	#TIM4_CCER
 
	`TIM_CCER
(
TIM4
)

	)

227 
	#TIM5_CCER
 
	`TIM_CCER
(
TIM5
)

	)

228 
	#TIM8_CCER
 
	`TIM_CCER
(
TIM8
)

	)

229 
	#TIM9_CCER
 
	`TIM_CCER
(
TIM9
)

	)

230 
	#TIM10_CCER
 
	`TIM_CCER
(
TIM10
)

	)

231 
	#TIM11_CCER
 
	`TIM_CCER
(
TIM11
)

	)

232 
	#TIM12_CCER
 
	`TIM_CCER
(
TIM12
)

	)

233 
	#TIM13_CCER
 
	`TIM_CCER
(
TIM13
)

	)

234 
	#TIM14_CCER
 
	`TIM_CCER
(
TIM14
)

	)

235 
	#TIM15_CCER
 
	`TIM_CCER
(
TIM15
)

	)

236 
	#TIM16_CCER
 
	`TIM_CCER
(
TIM16
)

	)

237 
	#TIM17_CCER
 
	`TIM_CCER
(
TIM17
)

	)

240 
	#TIM_CNT
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x24)

	)

241 
	#TIM1_CNT
 
	`TIM_CNT
(
TIM1
)

	)

242 
	#TIM2_CNT
 
	`TIM_CNT
(
TIM2
)

	)

243 
	#TIM3_CNT
 
	`TIM_CNT
(
TIM3
)

	)

244 
	#TIM4_CNT
 
	`TIM_CNT
(
TIM4
)

	)

245 
	#TIM5_CNT
 
	`TIM_CNT
(
TIM5
)

	)

246 
	#TIM6_CNT
 
	`TIM_CNT
(
TIM6
)

	)

247 
	#TIM7_CNT
 
	`TIM_CNT
(
TIM7
)

	)

248 
	#TIM8_CNT
 
	`TIM_CNT
(
TIM8
)

	)

249 
	#TIM9_CNT
 
	`TIM_CNT
(
TIM9
)

	)

250 
	#TIM10_CNT
 
	`TIM_CNT
(
TIM10
)

	)

251 
	#TIM11_CNT
 
	`TIM_CNT
(
TIM11
)

	)

252 
	#TIM12_CNT
 
	`TIM_CNT
(
TIM12
)

	)

253 
	#TIM13_CNT
 
	`TIM_CNT
(
TIM13
)

	)

254 
	#TIM14_CNT
 
	`TIM_CNT
(
TIM14
)

	)

255 
	#TIM15_CNT
 
	`TIM_CNT
(
TIM15
)

	)

256 
	#TIM16_CNT
 
	`TIM_CNT
(
TIM16
)

	)

257 
	#TIM17_CNT
 
	`TIM_CNT
(
TIM17
)

	)

260 
	#TIM_PSC
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x28)

	)

261 
	#TIM1_PSC
 
	`TIM_PSC
(
TIM1
)

	)

262 
	#TIM2_PSC
 
	`TIM_PSC
(
TIM2
)

	)

263 
	#TIM3_PSC
 
	`TIM_PSC
(
TIM3
)

	)

264 
	#TIM4_PSC
 
	`TIM_PSC
(
TIM4
)

	)

265 
	#TIM5_PSC
 
	`TIM_PSC
(
TIM5
)

	)

266 
	#TIM6_PSC
 
	`TIM_PSC
(
TIM6
)

	)

267 
	#TIM7_PSC
 
	`TIM_PSC
(
TIM7
)

	)

268 
	#TIM8_PSC
 
	`TIM_PSC
(
TIM8
)

	)

269 
	#TIM9_PSC
 
	`TIM_PSC
(
TIM9
)

	)

270 
	#TIM10_PSC
 
	`TIM_PSC
(
TIM10
)

	)

271 
	#TIM11_PSC
 
	`TIM_PSC
(
TIM11
)

	)

272 
	#TIM12_PSC
 
	`TIM_PSC
(
TIM12
)

	)

273 
	#TIM13_PSC
 
	`TIM_PSC
(
TIM13
)

	)

274 
	#TIM14_PSC
 
	`TIM_PSC
(
TIM14
)

	)

275 
	#TIM15_PSC
 
	`TIM_PSC
(
TIM15
)

	)

276 
	#TIM16_PSC
 
	`TIM_PSC
(
TIM16
)

	)

277 
	#TIM17_PSC
 
	`TIM_PSC
(
TIM17
)

	)

280 
	#TIM_ARR
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x2C)

	)

281 
	#TIM1_ARR
 
	`TIM_ARR
(
TIM1
)

	)

282 
	#TIM2_ARR
 
	`TIM_ARR
(
TIM2
)

	)

283 
	#TIM3_ARR
 
	`TIM_ARR
(
TIM3
)

	)

284 
	#TIM4_ARR
 
	`TIM_ARR
(
TIM4
)

	)

285 
	#TIM5_ARR
 
	`TIM_ARR
(
TIM5
)

	)

286 
	#TIM6_ARR
 
	`TIM_ARR
(
TIM6
)

	)

287 
	#TIM7_ARR
 
	`TIM_ARR
(
TIM7
)

	)

288 
	#TIM8_ARR
 
	`TIM_ARR
(
TIM8
)

	)

289 
	#TIM9_ARR
 
	`TIM_ARR
(
TIM9
)

	)

290 
	#TIM10_ARR
 
	`TIM_ARR
(
TIM10
)

	)

291 
	#TIM11_ARR
 
	`TIM_ARR
(
TIM11
)

	)

292 
	#TIM12_ARR
 
	`TIM_ARR
(
TIM12
)

	)

293 
	#TIM13_ARR
 
	`TIM_ARR
(
TIM13
)

	)

294 
	#TIM14_ARR
 
	`TIM_ARR
(
TIM14
)

	)

295 
	#TIM15_ARR
 
	`TIM_ARR
(
TIM15
)

	)

296 
	#TIM16_ARR
 
	`TIM_ARR
(
TIM16
)

	)

297 
	#TIM17_ARR
 
	`TIM_ARR
(
TIM17
)

	)

300 
	#TIM_RCR
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x30)

	)

301 
	#TIM1_RCR
 
	`TIM_RCR
(
TIM1
)

	)

302 
	#TIM8_RCR
 
	`TIM_RCR
(
TIM8
)

	)

303 
	#TIM15_RCR
 
	`TIM_RCR
(
TIM15
)

	)

304 
	#TIM16_RCR
 
	`TIM_RCR
(
TIM16
)

	)

305 
	#TIM17_RCR
 
	`TIM_RCR
(
TIM17
)

	)

308 
	#TIM_CCR1
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x34)

	)

309 
	#TIM1_CCR1
 
	`TIM_CCR1
(
TIM1
)

	)

310 
	#TIM2_CCR1
 
	`TIM_CCR1
(
TIM2
)

	)

311 
	#TIM3_CCR1
 
	`TIM_CCR1
(
TIM3
)

	)

312 
	#TIM4_CCR1
 
	`TIM_CCR1
(
TIM4
)

	)

313 
	#TIM5_CCR1
 
	`TIM_CCR1
(
TIM5
)

	)

314 
	#TIM8_CCR1
 
	`TIM_CCR1
(
TIM8
)

	)

315 
	#TIM9_CCR1
 
	`TIM_CCR1
(
TIM9
)

	)

316 
	#TIM10_CCR1
 
	`TIM_CCR1
(
TIM10
)

	)

317 
	#TIM11_CCR1
 
	`TIM_CCR1
(
TIM11
)

	)

318 
	#TIM12_CCR1
 
	`TIM_CCR1
(
TIM12
)

	)

319 
	#TIM13_CCR1
 
	`TIM_CCR1
(
TIM13
)

	)

320 
	#TIM14_CCR1
 
	`TIM_CCR1
(
TIM14
)

	)

321 
	#TIM15_CCR1
 
	`TIM_CCR1
(
TIM15
)

	)

322 
	#TIM16_CCR1
 
	`TIM_CCR1
(
TIM16
)

	)

323 
	#TIM17_CCR1
 
	`TIM_CCR1
(
TIM17
)

	)

326 
	#TIM_CCR2
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x38)

	)

327 
	#TIM1_CCR2
 
	`TIM_CCR2
(
TIM1
)

	)

328 
	#TIM2_CCR2
 
	`TIM_CCR2
(
TIM2
)

	)

329 
	#TIM3_CCR2
 
	`TIM_CCR2
(
TIM3
)

	)

330 
	#TIM4_CCR2
 
	`TIM_CCR2
(
TIM4
)

	)

331 
	#TIM5_CCR2
 
	`TIM_CCR2
(
TIM5
)

	)

332 
	#TIM8_CCR2
 
	`TIM_CCR2
(
TIM8
)

	)

333 
	#TIM9_CCR2
 
	`TIM_CCR2
(
TIM9
)

	)

334 
	#TIM12_CCR2
 
	`TIM_CCR2
(
TIM12
)

	)

335 
	#TIM15_CCR2
 
	`TIM_CCR2
(
TIM15
)

	)

338 
	#TIM_CCR3
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x3C)

	)

339 
	#TIM1_CCR3
 
	`TIM_CCR3
(
TIM1
)

	)

340 
	#TIM2_CCR3
 
	`TIM_CCR3
(
TIM2
)

	)

341 
	#TIM3_CCR3
 
	`TIM_CCR3
(
TIM3
)

	)

342 
	#TIM4_CCR3
 
	`TIM_CCR3
(
TIM4
)

	)

343 
	#TIM5_CCR3
 
	`TIM_CCR3
(
TIM5
)

	)

344 
	#TIM8_CCR3
 
	`TIM_CCR3
(
TIM8
)

	)

347 
	#TIM_CCR4
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x40)

	)

348 
	#TIM1_CCR4
 
	`TIM_CCR4
(
TIM1
)

	)

349 
	#TIM2_CCR4
 
	`TIM_CCR4
(
TIM2
)

	)

350 
	#TIM3_CCR4
 
	`TIM_CCR4
(
TIM3
)

	)

351 
	#TIM4_CCR4
 
	`TIM_CCR4
(
TIM4
)

	)

352 
	#TIM5_CCR4
 
	`TIM_CCR4
(
TIM5
)

	)

353 
	#TIM8_CCR4
 
	`TIM_CCR4
(
TIM8
)

	)

356 
	#TIM_BDTR
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x44)

	)

357 
	#TIM1_BDTR
 
	`TIM_BDTR
(
TIM1
)

	)

358 
	#TIM8_BDTR
 
	`TIM_BDTR
(
TIM8
)

	)

359 
	#TIM15_BDTR
 
	`TIM_BDTR
(
TIM15
)

	)

360 
	#TIM16_BDTR
 
	`TIM_BDTR
(
TIM16
)

	)

361 
	#TIM17_BDTR
 
	`TIM_BDTR
(
TIM17
)

	)

364 
	#TIM_DCR
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x48)

	)

365 
	#TIM1_DCR
 
	`TIM_DCR
(
TIM1
)

	)

366 
	#TIM2_DCR
 
	`TIM_DCR
(
TIM2
)

	)

367 
	#TIM3_DCR
 
	`TIM_DCR
(
TIM3
)

	)

368 
	#TIM4_DCR
 
	`TIM_DCR
(
TIM4
)

	)

369 
	#TIM5_DCR
 
	`TIM_DCR
(
TIM5
)

	)

370 
	#TIM8_DCR
 
	`TIM_DCR
(
TIM8
)

	)

371 
	#TIM15_DCR
 
	`TIM_DCR
(
TIM15
)

	)

372 
	#TIM16_DCR
 
	`TIM_DCR
(
TIM16
)

	)

373 
	#TIM17_DCR
 
	`TIM_DCR
(
TIM17
)

	)

376 
	#TIM_DMAR
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x4C)

	)

377 
	#TIM1_DMAR
 
	`TIM_DMAR
(
TIM1
)

	)

378 
	#TIM2_DMAR
 
	`TIM_DMAR
(
TIM2
)

	)

379 
	#TIM3_DMAR
 
	`TIM_DMAR
(
TIM3
)

	)

380 
	#TIM4_DMAR
 
	`TIM_DMAR
(
TIM4
)

	)

381 
	#TIM5_DMAR
 
	`TIM_DMAR
(
TIM5
)

	)

382 
	#TIM8_DMAR
 
	`TIM_DMAR
(
TIM8
)

	)

383 
	#TIM15_DMAR
 
	`TIM_DMAR
(
TIM15
)

	)

384 
	#TIM16_DMAR
 
	`TIM_DMAR
(
TIM16
)

	)

385 
	#TIM17_DMAR
 
	`TIM_DMAR
(
TIM17
)

	)

395 
	#TIM_CR1_CKD_CK_INT
 (0x0 << 8)

	)

396 
	#TIM_CR1_CKD_CK_INT_MUL_2
 (0x1 << 8)

	)

397 
	#TIM_CR1_CKD_CK_INT_MUL_4
 (0x2 << 8)

	)

398 
	#TIM_CR1_CKD_CK_INT_MASK
 (0x3 << 8)

	)

402 
	#TIM_CR1_ARPE
 (1 << 7)

	)

410 
	#TIM_CR1_CMS_EDGE
 (0x0 << 5)

	)

411 
	#TIM_CR1_CMS_CENTER_1
 (0x1 << 5)

	)

412 
	#TIM_CR1_CMS_CENTER_2
 (0x2 << 5)

	)

413 
	#TIM_CR1_CMS_CENTER_3
 (0x3 << 5)

	)

414 
	#TIM_CR1_CMS_MASK
 (0x3 << 5)

	)

423 
	#TIM_CR1_DIR_UP
 (0 << 4)

	)

424 
	#TIM_CR1_DIR_DOWN
 (1 << 4)

	)

428 
	#TIM_CR1_OPM
 (1 << 3)

	)

431 
	#TIM_CR1_URS
 (1 << 2)

	)

434 
	#TIM_CR1_UDIS
 (1 << 1)

	)

437 
	#TIM_CR1_CEN
 (1 << 0)

	)

447 
	#TIM_CR2_OIS4
 (1 << 14)

	)

450 
	#TIM_CR2_OIS3N
 (1 << 13)

	)

453 
	#TIM_CR2_OIS3
 (1 << 12)

	)

456 
	#TIM_CR2_OIS2N
 (1 << 11)

	)

459 
	#TIM_CR2_OIS2
 (1 << 10)

	)

462 
	#TIM_CR2_OIS1N
 (1 << 9)

	)

465 
	#TIM_CR2_OIS1
 (1 << 8)

	)

466 
	#TIM_CR2_OIS_MASK
 (0x7‡<< 8)

	)

470 
	#TIM_CR2_TI1S
 (1 << 7)

	)

478 
	#TIM_CR2_MMS_RESET
 (0x0 << 4)

	)

479 
	#TIM_CR2_MMS_ENABLE
 (0x1 << 4)

	)

480 
	#TIM_CR2_MMS_UPDATE
 (0x2 << 4)

	)

481 
	#TIM_CR2_MMS_COMPARE_PULSE
 (0x3 << 4)

	)

482 
	#TIM_CR2_MMS_COMPARE_OC1REF
 (0x4 << 4)

	)

483 
	#TIM_CR2_MMS_COMPARE_OC2REF
 (0x5 << 4)

	)

484 
	#TIM_CR2_MMS_COMPARE_OC3REF
 (0x6 << 4)

	)

485 
	#TIM_CR2_MMS_COMPARE_OC4REF
 (0x7 << 4)

	)

486 
	#TIM_CR2_MMS_MASK
 (0x7 << 4)

	)

490 
	#TIM_CR2_CCDS
 (1 << 3)

	)

493 
	#TIM_CR2_CCUS
 (1 << 2)

	)

496 
	#TIM_CR2_CCPC
 (1 << 0)

	)

501 
	#TIM_SMCR_ETP
 (1 << 15)

	)

504 
	#TIM_SMCR_ECE
 (1 << 14)

	)

507 
	#TIM_SMCR_ETPS_OFF
 (0x0 << 12)

	)

508 
	#TIM_SMCR_ETPS_ETRP_DIV_2
 (0x1 << 12)

	)

509 
	#TIM_SMCR_ETPS_ETRP_DIV_4
 (0x2 << 12)

	)

510 
	#TIM_SMCR_ETPS_ETRP_DIV_8
 (0x3 << 12)

	)

511 
	#TIM_SMCR_ETPS_MASK
 (0X3 << 12)

	)

514 
	#TIM_SMCR_ETF_OFF
 (0x0 << 8)

	)

515 
	#TIM_SMCR_ETF_CK_INT_N_2
 (0x1 << 8)

	)

516 
	#TIM_SMCR_ETF_CK_INT_N_4
 (0x2 << 8)

	)

517 
	#TIM_SMCR_ETF_CK_INT_N_8
 (0x3 << 8)

	)

518 
	#TIM_SMCR_ETF_DTS_DIV_2_N_6
 (0x4 << 8)

	)

519 
	#TIM_SMCR_ETF_DTS_DIV_2_N_8
 (0x5 << 8)

	)

520 
	#TIM_SMCR_ETF_DTS_DIV_4_N_6
 (0x6 << 8)

	)

521 
	#TIM_SMCR_ETF_DTS_DIV_4_N_8
 (0x7 << 8)

	)

522 
	#TIM_SMCR_ETF_DTS_DIV_8_N_6
 (0x8 << 8)

	)

523 
	#TIM_SMCR_ETF_DTS_DIV_8_N_8
 (0x9 << 8)

	)

524 
	#TIM_SMCR_ETF_DTS_DIV_16_N_5
 (0xA << 8)

	)

525 
	#TIM_SMCR_ETF_DTS_DIV_16_N_6
 (0xB << 8)

	)

526 
	#TIM_SMCR_ETF_DTS_DIV_16_N_8
 (0xC << 8)

	)

527 
	#TIM_SMCR_ETF_DTS_DIV_32_N_5
 (0xD << 8)

	)

528 
	#TIM_SMCR_ETF_DTS_DIV_32_N_6
 (0xE << 8)

	)

529 
	#TIM_SMCR_ETF_DTS_DIV_32_N_8
 (0xF << 8)

	)

530 
	#TIM_SMCR_ETF_MASK
 (0xF << 8)

	)

533 
	#TIM_SMCR_MSM
 (1 << 7)

	)

541 
	#TIM_SMCR_TS_ITR0
 (0x0 << 4)

	)

543 
	#TIM_SMCR_TS_ITR1
 (0x1 << 4)

	)

545 
	#TIM_SMCR_TS_ITR2
 (0x2 << 4)

	)

547 
	#TIM_SMCR_TS_ITR3
 (0x3 << 4)

	)

549 
	#TIM_SMCR_TS_TI1F_ED
 (0x4 << 4)

	)

551 
	#TIM_SMCR_TS_TI1FP1
 (0x5 << 4)

	)

553 
	#TIM_SMCR_TS_TI2FP2
 (0x6 << 4)

	)

555 
	#TIM_SMCR_TS_ETRF
 (0x7 << 4)

	)

556 
	#TIM_SMCR_TS_MASK
 (0x7 << 4)

	)

565 
	#TIM_SMCR_SMS_OFF
 (0x0 << 0)

	)

568 
	#TIM_SMCR_SMS_EM1
 (0x1 << 0)

	)

571 
	#TIM_SMCR_SMS_EM2
 (0x2 << 0)

	)

574 
	#TIM_SMCR_SMS_EM3
 (0x3 << 0)

	)

578 
	#TIM_SMCR_SMS_RM
 (0x4 << 0)

	)

582 
	#TIM_SMCR_SMS_GM
 (0x5 << 0)

	)

584 
	#TIM_SMCR_SMS_TM
 (0x6 << 0)

	)

588 
	#TIM_SMCR_SMS_ECM1
 (0x7 << 0)

	)

589 
	#TIM_SMCR_SMS_MASK
 (0x7 << 0)

	)

600 
	#TIM_DIER_TDE
 (1 << 14)

	)

603 
	#TIM_DIER_COMDE
 (1 << 13)

	)

606 
	#TIM_DIER_CC4DE
 (1 << 12)

	)

609 
	#TIM_DIER_CC3DE
 (1 << 11)

	)

612 
	#TIM_DIER_CC2DE
 (1 << 10)

	)

615 
	#TIM_DIER_CC1DE
 (1 << 9)

	)

618 
	#TIM_DIER_UDE
 (1 << 8)

	)

621 
	#TIM_DIER_BIE
 (1 << 7)

	)

624 
	#TIM_DIER_TIE
 (1 << 6)

	)

627 
	#TIM_DIER_COMIE
 (1 << 5)

	)

630 
	#TIM_DIER_CC4IE
 (1 << 4)

	)

633 
	#TIM_DIER_CC3IE
 (1 << 3)

	)

636 
	#TIM_DIER_CC2IE
 (1 << 2)

	)

639 
	#TIM_DIER_CC1IE
 (1 << 1)

	)

642 
	#TIM_DIER_UIE
 (1 << 0)

	)

653 
	#TIM_SR_CC4OF
 (1 << 12)

	)

656 
	#TIM_SR_CC3OF
 (1 << 11)

	)

659 
	#TIM_SR_CC2OF
 (1 << 10)

	)

662 
	#TIM_SR_CC1OF
 (1 << 9)

	)

665 
	#TIM_SR_BIF
 (1 << 7)

	)

668 
	#TIM_SR_TIF
 (1 << 6)

	)

671 
	#TIM_SR_COMIF
 (1 << 5)

	)

674 
	#TIM_SR_CC4IF
 (1 << 4)

	)

677 
	#TIM_SR_CC3IF
 (1 << 3)

	)

680 
	#TIM_SR_CC2IF
 (1 << 2)

	)

683 
	#TIM_SR_CC1IF
 (1 << 1)

	)

686 
	#TIM_SR_UIF
 (1 << 0)

	)

698 
	#TIM_EGR_BG
 (1 << 7)

	)

701 
	#TIM_EGR_TG
 (1 << 6)

	)

704 
	#TIM_EGR_COMG
 (1 << 5)

	)

707 
	#TIM_EGR_CC4G
 (1 << 4)

	)

710 
	#TIM_EGR_CC3G
 (1 << 3)

	)

713 
	#TIM_EGR_CC2G
 (1 << 2)

	)

716 
	#TIM_EGR_CC1G
 (1 << 1)

	)

719 
	#TIM_EGR_UG
 (1 << 0)

	)

727 
	#TIM_CCMR1_OC2CE
 (1 << 15)

	)

730 
	#TIM_CCMR1_OC2M_FROZEN
 (0x0 << 12)

	)

731 
	#TIM_CCMR1_OC2M_ACTIVE
 (0x1 << 12)

	)

732 
	#TIM_CCMR1_OC2M_INACTIVE
 (0x2 << 12)

	)

733 
	#TIM_CCMR1_OC2M_TOGGLE
 (0x3 << 12)

	)

734 
	#TIM_CCMR1_OC2M_FORCE_LOW
 (0x4 << 12)

	)

735 
	#TIM_CCMR1_OC2M_FORCE_HIGH
 (0x5 << 12)

	)

736 
	#TIM_CCMR1_OC2M_PWM1
 (0x6 << 12)

	)

737 
	#TIM_CCMR1_OC2M_PWM2
 (0x7 << 12)

	)

738 
	#TIM_CCMR1_OC2M_MASK
 (0x7 << 12)

	)

741 
	#TIM_CCMR1_OC2PE
 (1 << 11)

	)

744 
	#TIM_CCMR1_OC2FE
 (1 << 10)

	)

749 
	#TIM_CCMR1_CC2S_OUT
 (0x0 << 8)

	)

750 
	#TIM_CCMR1_CC2S_IN_TI2
 (0x1 << 8)

	)

751 
	#TIM_CCMR1_CC2S_IN_TI1
 (0x2 << 8)

	)

752 
	#TIM_CCMR1_CC2S_IN_TRC
 (0x3 << 8)

	)

753 
	#TIM_CCMR1_CC2S_MASK
 (0x3 << 8)

	)

756 
	#TIM_CCMR1_OC1CE
 (1 << 7)

	)

759 
	#TIM_CCMR1_OC1M_FROZEN
 (0x0 << 4)

	)

760 
	#TIM_CCMR1_OC1M_ACTIVE
 (0x1 << 4)

	)

761 
	#TIM_CCMR1_OC1M_INACTIVE
 (0x2 << 4)

	)

762 
	#TIM_CCMR1_OC1M_TOGGLE
 (0x3 << 4)

	)

763 
	#TIM_CCMR1_OC1M_FORCE_LOW
 (0x4 << 4)

	)

764 
	#TIM_CCMR1_OC1M_FORCE_HIGH
 (0x5 << 4)

	)

765 
	#TIM_CCMR1_OC1M_PWM1
 (0x6 << 4)

	)

766 
	#TIM_CCMR1_OC1M_PWM2
 (0x7 << 4)

	)

767 
	#TIM_CCMR1_OC1M_MASK
 (0x7 << 4)

	)

770 
	#TIM_CCMR1_OC1PE
 (1 << 3)

	)

773 
	#TIM_CCMR1_OC1FE
 (1 << 2)

	)

778 
	#TIM_CCMR1_CC1S_OUT
 (0x0 << 0)

	)

779 
	#TIM_CCMR1_CC1S_IN_TI2
 (0x2 << 0)

	)

780 
	#TIM_CCMR1_CC1S_IN_TI1
 (0x1 << 0)

	)

781 
	#TIM_CCMR1_CC1S_IN_TRC
 (0x3 << 0)

	)

782 
	#TIM_CCMR1_CC1S_MASK
 (0x3 << 0)

	)

787 
	#TIM_CCMR1_IC2F_OFF
 (0x0 << 12)

	)

788 
	#TIM_CCMR1_IC2F_CK_INT_N_2
 (0x1 << 12)

	)

789 
	#TIM_CCMR1_IC2F_CK_INT_N_4
 (0x2 << 12)

	)

790 
	#TIM_CCMR1_IC2F_CK_INT_N_8
 (0x3 << 12)

	)

791 
	#TIM_CCMR1_IC2F_DTF_DIV_2_N_6
 (0x4 << 12)

	)

792 
	#TIM_CCMR1_IC2F_DTF_DIV_2_N_8
 (0x5 << 12)

	)

793 
	#TIM_CCMR1_IC2F_DTF_DIV_4_N_6
 (0x6 << 12)

	)

794 
	#TIM_CCMR1_IC2F_DTF_DIV_4_N_8
 (0x7 << 12)

	)

795 
	#TIM_CCMR1_IC2F_DTF_DIV_8_N_6
 (0x8 << 12)

	)

796 
	#TIM_CCMR1_IC2F_DTF_DIV_8_N_8
 (0x9 << 12)

	)

797 
	#TIM_CCMR1_IC2F_DTF_DIV_16_N_5
 (0xA << 12)

	)

798 
	#TIM_CCMR1_IC2F_DTF_DIV_16_N_6
 (0xB << 12)

	)

799 
	#TIM_CCMR1_IC2F_DTF_DIV_16_N_8
 (0xC << 12)

	)

800 
	#TIM_CCMR1_IC2F_DTF_DIV_32_N_5
 (0xD << 12)

	)

801 
	#TIM_CCMR1_IC2F_DTF_DIV_32_N_6
 (0xE << 12)

	)

802 
	#TIM_CCMR1_IC2F_DTF_DIV_32_N_8
 (0xF << 12)

	)

803 
	#TIM_CCMR1_IC2F_MASK
 (0xF << 12)

	)

806 
	#TIM_CCMR1_IC2PSC_OFF
 (0x0 << 10)

	)

807 
	#TIM_CCMR1_IC2PSC_2
 (0x1 << 10)

	)

808 
	#TIM_CCMR1_IC2PSC_4
 (0x2 << 10)

	)

809 
	#TIM_CCMR1_IC2PSC_8
 (0x3 << 10)

	)

810 
	#TIM_CCMR1_IC2PSC_MASK
 (0x3 << 10)

	)

813 
	#TIM_CCMR1_IC1F_OFF
 (0x0 << 4)

	)

814 
	#TIM_CCMR1_IC1F_CK_INT_N_2
 (0x1 << 4)

	)

815 
	#TIM_CCMR1_IC1F_CK_INT_N_4
 (0x2 << 4)

	)

816 
	#TIM_CCMR1_IC1F_CK_INT_N_8
 (0x3 << 4)

	)

817 
	#TIM_CCMR1_IC1F_DTF_DIV_2_N_6
 (0x4 << 4)

	)

818 
	#TIM_CCMR1_IC1F_DTF_DIV_2_N_8
 (0x5 << 4)

	)

819 
	#TIM_CCMR1_IC1F_DTF_DIV_4_N_6
 (0x6 << 4)

	)

820 
	#TIM_CCMR1_IC1F_DTF_DIV_4_N_8
 (0x7 << 4)

	)

821 
	#TIM_CCMR1_IC1F_DTF_DIV_8_N_6
 (0x8 << 4)

	)

822 
	#TIM_CCMR1_IC1F_DTF_DIV_8_N_8
 (0x9 << 4)

	)

823 
	#TIM_CCMR1_IC1F_DTF_DIV_16_N_5
 (0xA << 4)

	)

824 
	#TIM_CCMR1_IC1F_DTF_DIV_16_N_6
 (0xB << 4)

	)

825 
	#TIM_CCMR1_IC1F_DTF_DIV_16_N_8
 (0xC << 4)

	)

826 
	#TIM_CCMR1_IC1F_DTF_DIV_32_N_5
 (0xD << 4)

	)

827 
	#TIM_CCMR1_IC1F_DTF_DIV_32_N_6
 (0xE << 4)

	)

828 
	#TIM_CCMR1_IC1F_DTF_DIV_32_N_8
 (0xF << 4)

	)

829 
	#TIM_CCMR1_IC1F_MASK
 (0xF << 4)

	)

832 
	#TIM_CCMR1_IC1PSC_OFF
 (0x0 << 2)

	)

833 
	#TIM_CCMR1_IC1PSC_2
 (0x1 << 2)

	)

834 
	#TIM_CCMR1_IC1PSC_4
 (0x2 << 2)

	)

835 
	#TIM_CCMR1_IC1PSC_8
 (0x3 << 2)

	)

836 
	#TIM_CCMR1_IC1PSC_MASK
 (0x3 << 2)

	)

843 
	#TIM_CCMR2_OC4CE
 (1 << 15)

	)

846 
	#TIM_CCMR2_OC4M_FROZEN
 (0x0 << 12)

	)

847 
	#TIM_CCMR2_OC4M_ACTIVE
 (0x1 << 12)

	)

848 
	#TIM_CCMR2_OC4M_INACTIVE
 (0x2 << 12)

	)

849 
	#TIM_CCMR2_OC4M_TOGGLE
 (0x3 << 12)

	)

850 
	#TIM_CCMR2_OC4M_FORCE_LOW
 (0x4 << 12)

	)

851 
	#TIM_CCMR2_OC4M_FORCE_HIGH
 (0x5 << 12)

	)

852 
	#TIM_CCMR2_OC4M_PWM1
 (0x6 << 12)

	)

853 
	#TIM_CCMR2_OC4M_PWM2
 (0x7 << 12)

	)

854 
	#TIM_CCMR2_OC4M_MASK
 (0x7 << 12)

	)

857 
	#TIM_CCMR2_OC4PE
 (1 << 11)

	)

860 
	#TIM_CCMR2_OC4FE
 (1 << 10)

	)

865 
	#TIM_CCMR2_CC4S_OUT
 (0x0 << 8)

	)

866 
	#TIM_CCMR2_CC4S_IN_TI2
 (0x1 << 8)

	)

867 
	#TIM_CCMR2_CC4S_IN_TI1
 (0x2 << 8)

	)

868 
	#TIM_CCMR2_CC4S_IN_TRC
 (0x3 << 8)

	)

869 
	#TIM_CCMR2_CC4S_MASK
 (0x3 << 8)

	)

872 
	#TIM_CCMR2_OC3CE
 (1 << 7)

	)

875 
	#TIM_CCMR2_OC3M_FROZEN
 (0x0 << 4)

	)

876 
	#TIM_CCMR2_OC3M_ACTIVE
 (0x1 << 4)

	)

877 
	#TIM_CCMR2_OC3M_INACTIVE
 (0x2 << 4)

	)

878 
	#TIM_CCMR2_OC3M_TOGGLE
 (0x3 << 4)

	)

879 
	#TIM_CCMR2_OC3M_FORCE_LOW
 (0x4 << 4)

	)

880 
	#TIM_CCMR2_OC3M_FORCE_HIGH
 (0x5 << 4)

	)

881 
	#TIM_CCMR2_OC3M_PWM1
 (0x6 << 4)

	)

882 
	#TIM_CCMR2_OC3M_PWM2
 (0x7 << 4)

	)

883 
	#TIM_CCMR2_OC3M_MASK
 (0x7 << 4)

	)

886 
	#TIM_CCMR2_OC3PE
 (1 << 3)

	)

889 
	#TIM_CCMR2_OC3FE
 (1 << 2)

	)

894 
	#TIM_CCMR2_CC3S_OUT
 (0x0 << 0)

	)

895 
	#TIM_CCMR2_CC3S_IN_TI2
 (0x1 << 0)

	)

896 
	#TIM_CCMR2_CC3S_IN_TI1
 (0x2 << 0)

	)

897 
	#TIM_CCMR2_CC3S_IN_TRC
 (0x3 << 0)

	)

898 
	#TIM_CCMR2_CC3S_MASK
 (0x3 << 0)

	)

903 
	#TIM_CCMR2_IC4F_OFF
 (0x0 << 12)

	)

904 
	#TIM_CCMR2_IC4F_CK_INT_N_2
 (0x1 << 12)

	)

905 
	#TIM_CCMR2_IC4F_CK_INT_N_4
 (0x2 << 12)

	)

906 
	#TIM_CCMR2_IC4F_CK_INT_N_8
 (0x3 << 12)

	)

907 
	#TIM_CCMR2_IC4F_DTF_DIV_2_N_6
 (0x4 << 12)

	)

908 
	#TIM_CCMR2_IC4F_DTF_DIV_2_N_8
 (0x5 << 12)

	)

909 
	#TIM_CCMR2_IC4F_DTF_DIV_4_N_6
 (0x6 << 12)

	)

910 
	#TIM_CCMR2_IC4F_DTF_DIV_4_N_8
 (0x7 << 12)

	)

911 
	#TIM_CCMR2_IC4F_DTF_DIV_8_N_6
 (0x8 << 12)

	)

912 
	#TIM_CCMR2_IC4F_DTF_DIV_8_N_8
 (0x9 << 12)

	)

913 
	#TIM_CCMR2_IC4F_DTF_DIV_16_N_5
 (0xA << 12)

	)

914 
	#TIM_CCMR2_IC4F_DTF_DIV_16_N_6
 (0xB << 12)

	)

915 
	#TIM_CCMR2_IC4F_DTF_DIV_16_N_8
 (0xC << 12)

	)

916 
	#TIM_CCMR2_IC4F_DTF_DIV_32_N_5
 (0xD << 12)

	)

917 
	#TIM_CCMR2_IC4F_DTF_DIV_32_N_6
 (0xE << 12)

	)

918 
	#TIM_CCMR2_IC4F_DTF_DIV_32_N_8
 (0xF << 12)

	)

919 
	#TIM_CCMR2_IC4F_MASK
 (0xF << 12)

	)

922 
	#TIM_CCMR2_IC4PSC_OFF
 (0x0 << 10)

	)

923 
	#TIM_CCMR2_IC4PSC_2
 (0x1 << 10)

	)

924 
	#TIM_CCMR2_IC4PSC_4
 (0x2 << 10)

	)

925 
	#TIM_CCMR2_IC4PSC_8
 (0x3 << 10)

	)

926 
	#TIM_CCMR2_IC4PSC_MASK
 (0x3 << 10)

	)

929 
	#TIM_CCMR2_IC3F_OFF
 (0x0 << 4)

	)

930 
	#TIM_CCMR2_IC3F_CK_INT_N_2
 (0x1 << 4)

	)

931 
	#TIM_CCMR2_IC3F_CK_INT_N_4
 (0x2 << 4)

	)

932 
	#TIM_CCMR2_IC3F_CK_INT_N_8
 (0x3 << 4)

	)

933 
	#TIM_CCMR2_IC3F_DTF_DIV_2_N_6
 (0x4 << 4)

	)

934 
	#TIM_CCMR2_IC3F_DTF_DIV_2_N_8
 (0x5 << 4)

	)

935 
	#TIM_CCMR2_IC3F_DTF_DIV_4_N_6
 (0x6 << 4)

	)

936 
	#TIM_CCMR2_IC3F_DTF_DIV_4_N_8
 (0x7 << 4)

	)

937 
	#TIM_CCMR2_IC3F_DTF_DIV_8_N_6
 (0x8 << 4)

	)

938 
	#TIM_CCMR2_IC3F_DTF_DIV_8_N_8
 (0x9 << 4)

	)

939 
	#TIM_CCMR2_IC3F_DTF_DIV_16_N_5
 (0xA << 4)

	)

940 
	#TIM_CCMR2_IC3F_DTF_DIV_16_N_6
 (0xB << 4)

	)

941 
	#TIM_CCMR2_IC3F_DTF_DIV_16_N_8
 (0xC << 4)

	)

942 
	#TIM_CCMR2_IC3F_DTF_DIV_32_N_5
 (0xD << 4)

	)

943 
	#TIM_CCMR2_IC3F_DTF_DIV_32_N_6
 (0xE << 4)

	)

944 
	#TIM_CCMR2_IC3F_DTF_DIV_32_N_8
 (0xF << 4)

	)

945 
	#TIM_CCMR2_IC3F_MASK
 (0xF << 4)

	)

948 
	#TIM_CCMR2_IC3PSC_OFF
 (0x0 << 2)

	)

949 
	#TIM_CCMR2_IC3PSC_2
 (0x1 << 2)

	)

950 
	#TIM_CCMR2_IC3PSC_4
 (0x2 << 2)

	)

951 
	#TIM_CCMR2_IC3PSC_8
 (0x3 << 2)

	)

952 
	#TIM_CCMR2_IC3PSC_MASK
 (0x3 << 2)

	)

957 
	#TIM_CCER_CC4P
 (1 << 13)

	)

960 
	#TIM_CCER_CC4E
 (1 << 12)

	)

963 
	#TIM_CCER_CC3NP
 (1 << 11)

	)

966 
	#TIM_CCER_CC3NE
 (1 << 10)

	)

969 
	#TIM_CCER_CC3P
 (1 << 9)

	)

972 
	#TIM_CCER_CC3E
 (1 << 8)

	)

975 
	#TIM_CCER_CC2NP
 (1 << 7)

	)

978 
	#TIM_CCER_CC2NE
 (1 << 6)

	)

981 
	#TIM_CCER_CC2P
 (1 << 5)

	)

984 
	#TIM_CCER_CC2E
 (1 << 4)

	)

987 
	#TIM_CCER_CC1NP
 (1 << 3)

	)

990 
	#TIM_CCER_CC1NE
 (1 << 2)

	)

993 
	#TIM_CCER_CC1P
 (1 << 1)

	)

996 
	#TIM_CCER_CC1E
 (1 << 0)

	)

1033 
	#TIM_BDTR_MOE
 (1 << 15)

	)

1036 
	#TIM_BDTR_AOE
 (1 << 14)

	)

1039 
	#TIM_BDTR_BKP
 (1 << 13)

	)

1042 
	#TIM_BDTR_BKE
 (1 << 12)

	)

1045 
	#TIM_BDTR_OSSR
 (1 << 11)

	)

1048 
	#TIM_BDTR_OSSI
 (1 << 10)

	)

1056 
	#TIM_BDTR_LOCK_OFF
 (0x0 << 8)

	)

1057 
	#TIM_BDTR_LOCK_LEVEL_1
 (0x1 << 8)

	)

1058 
	#TIM_BDTR_LOCK_LEVEL_2
 (0x2 << 8)

	)

1059 
	#TIM_BDTR_LOCK_LEVEL_3
 (0x3 << 8)

	)

1060 
	#TIM_BDTR_LOCK_MASK
 (0x3 << 8)

	)

1064 
	#TIM_BDTR_DTG_MASK
 0x00FF

	)

1069 
	#TIM_BDTR_DBL_MASK
 (0x1F << 8)

	)

1072 
	#TIM_BDTR_DBA_MASK
 (0x1F << 0)

	)

1081 
	etim_oc_id
 {

1082 
	mTIM_OC1
 = 0,

1083 
	mTIM_OC1N
,

1084 
	mTIM_OC2
,

1085 
	mTIM_OC2N
,

1086 
	mTIM_OC3
,

1087 
	mTIM_OC3N
,

1088 
	mTIM_OC4
,

1092 
	etim_oc_mode
 {

1093 
	mTIM_OCM_FROZEN
,

1094 
	mTIM_OCM_ACTIVE
,

1095 
	mTIM_OCM_INACTIVE
,

1096 
	mTIM_OCM_TOGGLE
,

1097 
	mTIM_OCM_FORCE_LOW
,

1098 
	mTIM_OCM_FORCE_HIGH
,

1099 
	mTIM_OCM_PWM1
,

1100 
	mTIM_OCM_PWM2
,

1104 
	etim_ic_id
 {

1105 
	mTIM_IC1
,

1106 
	mTIM_IC2
,

1107 
	mTIM_IC3
,

1108 
	mTIM_IC4
,

1118 
	etim_ic_fûãr
 {

1119 
	mTIM_IC_OFF
,

1120 
	mTIM_IC_CK_INT_N_2
,

1121 
	mTIM_IC_CK_INT_N_4
,

1122 
	mTIM_IC_CK_INT_N_8
,

1123 
	mTIM_IC_DTF_DIV_2_N_6
,

1124 
	mTIM_IC_DTF_DIV_2_N_8
,

1125 
	mTIM_IC_DTF_DIV_4_N_6
,

1126 
	mTIM_IC_DTF_DIV_4_N_8
,

1127 
	mTIM_IC_DTF_DIV_8_N_6
,

1128 
	mTIM_IC_DTF_DIV_8_N_8
,

1129 
	mTIM_IC_DTF_DIV_16_N_5
,

1130 
	mTIM_IC_DTF_DIV_16_N_6
,

1131 
	mTIM_IC_DTF_DIV_16_N_8
,

1132 
	mTIM_IC_DTF_DIV_32_N_5
,

1133 
	mTIM_IC_DTF_DIV_32_N_6
,

1134 
	mTIM_IC_DTF_DIV_32_N_8
,

1140 
	etim_ic_psc
 {

1141 
	mTIM_IC_PSC_OFF
,

1142 
	mTIM_IC_PSC_2
,

1143 
	mTIM_IC_PSC_4
,

1144 
	mTIM_IC_PSC_8
,

1151 
	etim_ic_öput
 {

1152 
	mTIM_IC_OUT
 = 0,

1153 
	mTIM_IC_IN_TI1
 = 1,

1154 
	mTIM_IC_IN_TI2
 = 2,

1155 
	mTIM_IC_IN_TRC
 = 3,

1156 
	mTIM_IC_IN_TI3
 = 5,

1157 
	mTIM_IC_IN_TI4
 = 6,

1161 
	etim_ë_pﬁ
 {

1162 
	mTIM_ET_RISING
,

1163 
	mTIM_ET_FALLING
,

1168 
BEGIN_DECLS


1170 
timî_ª£t
(
uöt32_t
 
timî_≥rùhîÆ
);

1171 
timî_íabÀ_úq
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
úq
);

1172 
timî_dißbÀ_úq
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
úq
);

1173 
boﬁ
 
timî_öãºu±_sour˚
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
Êag
);

1174 
boﬁ
 
timî_gë_Êag
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
Êag
);

1175 
timî_˛ór_Êag
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
Êag
);

1176 
timî_£t_mode
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
˛ock_div
,

1177 
uöt32_t
 
Æignmít
, uöt32_à
dúe˘i⁄
);

1178 
timî_£t_˛ock_divisi⁄
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
˛ock_div
);

1179 
timî_íabÀ_¥ñﬂd
(
uöt32_t
 
timî_≥rùhîÆ
);

1180 
timî_dißbÀ_¥ñﬂd
(
uöt32_t
 
timî_≥rùhîÆ
);

1181 
timî_£t_Æignmít
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
Æignmít
);

1182 
timî_dúe˘i⁄_up
(
uöt32_t
 
timî_≥rùhîÆ
);

1183 
timî_dúe˘i⁄_down
(
uöt32_t
 
timî_≥rùhîÆ
);

1184 
timî_⁄e_shŸ_mode
(
uöt32_t
 
timî_≥rùhîÆ
);

1185 
timî_c⁄töuous_mode
(
uöt32_t
 
timî_≥rùhîÆ
);

1186 
timî_upd©e_⁄_™y
(
uöt32_t
 
timî_≥rùhîÆ
);

1187 
timî_upd©e_⁄_ovîÊow
(
uöt32_t
 
timî_≥rùhîÆ
);

1188 
timî_íabÀ_upd©e_evít
(
uöt32_t
 
timî_≥rùhîÆ
);

1189 
timî_dißbÀ_upd©e_evít
(
uöt32_t
 
timî_≥rùhîÆ
);

1190 
timî_íabÀ_cou¡î
(
uöt32_t
 
timî_≥rùhîÆ
);

1191 
timî_dißbÀ_cou¡î
(
uöt32_t
 
timî_≥rùhîÆ
);

1192 
timî_£t_ouçut_idÀ_°©e
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
ouçuts
);

1193 
timî_ª£t_ouçut_idÀ_°©e
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
ouçuts
);

1194 
timî_£t_ti1_ch123_x‹
(
uöt32_t
 
timî_≥rùhîÆ
);

1195 
timî_£t_ti1_ch1
(
uöt32_t
 
timî_≥rùhîÆ
);

1196 
timî_£t_ma°î_mode
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
mode
);

1197 
timî_£t_dma_⁄_com∑ª_evít
(
uöt32_t
 
timî_≥rùhîÆ
);

1198 
timî_£t_dma_⁄_upd©e_evít
(
uöt32_t
 
timî_≥rùhîÆ
);

1199 
timî_íabÀ_com∑ª_c⁄åﬁ_upd©e_⁄_åiggî
(
uöt32_t
 
timî_≥rùhîÆ
);

1200 
timî_dißbÀ_com∑ª_c⁄åﬁ_upd©e_⁄_åiggî
(
uöt32_t
 
timî_≥rùhîÆ
);

1201 
timî_íabÀ_¥ñﬂd_com∂emíåy_íabÀ_bôs
(
uöt32_t
 
timî_≥rùhîÆ
);

1202 
timî_dißbÀ_¥ñﬂd_com∂emíåy_íabÀ_bôs
(
uöt32_t
 
timî_≥rùhîÆ
);

1203 
timî_£t_¥esˇÀr
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
vÆue
);

1204 
timî_£t_ª≥tôi⁄_cou¡î
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
vÆue
);

1205 
timî_£t_≥riod
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
≥riod
);

1206 
timî_íabÀ_oc_˛ór
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
);

1207 
timî_dißbÀ_oc_˛ór
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
);

1208 
timî_£t_oc_Á°_mode
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
);

1209 
timî_£t_oc_¶ow_mode
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
);

1210 
timî_£t_oc_mode
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
,

1211 
tim_oc_mode
 
oc_mode
);

1212 
timî_íabÀ_oc_¥ñﬂd
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
);

1213 
timî_dißbÀ_oc_¥ñﬂd
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
);

1214 
timî_£t_oc_pﬁ¨ôy_high
(
uöt32_t
 
timî_≥rùhîÆ
,

1215 
tim_oc_id
 
oc_id
);

1216 
timî_£t_oc_pﬁ¨ôy_low
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
);

1217 
timî_íabÀ_oc_ouçut
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
);

1218 
timî_dißbÀ_oc_ouçut
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
);

1219 
timî_£t_oc_idÀ_°©e_£t
(
uöt32_t
 
timî_≥rùhîÆ
,

1220 
tim_oc_id
 
oc_id
);

1221 
timî_£t_oc_idÀ_°©e_un£t
(
uöt32_t
 
timî_≥rùhîÆ
,

1222 
tim_oc_id
 
oc_id
);

1223 
timî_£t_oc_vÆue
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
,

1224 
uöt32_t
 
vÆue
);

1225 
timî_íabÀ_bªak_maö_ouçut
(
uöt32_t
 
timî_≥rùhîÆ
);

1226 
timî_dißbÀ_bªak_maö_ouçut
(
uöt32_t
 
timî_≥rùhîÆ
);

1227 
timî_íabÀ_bªak_autom©ic_ouçut
(
uöt32_t
 
timî_≥rùhîÆ
);

1228 
timî_dißbÀ_bªak_autom©ic_ouçut
(
uöt32_t
 
timî_≥rùhîÆ
);

1229 
timî_£t_bªak_pﬁ¨ôy_high
(
uöt32_t
 
timî_≥rùhîÆ
);

1230 
timî_£t_bªak_pﬁ¨ôy_low
(
uöt32_t
 
timî_≥rùhîÆ
);

1231 
timî_íabÀ_bªak
(
uöt32_t
 
timî_≥rùhîÆ
);

1232 
timî_dißbÀ_bªak
(
uöt32_t
 
timî_≥rùhîÆ
);

1233 
timî_£t_íabÀd_off_°©e_ö_run_mode
(
uöt32_t
 
timî_≥rùhîÆ
);

1234 
timî_£t_dißbÀd_off_°©e_ö_run_mode
(
uöt32_t
 
timî_≥rùhîÆ
);

1235 
timî_£t_íabÀd_off_°©e_ö_idÀ_mode
(
uöt32_t
 
timî_≥rùhîÆ
);

1236 
timî_£t_dißbÀd_off_°©e_ö_idÀ_mode
(
uöt32_t
 
timî_≥rùhîÆ
);

1237 
timî_£t_bªak_lock
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
lock
);

1238 
timî_£t_dódtime
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
dódtime
);

1239 
timî_gíî©e_evít
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
evít
);

1240 
uöt32_t
 
timî_gë_cou¡î
(uöt32_à
timî_≥rùhîÆ
);

1241 
timî_£t_cou¡î
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
cou¡
);

1243 
timî_ic_£t_fûãr
(
uöt32_t
 
timî
, 
tim_ic_id
 
ic
,

1244 
tim_ic_fûãr
 
Êt
);

1245 
timî_ic_£t_¥esˇÀr
(
uöt32_t
 
timî
, 
tim_ic_id
 
ic
,

1246 
tim_ic_psc
 
psc
);

1247 
timî_ic_£t_öput
(
uöt32_t
 
timî
, 
tim_ic_id
 
ic
,

1248 
tim_ic_öput
 
ö
);

1249 
timî_ic_íabÀ
(
uöt32_t
 
timî
, 
tim_ic_id
 
ic
);

1250 
timî_ic_dißbÀ
(
uöt32_t
 
timî
, 
tim_ic_id
 
ic
);

1252 
timî_¶ave_£t_fûãr
(
uöt32_t
 
timî
, 
tim_ic_fûãr
 
Êt
);

1253 
timî_¶ave_£t_¥esˇÀr
(
uöt32_t
 
timî
, 
tim_ic_psc
 
psc
);

1254 
timî_¶ave_£t_pﬁ¨ôy
(
uöt32_t
 
timî
, 
tim_ë_pﬁ
 
pﬁ
);

1255 
timî_¶ave_£t_mode
(
uöt32_t
 
timî
, 
uöt8_t
 
mode
);

1256 
timî_¶ave_£t_åiggî
(
uöt32_t
 
timî
, 
uöt8_t
 
åiggî
);

1258 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\USART_~1.H

32 #i‡
deföed
(
LIBOPENCM3_USART_H
)

34 #i‚de‡
LIBOPENCM3_USART_COMMON_ALL_H


35 
	#LIBOPENCM3_USART_COMMON_ALL_H


	)

44 
	#USART1
 
USART1_BASE


	)

45 
	#USART2
 
USART2_BASE


	)

46 
	#USART3
 
USART3_BASE


	)

48 
	#UART4
 
UART4_BASE


	)

49 
	#UART5
 
UART5_BASE


	)

59 
	#USART_PARITY_NONE
 0x00

	)

60 
	#USART_PARITY_EVEN
 
USART_CR1_PCE


	)

61 
	#USART_PARITY_ODD
 (
USART_CR1_PS
 | 
USART_CR1_PCE
)

	)

63 
	#USART_PARITY_MASK
 (
USART_CR1_PS
 | 
USART_CR1_PCE
)

	)

71 
	#USART_MODE_RX
 
USART_CR1_RE


	)

72 
	#USART_MODE_TX
 
USART_CR1_TE


	)

73 
	#USART_MODE_TX_RX
 (
USART_CR1_RE
 | 
USART_CR1_TE
)

	)

75 
	#USART_MODE_MASK
 (
USART_CR1_RE
 | 
USART_CR1_TE
)

	)

82 
	#USART_STOPBITS_1
 
USART_CR2_STOPBITS_1


	)

83 
	#USART_STOPBITS_0_5
 
USART_CR2_STOPBITS_0_5


	)

84 
	#USART_STOPBITS_2
 
USART_CR2_STOPBITS_2


	)

85 
	#USART_STOPBITS_1_5
 
USART_CR2_STOPBITS_1_5


	)

94 
	#USART_FLOWCONTROL_NONE
 0x00

	)

95 
	#USART_FLOWCONTROL_RTS
 
USART_CR3_RTSE


	)

96 
	#USART_FLOWCONTROL_CTS
 
USART_CR3_CTSE


	)

97 
	#USART_FLOWCONTROL_RTS_CTS
 (
USART_CR3_RTSE
 | 
USART_CR3_CTSE
)

	)

99 
	#USART_FLOWCONTROL_MASK
 (
USART_CR3_RTSE
 | 
USART_CR3_CTSE
)

	)

103 
BEGIN_DECLS


105 
ußπ_£t_baudøã
(
uöt32_t
 
ußπ
, uöt32_à
baud
);

106 
ußπ_£t_d©abôs
(
uöt32_t
 
ußπ
, uöt32_à
bôs
);

107 
ußπ_£t_°›bôs
(
uöt32_t
 
ußπ
, uöt32_à
°›bôs
);

108 
ußπ_£t_∑rôy
(
uöt32_t
 
ußπ
, uöt32_à
∑rôy
);

109 
ußπ_£t_mode
(
uöt32_t
 
ußπ
, uöt32_à
mode
);

110 
ußπ_£t_Êow_c⁄åﬁ
(
uöt32_t
 
ußπ
, uöt32_à
Êowc⁄åﬁ
);

111 
ußπ_íabÀ
(
uöt32_t
 
ußπ
);

112 
ußπ_dißbÀ
(
uöt32_t
 
ußπ
);

113 
ußπ_£nd
(
uöt32_t
 
ußπ
, 
uöt16_t
 
d©a
);

114 
uöt16_t
 
ußπ_ªcv
(
uöt32_t
 
ußπ
);

115 
ußπ_waô_£nd_ªady
(
uöt32_t
 
ußπ
);

116 
ußπ_waô_ªcv_ªady
(
uöt32_t
 
ußπ
);

117 
ußπ_£nd_blockög
(
uöt32_t
 
ußπ
, 
uöt16_t
 
d©a
);

118 
uöt16_t
 
ußπ_ªcv_blockög
(
uöt32_t
 
ußπ
);

119 
ußπ_íabÀ_rx_dma
(
uöt32_t
 
ußπ
);

120 
ußπ_dißbÀ_rx_dma
(
uöt32_t
 
ußπ
);

121 
ußπ_íabÀ_tx_dma
(
uöt32_t
 
ußπ
);

122 
ußπ_dißbÀ_tx_dma
(
uöt32_t
 
ußπ
);

123 
ußπ_íabÀ_rx_öãºu±
(
uöt32_t
 
ußπ
);

124 
ußπ_dißbÀ_rx_öãºu±
(
uöt32_t
 
ußπ
);

125 
ußπ_íabÀ_tx_öãºu±
(
uöt32_t
 
ußπ
);

126 
ußπ_dißbÀ_tx_öãºu±
(
uöt32_t
 
ußπ
);

127 
ußπ_íabÀ_îr‹_öãºu±
(
uöt32_t
 
ußπ
);

128 
ußπ_dißbÀ_îr‹_öãºu±
(
uöt32_t
 
ußπ
);

129 
boﬁ
 
ußπ_gë_Êag
(
uöt32_t
 
ußπ
, uöt32_à
Êag
);

130 
boﬁ
 
ußπ_gë_öãºu±_sour˚
(
uöt32_t
 
ußπ
, uöt32_à
Êag
);

132 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\USART_~2.H

33 #i‡
deföed
(
LIBOPENCM3_USART_H
)

35 #i‚de‡
LIBOPENCM3_USART_COMMON_F124_H


36 
	#LIBOPENCM3_USART_COMMON_F124_H


	)

38 
	~<lib›ícm3/°m32/comm⁄/ußπ_comm⁄_Æl.h
>

43 
	#USART_SR
(
ußπ_ba£
Ë
	`MMIO32
((ußπ_ba£Ë+ 0x00)

	)

44 
	#USART1_SR
 
	`USART_SR
(
USART1_BASE
)

	)

45 
	#USART2_SR
 
	`USART_SR
(
USART2_BASE
)

	)

46 
	#USART3_SR
 
	`USART_SR
(
USART3_BASE
)

	)

47 
	#UART4_SR
 
	`USART_SR
(
UART4_BASE
)

	)

48 
	#UART5_SR
 
	`USART_SR
(
UART5_BASE
)

	)

51 
	#USART_DR
(
ußπ_ba£
Ë
	`MMIO32
((ußπ_ba£Ë+ 0x04)

	)

52 
	#USART1_DR
 
	`USART_DR
(
USART1_BASE
)

	)

53 
	#USART2_DR
 
	`USART_DR
(
USART2_BASE
)

	)

54 
	#USART3_DR
 
	`USART_DR
(
USART3_BASE
)

	)

55 
	#UART4_DR
 
	`USART_DR
(
UART4_BASE
)

	)

56 
	#UART5_DR
 
	`USART_DR
(
UART5_BASE
)

	)

59 
	#USART_BRR
(
ußπ_ba£
Ë
	`MMIO32
((ußπ_ba£Ë+ 0x08)

	)

60 
	#USART1_BRR
 
	`USART_BRR
(
USART1_BASE
)

	)

61 
	#USART2_BRR
 
	`USART_BRR
(
USART2_BASE
)

	)

62 
	#USART3_BRR
 
	`USART_BRR
(
USART3_BASE
)

	)

63 
	#UART4_BRR
 
	`USART_BRR
(
UART4_BASE
)

	)

64 
	#UART5_BRR
 
	`USART_BRR
(
UART5_BASE
)

	)

67 
	#USART_CR1
(
ußπ_ba£
Ë
	`MMIO32
((ußπ_ba£Ë+ 0x0c)

	)

68 
	#USART1_CR1
 
	`USART_CR1
(
USART1_BASE
)

	)

69 
	#USART2_CR1
 
	`USART_CR1
(
USART2_BASE
)

	)

70 
	#USART3_CR1
 
	`USART_CR1
(
USART3_BASE
)

	)

71 
	#UART4_CR1
 
	`USART_CR1
(
UART4_BASE
)

	)

72 
	#UART5_CR1
 
	`USART_CR1
(
UART5_BASE
)

	)

75 
	#USART_CR2
(
ußπ_ba£
Ë
	`MMIO32
((ußπ_ba£Ë+ 0x10)

	)

76 
	#USART1_CR2
 
	`USART_CR2
(
USART1_BASE
)

	)

77 
	#USART2_CR2
 
	`USART_CR2
(
USART2_BASE
)

	)

78 
	#USART3_CR2
 
	`USART_CR2
(
USART3_BASE
)

	)

79 
	#UART4_CR2
 
	`USART_CR2
(
UART4_BASE
)

	)

80 
	#UART5_CR2
 
	`USART_CR2
(
UART5_BASE
)

	)

83 
	#USART_CR3
(
ußπ_ba£
Ë
	`MMIO32
((ußπ_ba£Ë+ 0x14)

	)

84 
	#USART1_CR3
 
	`USART_CR3
(
USART1_BASE
)

	)

85 
	#USART2_CR3
 
	`USART_CR3
(
USART2_BASE
)

	)

86 
	#USART3_CR3
 
	`USART_CR3
(
USART3_BASE
)

	)

87 
	#UART4_CR3
 
	`USART_CR3
(
UART4_BASE
)

	)

88 
	#UART5_CR3
 
	`USART_CR3
(
UART5_BASE
)

	)

91 
	#USART_GTPR
(
ußπ_ba£
Ë
	`MMIO32
((ußπ_ba£Ë+ 0x18)

	)

92 
	#USART1_GTPR
 
	`USART_GTPR
(
USART1_BASE
)

	)

93 
	#USART2_GTPR
 
	`USART_GTPR
(
USART2_BASE
)

	)

94 
	#USART3_GTPR
 
	`USART_GTPR
(
USART3_BASE
)

	)

95 
	#UART4_GTPR
 
	`USART_GTPR
(
UART4_BASE
)

	)

96 
	#UART5_GTPR
 
	`USART_GTPR
(
UART5_BASE
)

	)

107 
	#USART_SR_CTS
 (1 << 9)

	)

110 
	#USART_SR_LBD
 (1 << 8)

	)

113 
	#USART_SR_TXE
 (1 << 7)

	)

116 
	#USART_SR_TC
 (1 << 6)

	)

119 
	#USART_SR_RXNE
 (1 << 5)

	)

122 
	#USART_SR_IDLE
 (1 << 4)

	)

125 
	#USART_SR_ORE
 (1 << 3)

	)

128 
	#USART_SR_NE
 (1 << 2)

	)

131 
	#USART_SR_FE
 (1 << 1)

	)

134 
	#USART_SR_PE
 (1 << 0)

	)

140 
	#USART_DR_MASK
 0x1FF

	)

145 
	#USART_BRR_DIV_MANTISSA_MASK
 (0xFFF << 4)

	)

147 
	#USART_BRR_DIV_FRACTION_MASK
 0xF

	)

152 
	#USART_CR1_UE
 (1 << 13)

	)

155 
	#USART_CR1_M
 (1 << 12)

	)

158 
	#USART_CR1_WAKE
 (1 << 11)

	)

161 
	#USART_CR1_PCE
 (1 << 10)

	)

164 
	#USART_CR1_PS
 (1 << 9)

	)

167 
	#USART_CR1_PEIE
 (1 << 8)

	)

170 
	#USART_CR1_TXEIE
 (1 << 7)

	)

173 
	#USART_CR1_TCIE
 (1 << 6)

	)

176 
	#USART_CR1_RXNEIE
 (1 << 5)

	)

179 
	#USART_CR1_IDLEIE
 (1 << 4)

	)

182 
	#USART_CR1_TE
 (1 << 3)

	)

185 
	#USART_CR1_RE
 (1 << 2)

	)

188 
	#USART_CR1_RWU
 (1 << 1)

	)

191 
	#USART_CR1_SBK
 (1 << 0)

	)

196 
	#USART_CR2_LINEN
 (1 << 14)

	)

199 
	#USART_CR2_STOPBITS_1
 (0x00 << 12Ë

	)

200 
	#USART_CR2_STOPBITS_0_5
 (0x01 << 12Ë

	)

201 
	#USART_CR2_STOPBITS_2
 (0x02 << 12Ë

	)

202 
	#USART_CR2_STOPBITS_1_5
 (0x03 << 12Ë

	)

203 
	#USART_CR2_STOPBITS_MASK
 (0x03 << 12)

	)

204 
	#USART_CR2_STOPBITS_SHIFT
 12

	)

207 
	#USART_CR2_CLKEN
 (1 << 11)

	)

210 
	#USART_CR2_CPOL
 (1 << 10)

	)

213 
	#USART_CR2_CPHA
 (1 << 9)

	)

216 
	#USART_CR2_LBCL
 (1 << 8)

	)

219 
	#USART_CR2_LBDIE
 (1 << 6)

	)

222 
	#USART_CR2_LBDL
 (1 << 5)

	)

225 
	#USART_CR2_ADD_MASK
 0xF

	)

231 
	#USART_CR3_CTSIE
 (1 << 10)

	)

235 
	#USART_CR3_CTSE
 (1 << 9)

	)

239 
	#USART_CR3_RTSE
 (1 << 8)

	)

243 
	#USART_CR3_DMAT
 (1 << 7)

	)

247 
	#USART_CR3_DMAR
 (1 << 6)

	)

251 
	#USART_CR3_SCEN
 (1 << 5)

	)

255 
	#USART_CR3_NACK
 (1 << 4)

	)

258 
	#USART_CR3_HDSEL
 (1 << 3)

	)

261 
	#USART_CR3_IRLP
 (1 << 2)

	)

264 
	#USART_CR3_IREN
 (1 << 1)

	)

267 
	#USART_CR3_EIE
 (1 << 0)

	)

273 
	#USART_GTPR_GT_MASK
 (0xFF << 8)

	)

277 
	#USART_GTPR_PSC_MASK
 0xFF

	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\crc.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/¸c.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/¸c.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/¸c.h
>

29 #ñi‡
deföed
(
STM32F3
)

30 
	~<lib›ícm3/°m32/f3/¸c.h
>

31 #ñi‡
deföed
(
STM32F4
)

32 
	~<lib›ícm3/°m32/f4/¸c.h
>

33 #ñi‡
deföed
(
STM32L1
)

34 
	~<lib›ícm3/°m32/l1/¸c.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\dac.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/dac.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/dac.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/dac.h
>

29 #ñi‡
deföed
(
STM32F3
)

30 
	~<lib›ícm3/°m32/f3/dac.h
>

31 #ñi‡
deföed
(
STM32F4
)

32 
	~<lib›ícm3/°m32/f4/dac.h
>

33 #ñi‡
deföed
(
STM32L1
)

34 
	~<lib›ícm3/°m32/l1/dac.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\dbgmcu.h

20 #i‚de‡
LIBOPENCM3_STM32_DBGMCU_H


21 
	#LIBOPENCM3_STM32_DBGMCU_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

29 
	#DBGMCU_IDCODE
 
	`MMIO32
(
DBGMCU_BASE
 + 0x00)

	)

33 
	#DBGMCU_CR
 
	`MMIO32
(
DBGMCU_BASE
 + 0x04)

	)

37 
	#DBGMCU_IDCODE_DEV_ID_MASK
 0x00000fff

	)

38 
	#DBGMCU_IDCODE_REV_ID_MASK
 0xffff0000

	)

48 
	#DBGMCU_CR_SLEEP
 0x00000001

	)

49 
	#DBGMCU_CR_STOP
 0x00000002

	)

50 
	#DBGMCU_CR_STANDBY
 0x00000004

	)

51 
	#DBGMCU_CR_TRACE_IOEN
 0x00000020

	)

52 
	#DBGMCU_CR_TRACE_MODE_MASK
 0x000000C0

	)

53 
	#DBGMCU_CR_TRACE_MODE_ASYNC
 0x00000000

	)

54 
	#DBGMCU_CR_TRACE_MODE_SYNC_1
 0x00000040

	)

55 
	#DBGMCU_CR_TRACE_MODE_SYNC_2
 0x00000080

	)

56 
	#DBGMCU_CR_TRACE_MODE_SYNC_4
 0x000000C0

	)

57 
	#DBGMCU_CR_IWDG_STOP
 0x00000100

	)

58 
	#DBGMCU_CR_WWDG_STOP
 0x00000200

	)

59 
	#DBGMCU_CR_TIM1_STOP
 0x00000400

	)

60 
	#DBGMCU_CR_TIM2_STOP
 0x00000800

	)

61 
	#DBGMCU_CR_TIM3_STOP
 0x00001000

	)

62 
	#DBGMCU_CR_TIM4_STOP
 0x00002000

	)

63 
	#DBGMCU_CR_CAN1_STOP
 0x00004000

	)

64 
	#DBGMCU_CR_I2C1_SMBUS_TIMEOUT
 0x00008000

	)

65 
	#DBGMCU_CR_I2C2_SMBUS_TIMEOUT
 0x00010000

	)

66 
	#DBGMCU_CR_TIM8_STOP
 0x00020000

	)

67 
	#DBGMCU_CR_TIM5_STOP
 0x00040000

	)

68 
	#DBGMCU_CR_TIM6_STOP
 0x00080000

	)

69 
	#DBGMCU_CR_TIM7_STOP
 0x00100000

	)

70 
	#DBGMCU_CR_CAN2_STOP
 0x00200000

	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\desig.h

20 #i‚de‡
LIBOPENCM3_DESIG_H


21 
	#LIBOPENCM3_DESIG_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

29 
	#DESIG_FLASH_SIZE
 
	`MMIO16
(
DESIG_FLASH_SIZE_BASE
 + 0x00)

	)

31 
BEGIN_DECLS


37 
uöt16_t
 
desig_gë_Êash_size
();

44 
desig_gë_unique_id
(
uöt32_t
 *
ªsu…
);

52 
desig_gë_unique_id_as_°rög
(*
°rög
,

53 
°rög_Àn
);

55 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\dma.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/dma.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/dma.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/dma.h
>

29 #ñi‡
deföed
(
STM32F3
)

30 
	~<lib›ícm3/°m32/f3/dma.h
>

31 #ñi‡
deföed
(
STM32F4
)

32 
	~<lib›ícm3/°m32/f4/dma.h
>

33 #ñi‡
deföed
(
STM32L1
)

34 
	~<lib›ícm3/°m32/l1/dma.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\exti.h

22 
	~<lib›ícm3/cm3/comm⁄.h
>

23 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

25 #i‡
deföed
(
STM32F0
)

26 
	~<lib›ícm3/°m32/f0/exti.h
>

27 #ñi‡
deföed
(
STM32F1
)

28 
	~<lib›ícm3/°m32/f1/exti.h
>

29 #ñi‡
deföed
(
STM32F2
)

30 
	~<lib›ícm3/°m32/f2/exti.h
>

31 #ñi‡
deföed
(
STM32F3
)

32 
	~<lib›ícm3/°m32/f3/exti.h
>

33 #ñi‡
deföed
(
STM32F4
)

34 
	~<lib›ícm3/°m32/f4/exti.h
>

35 #ñi‡
deföed
(
STM32L0
)

36 
	~<lib›ícm3/°m32/l0/exti.h
>

37 #ñi‡
deföed
(
STM32L1
)

38 
	~<lib›ícm3/°m32/l1/exti.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\DOC-ST~1.H

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\MEMORY~1.H

20 #i‚de‡
LIBOPENCM3_MEMORYMAP_H


21 
	#LIBOPENCM3_MEMORYMAP_H


	)

23 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

28 
	#FLASH_BASE
 (0x08000000U)

	)

29 
	#PERIPH_BASE
 (0x40000000U)

	)

30 
	#INFO_BASE
 (0x1ffff000U)

	)

31 
	#PERIPH_BASE_APB1
 (
PERIPH_BASE
 + 0x00000)

	)

32 
	#PERIPH_BASE_APB2
 (
PERIPH_BASE
 + 0x10000)

	)

33 
	#PERIPH_BASE_AHB
 (
PERIPH_BASE
 + 0x18000)

	)

38 
	#TIM2_BASE
 (
PERIPH_BASE_APB1
 + 0x0000)

	)

39 
	#TIM3_BASE
 (
PERIPH_BASE_APB1
 + 0x0400)

	)

40 
	#TIM4_BASE
 (
PERIPH_BASE_APB1
 + 0x0800)

	)

41 
	#TIM5_BASE
 (
PERIPH_BASE_APB1
 + 0x0c00)

	)

42 
	#TIM6_BASE
 (
PERIPH_BASE_APB1
 + 0x1000)

	)

43 
	#TIM7_BASE
 (
PERIPH_BASE_APB1
 + 0x1400)

	)

44 
	#TIM12_BASE
 (
PERIPH_BASE_APB1
 + 0x1800)

	)

45 
	#TIM13_BASE
 (
PERIPH_BASE_APB1
 + 0x1c00)

	)

46 
	#TIM14_BASE
 (
PERIPH_BASE_APB1
 + 0x2000)

	)

48 
	#RTC_BASE
 (
PERIPH_BASE_APB1
 + 0x2800)

	)

49 
	#WWDG_BASE
 (
PERIPH_BASE_APB1
 + 0x2c00)

	)

50 
	#IWDG_BASE
 (
PERIPH_BASE_APB1
 + 0x3000)

	)

52 
	#SPI2_BASE
 (
PERIPH_BASE_APB1
 + 0x3800)

	)

53 
	#SPI3_BASE
 (
PERIPH_BASE_APB1
 + 0x3c00)

	)

55 
	#USART2_BASE
 (
PERIPH_BASE_APB1
 + 0x4400)

	)

56 
	#USART3_BASE
 (
PERIPH_BASE_APB1
 + 0x4800)

	)

57 
	#UART4_BASE
 (
PERIPH_BASE_APB1
 + 0x4c00)

	)

58 
	#UART5_BASE
 (
PERIPH_BASE_APB1
 + 0x5000)

	)

59 
	#I2C1_BASE
 (
PERIPH_BASE_APB1
 + 0x5400)

	)

60 
	#I2C2_BASE
 (
PERIPH_BASE_APB1
 + 0x5800)

	)

61 
	#USB_DEV_FS_BASE
 (
PERIPH_BASE_APB1
 + 0x5c00)

	)

62 
	#USB_PMA_BASE
 (
PERIPH_BASE_APB1
 + 0x6000)

	)

63 
	#USB_CAN_SRAM_BASE
 (
PERIPH_BASE_APB1
 + 0x6000)

	)

64 
	#BX_CAN1_BASE
 (
PERIPH_BASE_APB1
 + 0x6400)

	)

65 
	#BX_CAN2_BASE
 (
PERIPH_BASE_APB1
 + 0x6800)

	)

67 
	#BACKUP_REGS_BASE
 (
PERIPH_BASE_APB1
 + 0x6c00)

	)

68 
	#POWER_CONTROL_BASE
 (
PERIPH_BASE_APB1
 + 0x7000)

	)

69 
	#DAC_BASE
 (
PERIPH_BASE_APB1
 + 0x7400)

	)

70 
	#CEC_BASE
 (
PERIPH_BASE_APB1
 + 0x7800)

	)

74 
	#AFIO_BASE
 (
PERIPH_BASE_APB2
 + 0x0000)

	)

75 
	#EXTI_BASE
 (
PERIPH_BASE_APB2
 + 0x0400)

	)

76 
	#GPIO_PORT_A_BASE
 (
PERIPH_BASE_APB2
 + 0x0800)

	)

77 
	#GPIO_PORT_B_BASE
 (
PERIPH_BASE_APB2
 + 0x0c00)

	)

78 
	#GPIO_PORT_C_BASE
 (
PERIPH_BASE_APB2
 + 0x1000)

	)

79 
	#GPIO_PORT_D_BASE
 (
PERIPH_BASE_APB2
 + 0x1400)

	)

80 
	#GPIO_PORT_E_BASE
 (
PERIPH_BASE_APB2
 + 0x1800)

	)

81 
	#GPIO_PORT_F_BASE
 (
PERIPH_BASE_APB2
 + 0x1c00)

	)

82 
	#GPIO_PORT_G_BASE
 (
PERIPH_BASE_APB2
 + 0x2000)

	)

83 
	#ADC1_BASE
 (
PERIPH_BASE_APB2
 + 0x2400)

	)

84 
	#ADC2_BASE
 (
PERIPH_BASE_APB2
 + 0x2800)

	)

85 
	#TIM1_BASE
 (
PERIPH_BASE_APB2
 + 0x2c00)

	)

86 
	#SPI1_BASE
 (
PERIPH_BASE_APB2
 + 0x3000)

	)

87 
	#TIM8_BASE
 (
PERIPH_BASE_APB2
 + 0x3400)

	)

88 
	#USART1_BASE
 (
PERIPH_BASE_APB2
 + 0x3800)

	)

89 
	#ADC3_BASE
 (
PERIPH_BASE_APB2
 + 0x3c00)

	)

90 
	#TIM15_BASE
 (
PERIPH_BASE_APB2
 + 0x4000)

	)

91 
	#TIM16_BASE
 (
PERIPH_BASE_APB2
 + 0x4400)

	)

92 
	#TIM17_BASE
 (
PERIPH_BASE_APB2
 + 0x4800)

	)

93 
	#TIM9_BASE
 (
PERIPH_BASE_APB2
 + 0x4c00)

	)

94 
	#TIM10_BASE
 (
PERIPH_BASE_APB2
 + 0x5000)

	)

95 
	#TIM11_BASE
 (
PERIPH_BASE_APB2
 + 0x5400)

	)

99 
	#SDIO_BASE
 (
PERIPH_BASE_AHB
 + 0x00000)

	)

101 
	#DMA1_BASE
 (
PERIPH_BASE_AHB
 + 0x08000)

	)

102 
	#DMA2_BASE
 (
PERIPH_BASE_AHB
 + 0x08400)

	)

104 
	#RCC_BASE
 (
PERIPH_BASE_AHB
 + 0x09000)

	)

106 
	#FLASH_MEM_INTERFACE_BASE
 (
PERIPH_BASE_AHB
 + 0x0a000)

	)

107 
	#CRC_BASE
 (
PERIPH_BASE_AHB
 + 0x0b000)

	)

109 
	#ETHERNET_BASE
 (
PERIPH_BASE_AHB
 + 0x10000)

	)

111 
	#USB_OTG_FS_BASE
 (
PERIPH_BASE_AHB
 + 0xf„8000)

	)

114 
	#DBGMCU_BASE
 (
PPBI_BASE
 + 0x00042000)

	)

117 
	#FSMC_BASE
 (
PERIPH_BASE
 + 0x60000000)

	)

120 
	#DESIG_FLASH_SIZE_BASE
 (
INFO_BASE
 + 0x7e0)

	)

121 
	#DESIG_UNIQUE_ID_BASE
 (
INFO_BASE
 + 0x7e8)

	)

123 
	#DESIG_UNIQUE_ID0
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
)

	)

124 
	#DESIG_UNIQUE_ID1
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
 + 4)

	)

125 
	#DESIG_UNIQUE_ID2
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
 + 8)

	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\adc.h

38 #i‚de‡
LIBOPENCM3_ADC_H


39 
	#LIBOPENCM3_ADC_H


	)

41 
	~<lib›ícm3/°m32/comm⁄/adc_comm⁄_v1.h
>

46 
	#ADC_JOFR1
(
block
Ë
	`MMIO32
((blockË+ 0x14)

	)

47 
	#ADC_JOFR2
(
block
Ë
	`MMIO32
((blockË+ 0x18)

	)

48 
	#ADC_JOFR3
(
block
Ë
	`MMIO32
((blockË+ 0x1c)

	)

49 
	#ADC_JOFR4
(
block
Ë
	`MMIO32
((blockË+ 0x20)

	)

52 
	#ADC_HTR
(
block
Ë
	`MMIO32
((blockË+ 0x24)

	)

55 
	#ADC_LTR
(
block
Ë
	`MMIO32
((blockË+ 0x28)

	)

58 
	#ADC_SQR1
(
block
Ë
	`MMIO32
((blockË+ 0x2c)

	)

61 
	#ADC_SQR2
(
block
Ë
	`MMIO32
((blockË+ 0x30)

	)

64 
	#ADC_SQR3
(
block
Ë
	`MMIO32
((blockË+ 0x34)

	)

67 
	#ADC_JSQR
(
block
Ë
	`MMIO32
((blockË+ 0x38)

	)

70 
	#ADC_JDR1
(
block
Ë
	`MMIO32
((blockË+ 0x3c)

	)

71 
	#ADC_JDR2
(
block
Ë
	`MMIO32
((blockË+ 0x40)

	)

72 
	#ADC_JDR3
(
block
Ë
	`MMIO32
((blockË+ 0x44)

	)

73 
	#ADC_JDR4
(
block
Ë
	`MMIO32
((blockË+ 0x48)

	)

76 
	#ADC_DR
(
block
Ë
	`MMIO32
((blockË+ 0x4c)

	)

103 
	#ADC_CR1_DUALMOD_IND
 (0x0 << 16)

	)

105 
	#ADC_CR1_DUALMOD_CRSISM
 (0x1 << 16)

	)

107 
	#ADC_CR1_DUALMOD_CRSATM
 (0x2 << 16)

	)

109 
	#ADC_CR1_DUALMOD_CISFIM
 (0x3 << 16)

	)

111 
	#ADC_CR1_DUALMOD_CISSIM
 (0x4 << 16)

	)

113 
	#ADC_CR1_DUALMOD_ISM
 (0x5 << 16)

	)

115 
	#ADC_CR1_DUALMOD_RSM
 (0x6 << 16)

	)

117 
	#ADC_CR1_DUALMOD_FIM
 (0x7 << 16)

	)

119 
	#ADC_CR1_DUALMOD_SIM
 (0x8 << 16)

	)

121 
	#ADC_CR1_DUALMOD_ATM
 (0x9 << 16)

	)

123 
	#ADC_CR1_DUALMOD_MASK
 (0xF << 16)

	)

124 
	#ADC_CR1_DUALMOD_SHIFT
 16

	)

126 
	#ADC_CR1_AWDCH_MAX
 17

	)

131 
	#ADC_CR2_TSVREFE
 (1 << 23)

	)

134 
	#ADC_CR2_SWSTART
 (1 << 22)

	)

137 
	#ADC_CR2_JSWSTART
 (1 << 21)

	)

140 
	#ADC_CR2_EXTTRIG
 (1 << 20)

	)

151 
	#ADC_CR2_EXTSEL_TIM1_CC1
 (0x0 << 17)

	)

153 
	#ADC_CR2_EXTSEL_TIM1_CC2
 (0x1 << 17)

	)

155 
	#ADC_CR2_EXTSEL_TIM1_CC3
 (0x2 << 17)

	)

157 
	#ADC_CR2_EXTSEL_TIM2_CC2
 (0x3 << 17)

	)

159 
	#ADC_CR2_EXTSEL_TIM3_TRGO
 (0x4 << 17)

	)

161 
	#ADC_CR2_EXTSEL_TIM4_CC4
 (0x5 << 17)

	)

163 
	#ADC_CR2_EXTSEL_EXTI11
 (0x6 << 17)

	)

165 
	#ADC_CR2_EXTSEL_SWSTART
 (0x7 << 17)

	)

176 
	#ADC_CR2_EXTSEL_TIM3_CC1
 (0x0 << 17)

	)

178 
	#ADC_CR2_EXTSEL_TIM2_CC3
 (0x1 << 17)

	)

180 
	#ADC_CR2_EXTSEL_TIM1_CC3
 (0x2 << 17)

	)

182 
	#ADC_CR2_EXTSEL_TIM8_CC1
 (0x3 << 17)

	)

184 
	#ADC_CR2_EXTSEL_TIM8_TRGO
 (0x4 << 17)

	)

186 
	#ADC_CR2_EXTSEL_TIM5_CC1
 (0x5 << 17)

	)

188 
	#ADC_CR2_EXTSEL_TIM5_CC3
 (0x6 << 17)

	)

191 
	#ADC_CR2_EXTSEL_MASK
 (0x7 << 17)

	)

192 
	#ADC_CR2_EXTSEL_SHIFT
 17

	)

197 
	#ADC_CR2_JEXTTRIG
 (1 << 15)

	)

209 
	#ADC_CR2_JEXTSEL_TIM1_TRGO
 (0x0 << 12)

	)

211 
	#ADC_CR2_JEXTSEL_TIM1_CC4
 (0x1 << 12)

	)

213 
	#ADC_CR2_JEXTSEL_TIM2_TRGO
 (0x2 << 12)

	)

215 
	#ADC_CR2_JEXTSEL_TIM2_CC1
 (0x3 << 12)

	)

217 
	#ADC_CR2_JEXTSEL_TIM3_CC4
 (0x4 << 12)

	)

219 
	#ADC_CR2_JEXTSEL_TIM4_TRGO
 (0x5 << 12)

	)

221 
	#ADC_CR2_JEXTSEL_EXTI15
 (0x6 << 12)

	)

223 
	#ADC_CR2_JEXTSEL_JSWSTART
 (0x7 << 12Ë

	)

234 
	#ADC_CR2_JEXTSEL_TIM1_TRGO
 (0x0 << 12)

	)

236 
	#ADC_CR2_JEXTSEL_TIM1_CC4
 (0x1 << 12)

	)

238 
	#ADC_CR2_JEXTSEL_TIM4_CC3
 (0x2 << 12)

	)

240 
	#ADC_CR2_JEXTSEL_TIM8_CC2
 (0x3 << 12)

	)

242 
	#ADC_CR2_JEXTSEL_TIM8_CC4
 (0x4 << 12)

	)

244 
	#ADC_CR2_JEXTSEL_TIM5_TRGO
 (0x5 << 12)

	)

246 
	#ADC_CR2_JEXTSEL_TIM5_CC4
 (0x6 << 12)

	)

248 
	#ADC_CR2_JEXTSEL_JSWSTART
 (0x7 << 12Ë

	)

251 
	#ADC_CR2_JEXTSEL_MASK
 (0x7 << 12)

	)

252 
	#ADC_CR2_JEXTSEL_SHIFT
 12

	)

255 
	#ADC_CR2_ALIGN_RIGHT
 (0 << 11)

	)

256 
	#ADC_CR2_ALIGN_LEFT
 (1 << 11)

	)

257 
	#ADC_CR2_ALIGN
 (1 << 11)

	)

262 
	#ADC_CR2_DMA
 (1 << 8)

	)

267 
	#ADC_CR2_RSTCAL
 (1 << 3)

	)

270 
	#ADC_CR2_CAL
 (1 << 2)

	)

273 
	#ADC_CR2_CONT
 (1 << 1)

	)

281 
	#ADC_CR2_ADON
 (1 << 0)

	)

284 
	#ADC_SMPR1_SMP17_LSB
 21

	)

285 
	#ADC_SMPR1_SMP16_LSB
 18

	)

286 
	#ADC_SMPR1_SMP15_LSB
 15

	)

287 
	#ADC_SMPR1_SMP14_LSB
 12

	)

288 
	#ADC_SMPR1_SMP13_LSB
 9

	)

289 
	#ADC_SMPR1_SMP12_LSB
 6

	)

290 
	#ADC_SMPR1_SMP11_LSB
 3

	)

291 
	#ADC_SMPR1_SMP10_LSB
 0

	)

292 
	#ADC_SMPR1_SMP17_MSK
 (0x7 << 
ADC_SMP17_LSB
)

	)

293 
	#ADC_SMPR1_SMP16_MSK
 (0x7 << 
ADC_SMP16_LSB
)

	)

294 
	#ADC_SMPR1_SMP15_MSK
 (0x7 << 
ADC_SMP15_LSB
)

	)

295 
	#ADC_SMPR1_SMP14_MSK
 (0x7 << 
ADC_SMP14_LSB
)

	)

296 
	#ADC_SMPR1_SMP13_MSK
 (0x7 << 
ADC_SMP13_LSB
)

	)

297 
	#ADC_SMPR1_SMP12_MSK
 (0x7 << 
ADC_SMP12_LSB
)

	)

298 
	#ADC_SMPR1_SMP11_MSK
 (0x7 << 
ADC_SMP11_LSB
)

	)

299 
	#ADC_SMPR1_SMP10_MSK
 (0x7 << 
ADC_SMP10_LSB
)

	)

303 
	#ADC_SMPR2_SMP9_LSB
 27

	)

304 
	#ADC_SMPR2_SMP8_LSB
 24

	)

305 
	#ADC_SMPR2_SMP7_LSB
 21

	)

306 
	#ADC_SMPR2_SMP6_LSB
 18

	)

307 
	#ADC_SMPR2_SMP5_LSB
 15

	)

308 
	#ADC_SMPR2_SMP4_LSB
 12

	)

309 
	#ADC_SMPR2_SMP3_LSB
 9

	)

310 
	#ADC_SMPR2_SMP2_LSB
 6

	)

311 
	#ADC_SMPR2_SMP1_LSB
 3

	)

312 
	#ADC_SMPR2_SMP0_LSB
 0

	)

313 
	#ADC_SMPR2_SMP9_MSK
 (0x7 << 
ADC_SMP9_LSB
)

	)

314 
	#ADC_SMPR2_SMP8_MSK
 (0x7 << 
ADC_SMP8_LSB
)

	)

315 
	#ADC_SMPR2_SMP7_MSK
 (0x7 << 
ADC_SMP7_LSB
)

	)

316 
	#ADC_SMPR2_SMP6_MSK
 (0x7 << 
ADC_SMP6_LSB
)

	)

317 
	#ADC_SMPR2_SMP5_MSK
 (0x7 << 
ADC_SMP5_LSB
)

	)

318 
	#ADC_SMPR2_SMP4_MSK
 (0x7 << 
ADC_SMP4_LSB
)

	)

319 
	#ADC_SMPR2_SMP3_MSK
 (0x7 << 
ADC_SMP3_LSB
)

	)

320 
	#ADC_SMPR2_SMP2_MSK
 (0x7 << 
ADC_SMP2_LSB
)

	)

321 
	#ADC_SMPR2_SMP1_MSK
 (0x7 << 
ADC_SMP1_LSB
)

	)

322 
	#ADC_SMPR2_SMP0_MSK
 (0x7 << 
ADC_SMP0_LSB
)

	)

331 
	#ADC_SMPR_SMP_1DOT5CYC
 0x0

	)

332 
	#ADC_SMPR_SMP_7DOT5CYC
 0x1

	)

333 
	#ADC_SMPR_SMP_13DOT5CYC
 0x2

	)

334 
	#ADC_SMPR_SMP_28DOT5CYC
 0x3

	)

335 
	#ADC_SMPR_SMP_41DOT5CYC
 0x4

	)

336 
	#ADC_SMPR_SMP_55DOT5CYC
 0x5

	)

337 
	#ADC_SMPR_SMP_71DOT5CYC
 0x6

	)

338 
	#ADC_SMPR_SMP_239DOT5CYC
 0x7

	)

344 
	#ADC_SQR_MAX_CHANNELS_REGULAR
 16

	)

346 
	#ADC_SQR1_SQ16_LSB
 15

	)

347 
	#ADC_SQR1_SQ15_LSB
 10

	)

348 
	#ADC_SQR1_SQ14_LSB
 5

	)

349 
	#ADC_SQR1_SQ13_LSB
 0

	)

350 
	#ADC_SQR1_L_MSK
 (0x‡<< 
ADC_SQR1_L_LSB
)

	)

351 
	#ADC_SQR1_SQ16_MSK
 (0x1‡<< 
ADC_SQR1_SQ16_LSB
)

	)

352 
	#ADC_SQR1_SQ15_MSK
 (0x1‡<< 
ADC_SQR1_SQ15_LSB
)

	)

353 
	#ADC_SQR1_SQ14_MSK
 (0x1‡<< 
ADC_SQR1_SQ14_LSB
)

	)

354 
	#ADC_SQR1_SQ13_MSK
 (0x1‡<< 
ADC_SQR1_SQ13_LSB
)

	)

358 
	#ADC_SQR2_SQ12_LSB
 25

	)

359 
	#ADC_SQR2_SQ11_LSB
 20

	)

360 
	#ADC_SQR2_SQ10_LSB
 15

	)

361 
	#ADC_SQR2_SQ9_LSB
 10

	)

362 
	#ADC_SQR2_SQ8_LSB
 5

	)

363 
	#ADC_SQR2_SQ7_LSB
 0

	)

364 
	#ADC_SQR2_SQ12_MSK
 (0x1‡<< 
ADC_SQR2_SQ12_LSB
)

	)

365 
	#ADC_SQR2_SQ11_MSK
 (0x1‡<< 
ADC_SQR2_SQ11_LSB
)

	)

366 
	#ADC_SQR2_SQ10_MSK
 (0x1‡<< 
ADC_SQR2_SQ10_LSB
)

	)

367 
	#ADC_SQR2_SQ9_MSK
 (0x1‡<< 
ADC_SQR2_SQ9_LSB
)

	)

368 
	#ADC_SQR2_SQ8_MSK
 (0x1‡<< 
ADC_SQR2_SQ8_LSB
)

	)

369 
	#ADC_SQR2_SQ7_MSK
 (0x1‡<< 
ADC_SQR2_SQ7_LSB
)

	)

373 
	#ADC_SQR3_SQ6_LSB
 25

	)

374 
	#ADC_SQR3_SQ5_LSB
 20

	)

375 
	#ADC_SQR3_SQ4_LSB
 15

	)

376 
	#ADC_SQR3_SQ3_LSB
 10

	)

377 
	#ADC_SQR3_SQ2_LSB
 5

	)

378 
	#ADC_SQR3_SQ1_LSB
 0

	)

379 
	#ADC_SQR3_SQ6_MSK
 (0x1‡<< 
ADC_SQR3_SQ6_LSB
)

	)

380 
	#ADC_SQR3_SQ5_MSK
 (0x1‡<< 
ADC_SQR3_SQ5_LSB
)

	)

381 
	#ADC_SQR3_SQ4_MSK
 (0x1‡<< 
ADC_SQR3_SQ4_LSB
)

	)

382 
	#ADC_SQR3_SQ3_MSK
 (0x1‡<< 
ADC_SQR3_SQ3_LSB
)

	)

383 
	#ADC_SQR3_SQ2_MSK
 (0x1‡<< 
ADC_SQR3_SQ2_LSB
)

	)

384 
	#ADC_SQR3_SQ1_MSK
 (0x1‡<< 
ADC_SQR3_SQ1_LSB
)

	)

388 
	#ADC_JDATA_LSB
 0

	)

389 
	#ADC_DATA_LSB
 0

	)

390 
	#ADC_ADC2DATA_LSB
 16

	)

391 
	#ADC_JDATA_MSK
 (0xfff‡<< 
ADC_JDATA_LSB
)

	)

392 
	#ADC_DATA_MSK
 (0xfff‡<< 
ADC_DA
)

	)

393 
	#ADC_ADC2DATA_MSK
 (0xfff‡<< 
ADC_ADC2DATA_LSB
)

	)

400 
	#ADC_CHANNEL_TEMP
 16

	)

401 
	#ADC_CHANNEL_VREF
 17

	)

406 
BEGIN_DECLS


408 
adc_°¨t_c⁄vîsi⁄_dúe˘
(
uöt32_t
 
adc
);

409 
adc_£t_duÆ_mode
(
uöt32_t
 
mode
);

410 
adc_íabÀ_ãm≥øtuª_£ns‹
(
uöt32_t
 
adc
);

411 
adc_dißbÀ_ãm≥øtuª_£ns‹
(
uöt32_t
 
adc
);

412 
adc_íabÀ_exã∫Æ_åiggî_ªguœr
(
uöt32_t
 
adc
, uöt32_à
åiggî
);

413 
adc_íabÀ_exã∫Æ_åiggî_öje˘ed
(
uöt32_t
 
adc
, uöt32_à
åiggî
);

414 
adc_ª£t_ˇlibøti⁄
(
uöt32_t
 
adc
);

415 
adc_ˇlibøti⁄
(
uöt32_t
 
adc
);

416 
	$adc_⁄
(
uöt32_t
 
adc
)

417 
	`LIBOPENCM3_DEPRECATED
("will beÑemoved inÅhe firstÑelease");

419 
END_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\bkp.h

20 #i‚de‡
LIBOPENCM3_BKP_H


21 
	#LIBOPENCM3_BKP_H


	)

26 
	#BKP_DR1
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x04)

	)

29 
	#BKP_DR2
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x08)

	)

32 
	#BKP_DR3
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x0C)

	)

35 
	#BKP_DR4
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x10)

	)

38 
	#BKP_DR5
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x14)

	)

41 
	#BKP_DR6
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x18)

	)

44 
	#BKP_DR7
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x1C)

	)

47 
	#BKP_DR8
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x20)

	)

50 
	#BKP_DR9
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x24)

	)

53 
	#BKP_DR10
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x28)

	)

56 
	#BKP_RTCCR
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x2C)

	)

59 
	#BKP_CR
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x30)

	)

62 
	#BKP_CSR
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x34)

	)

65 
	#BKP_DR11
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x40)

	)

68 
	#BKP_DR12
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x44)

	)

71 
	#BKP_DR13
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x48)

	)

74 
	#BKP_DR14
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x4C)

	)

77 
	#BKP_DR15
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x50)

	)

80 
	#BKP_DR16
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x54)

	)

83 
	#BKP_DR17
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x58)

	)

86 
	#BKP_DR18
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x5C)

	)

89 
	#BKP_DR19
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x60)

	)

92 
	#BKP_DR20
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x64)

	)

95 
	#BKP_DR21
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x68)

	)

98 
	#BKP_DR22
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x6C)

	)

101 
	#BKP_DR23
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x70)

	)

104 
	#BKP_DR24
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x74)

	)

107 
	#BKP_DR25
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x78)

	)

110 
	#BKP_DR26
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x7C)

	)

113 
	#BKP_DR27
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x80)

	)

116 
	#BKP_DR28
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x84)

	)

119 
	#BKP_DR29
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x88)

	)

122 
	#BKP_DR30
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x8C)

	)

125 
	#BKP_DR31
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x90)

	)

128 
	#BKP_DR32
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x94)

	)

131 
	#BKP_DR33
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x98)

	)

134 
	#BKP_DR34
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x9C)

	)

137 
	#BKP_DR35
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0xA0)

	)

140 
	#BKP_DR36
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0xA4)

	)

143 
	#BKP_DR37
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0xA8)

	)

146 
	#BKP_DR38
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0xAC)

	)

149 
	#BKP_DR39
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0xB0)

	)

152 
	#BKP_DR40
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0xB4)

	)

155 
	#BKP_DR41
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0xB8)

	)

158 
	#BKP_DR42
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0xBC)

	)

163 
	#BKP_RTCCR_ASOS
 (1 << 9)

	)

166 
	#BKP_RTCCR_ASOE
 (1 << 8)

	)

169 
	#BKP_RTCCR_CCO
 (1 << 7)

	)

172 
	#BKP_RTCCR_CAL_LSB
 0

	)

177 
	#BKP_CR_TAL
 (1 << 1)

	)

180 
	#BKP_CR_TPE
 (1 << 0)

	)

185 
	#BKP_CSR_TIF
 (1 << 9)

	)

188 
	#BKP_CSR_TEF
 (1 << 8)

	)

191 
	#BKP_CSR_TPIE
 (1 << 2)

	)

194 
	#BKP_CSR_CTI
 (1 << 1)

	)

197 
	#BKP_CSR_CTE
 (1 << 0)

	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\crc.h

33 #i‚de‡
LIBOPENCM3_CRC_H


34 
	#LIBOPENCM3_CRC_H


	)

36 
	~<lib›ícm3/°m32/comm⁄/¸c_comm⁄_Æl.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\dac.h

31 #i‚de‡
LIBOPENCM3_DAC_H


32 
	#LIBOPENCM3_DAC_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/dac_comm⁄_Æl.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\dma.h

31 #i‚de‡
LIBOPENCM3_DMA_H


32 
	#LIBOPENCM3_DMA_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/dma_comm⁄_l1f013.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\ethernet.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‚de‡
LIBOPENCM3_ETHERNET_H


24 
	#LIBOPENCM3_ETHERNET_H


	)

27 
	#ETH_MACCR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x00)

	)

28 
	#ETH_MACFFR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x04)

	)

29 
	#ETH_MACHTHR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x08)

	)

30 
	#ETH_MACHTLR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x0C)

	)

31 
	#ETH_MACMIIAR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x10)

	)

32 
	#ETH_MACMIIDR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x14)

	)

33 
	#ETH_MACFCR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x18)

	)

34 
	#ETH_MACVLANTR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x1C)

	)

35 
	#ETH_MACRWUFFR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x28)

	)

36 
	#ETH_MACPMTCSR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x2C)

	)

37 
	#ETH_MACSR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x38)

	)

38 
	#ETH_MACIMR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x3C)

	)

39 
	#ETH_MACA0HR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x40)

	)

40 
	#ETH_MACA0LR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x44)

	)

41 
	#ETH_MACA1HR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x48)

	)

42 
	#ETH_MACA1LR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x4C)

	)

43 
	#ETH_MACA2HR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x50)

	)

44 
	#ETH_MACA2LR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x54)

	)

45 
	#ETH_MACA3HR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x58)

	)

46 
	#ETH_MACA3LR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x5C)

	)

49 
	#ETH_MMCCR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x100)

	)

50 
	#ETH_MMCRIR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x104)

	)

51 
	#ETH_MMCTIR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x108)

	)

52 
	#ETH_MMCRIMR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x10C)

	)

53 
	#ETH_MMCTIMR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x110)

	)

54 
	#ETH_MMCTGFSCCR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x14C)

	)

55 
	#ETH_MMCTGFMSCCR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x150)

	)

56 
	#ETH_MMCTGFCR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x168)

	)

57 
	#ETH_MMCRFCECR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x194)

	)

58 
	#ETH_MMCRFAECR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x198)

	)

59 
	#ETH_MMCRGUFCR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x1C4)

	)

62 
	#ETH_PTPTSCR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x700)

	)

63 
	#ETH_PTPSSIR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x704)

	)

64 
	#ETH_PTPTSHR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x708)

	)

65 
	#ETH_PTPTSLR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x70C)

	)

66 
	#ETH_PTPTSHUR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x710)

	)

67 
	#ETH_PTPTSLUR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x714)

	)

68 
	#ETH_PTPTSAR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x718)

	)

69 
	#ETH_PTPTTHR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x71C)

	)

70 
	#ETH_PTPTTLR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x720)

	)

73 
	#ETH_DMABMR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x1000)

	)

74 
	#ETH_DMATPDR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x1004)

	)

75 
	#ETH_DMARPDR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x1008)

	)

76 
	#ETH_DMARDLAR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x100C)

	)

77 
	#ETH_DMATDLAR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x1010)

	)

78 
	#ETH_DMATDLAR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x1010)

	)

79 
	#ETH_DMASR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x1014)

	)

80 
	#ETH_DMAOMR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x1018)

	)

81 
	#ETH_DMAIER
 
	`MMIO32
(
ETHERNET_BASE
 + 0x101C)

	)

82 
	#ETH_DMAMFBOCR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x1020)

	)

83 
	#ETH_DMACHTDR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x1048)

	)

84 
	#ETH_DMACHRDR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x104C)

	)

85 
	#ETH_DMACHTBAR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x1050)

	)

86 
	#ETH_DMACHRBAR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x1054)

	)

90 
	#ETH_MACCR_RE
 0x00000004

	)

91 
	#ETH_MACCR_TE
 0x00000008

	)

92 
	#ETH_MACCR_DC
 0x00000010

	)

93 
	#ETH_MACCR_BL
 0x00000060

	)

94 
	#ETH_MACCR_APCS
 0x00000080

	)

95 
	#ETH_MACCR_RD
 0x00000200

	)

96 
	#ETH_MACCR_IPCO
 0x00000400

	)

97 
	#ETH_MACCR_DM
 0x00000800

	)

98 
	#ETH_MACCR_LM
 0x00001000

	)

99 
	#ETH_MACCR_ROD
 0x00002000

	)

100 
	#ETH_MACCR_FES
 0x00004000

	)

101 
	#ETH_MACCR_CSD
 0x00010000

	)

102 
	#ETH_MACCR_IFG
 0x000E0000

	)

103 
	#ETH_MACCR_JD
 0x00400000

	)

104 
	#ETH_MACCR_WD
 0x00800000

	)

107 
	#ETH_MACFFR_PM
 0x00000001

	)

108 
	#ETH_MACFFR_HU
 0x00000002

	)

109 
	#ETH_MACFFR_HM
 0x00000004

	)

110 
	#ETH_MACFFR_DAIF
 0x00000008

	)

111 
	#ETH_MACFFR_PAM
 0x00000010

	)

112 
	#ETH_MACFFR_BFD
 0x00000020

	)

113 
	#ETH_MACFFR_PCF
 0x000000C0

	)

114 
	#ETH_MACFFR_SAIF
 0x00000100

	)

115 
	#ETH_MACFFR_SAF
 0x00000200

	)

116 
	#ETH_MACFFR_HPF
 0x00000400

	)

117 
	#ETH_MACFFR_PA
 0x80000000

	)

120 
	#ETH_MACMIIAR_MB
 0x0001

	)

121 
	#ETH_MACMIIAR_MW
 0x0002

	)

123 
	#ETH_MACMIIAR_CR_MASK
 0x001C

	)

124 
	#ETH_MACMIIAR_CR_HCLK_DIV_42
 0x0000

	)

125 
	#ETH_MACMIIAR_CR_HCLK_DIV_16
 0x0008

	)

126 
	#ETH_MACMIIAR_CR_HCLK_DIV_24
 0x000C

	)

127 
	#ETH_MACMIIAR_MR
 0x07C0

	)

128 
	#ETH_MACMIIAR_PA
 0xF800

	)

131 
	#ETH_MACFCR_FCB
 0x00000001

	)

132 
	#ETH_MACFCR_BPA
 0x00000001

	)

133 
	#ETH_MACFCR_TFCE
 0x00000002

	)

134 
	#ETH_MACFCR_RFCE
 0x00000004

	)

135 
	#ETH_MACFCR_UPFD
 0x00000008

	)

136 
	#ETH_MACFCR_PLT
 0x00000030

	)

137 
	#ETH_MACFCR_ZQPD
 0x00000080

	)

138 
	#ETH_MACFCR_PT
 0xFFFF0000

	)

141 
	#ETH_MACSR_PMTS
 0x0008

	)

142 
	#ETH_MACSR_MMCS
 0x0010

	)

143 
	#ETH_MACSR_MMCRS
 0x0020

	)

144 
	#ETH_MACSR_MMCTS
 0x0040

	)

145 
	#ETH_MACSR_TSTS
 0x0200

	)

148 
	#ETH_MACIMR_PMTIM
 0x0008

	)

149 
	#ETH_MACIMR_TSTIM
 0x0200

	)

153 
	#ETH_DMABMR_SR
 0x00000001

	)

154 
	#ETH_DMABMR_DA
 0x00000002

	)

155 
	#ETH_DMABMR_DSL_MASK
 0x0000007C

	)

156 
	#ETH_DMABMR_PBL_MASK
 0x00003F00

	)

157 
	#ETH_DMABMR_RTPR_MASK
 0x0000C000

	)

158 
	#ETH_DMABMR_RTPR_1TO1
 0x00000000

	)

159 
	#ETH_DMABMR_RTPR_2TO1
 0x00004000

	)

160 
	#ETH_DMABMR_RTPR_3TO1
 0x00008000

	)

161 
	#ETH_DMABMR_RTPR_4TO1
 0x0000C000

	)

162 
	#ETH_DMABMR_FB
 0x00010000

	)

163 
	#ETH_DMABMR_RDP_MASK
 0x007E0000

	)

164 
	#ETH_DMABMR_USP
 0x00800000

	)

165 
	#ETH_DMABMR_FPM
 0x01000000

	)

166 
	#ETH_DMABMR_AAB
 0x02000000

	)

169 
	#ETH_DMAOMR_SR
 0x00000002

	)

170 
	#ETH_DMAOMR_OSF
 0x00000004

	)

171 
	#ETH_DMAOMR_RTC_MASK
 0x00000018

	)

172 
	#ETH_DMAOMR_RTC_64
 0x00000000

	)

173 
	#ETH_DMAOMR_RTC_32
 0x00000008

	)

174 
	#ETH_DMAOMR_RTC_96
 0x00000010

	)

175 
	#ETH_DMAOMR_RTC_128
 0x00000018

	)

176 
	#ETH_DMAOMR_FUGF
 0x00000040

	)

177 
	#ETH_DMAOMR_FEF
 0x00000080

	)

178 
	#ETH_DMAOMR_ST
 0x00002000

	)

179 
	#ETH_DMAOMR_TTC_MASK
 0x0001C000

	)

180 
	#ETH_DMAOMR_FTF
 0x00100000

	)

181 
	#ETH_DMAOMR_TSF
 0x00200000

	)

182 
	#ETH_DMAOMR_DFRF
 0x01000000

	)

183 
	#ETH_DMAOMR_RSF
 0x02000000

	)

184 
	#ETH_DMAOMR_DTCEFD
 0x04000000

	)

187 
	#ETH_DMAIER_TIE
 0x00000001

	)

188 
	#ETH_DMAIER_TPSIE
 0x00000002

	)

189 
	#ETH_DMAIER_TBUIE
 0x00000004

	)

190 
	#ETH_DMAIER_TJTIE
 0x00000008

	)

191 
	#ETH_DMAIER_ROIE
 0x00000010

	)

192 
	#ETH_DMAIER_TUIE
 0x00000020

	)

193 
	#ETH_DMAIER_RIE
 0x00000040

	)

194 
	#ETH_DMAIER_RBUIE
 0x00000080

	)

195 
	#ETH_DMAIER_RPSIE
 0x00000100

	)

196 
	#ETH_DMAIER_RWTIE
 0x00000200

	)

197 
	#ETH_DMAIER_ETIE
 0x00000400

	)

198 
	#ETH_DMAIER_FBEIE
 0x00002000

	)

199 
	#ETH_DMAIER_ERIE
 0x00004000

	)

200 
	#ETH_DMAIER_AISE
 0x00008000

	)

201 
	#ETH_DMAIER_NSIE
 0x00010000

	)

203 
BEGIN_DECLS


205 
ëh_smi_wrôe
(
uöt8_t
 
phy
, uöt8_à
ªg
, 
uöt16_t
 
d©a
);

206 
uöt16_t
 
ëh_smi_ªad
(
uöt8_t
 
phy
, uöt8_à
ªg
);

208 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\exti.h

36 #i‚de‡
LIBOPENCM3_EXTI_H


37 
	#LIBOPENCM3_EXTI_H


	)

39 
	~<lib›ícm3/°m32/comm⁄/exti_comm⁄_Æl.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\flash.h

41 #i‚de‡
LIBOPENCM3_FLASH_H


42 
	#LIBOPENCM3_FLASH_H


	)

46 
	~<lib›ícm3/°m32/comm⁄/Êash_comm⁄_f01.h
>

53 
	#FLASH_OPTION_BYTE_0
 
	`FLASH_OPTION_BYTE
(0)

	)

54 
	#FLASH_OPTION_BYTE_1
 
	`FLASH_OPTION_BYTE
(1)

	)

55 
	#FLASH_OPTION_BYTE_2
 
	`FLASH_OPTION_BYTE
(2)

	)

56 
	#FLASH_OPTION_BYTE_3
 
	`FLASH_OPTION_BYTE
(3)

	)

57 
	#FLASH_OPTION_BYTE_4
 
	`FLASH_OPTION_BYTE
(4)

	)

58 
	#FLASH_OPTION_BYTE_5
 
	`FLASH_OPTION_BYTE
(5)

	)

59 
	#FLASH_OPTION_BYTE_6
 
	`FLASH_OPTION_BYTE
(6)

	)

60 
	#FLASH_OPTION_BYTE_7
 
	`FLASH_OPTION_BYTE
(7)

	)

72 
	#FLASH_ACR_LATENCY_0WS
 0x00

	)

73 
	#FLASH_ACR_LATENCY_1WS
 0x01

	)

74 
	#FLASH_ACR_LATENCY_2WS
 0x02

	)

76 
	#FLASH_ACR_HLFCYA
 (1 << 3)

	)

80 
	#FLASH_SR_EOP
 (1 << 5)

	)

81 
	#FLASH_SR_WRPRTERR
 (1 << 4)

	)

82 
	#FLASH_SR_PGERR
 (1 << 2)

	)

83 
	#FLASH_SR_BSY
 (1 << 0)

	)

91 
	#FLASH_OBR_NRST_STDBY
 (1 << 4)

	)

92 
	#FLASH_OBR_NRST_STOP
 (1 << 3)

	)

93 
	#FLASH_OBR_WDG_SW
 (1 << 2)

	)

94 
	#FLASH_OBR_RDPRT_EN
 (1 << 
FLASH_OBR_RDPRT_SHIFT
)

	)

101 
	#FLASH_RDP_KEY
 ((
uöt16_t
)0x00a5)

	)

105 
BEGIN_DECLS


107 
Êash_hÆfcy˛e_íabÀ
();

108 
Êash_hÆfcy˛e_dißbÀ
();

109 
Êash_u∆ock_uµî
();

110 
Êash_lock_uµî
();

111 
Êash_˛ór_pgîr_Êag_uµî
();

112 
Êash_˛ór_e›_Êag_uµî
();

113 
Êash_˛ór_wΩπîr_Êag_uµî
();

114 
Êash_˛ór_bsy_Êag_uµî
();

116 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\gpio.h

36 #i‚de‡
LIBOPENCM3_GPIO_H


37 
	#LIBOPENCM3_GPIO_H


	)

39 
	~<lib›ícm3/°m32/comm⁄/gpio_comm⁄_Æl.h
>

49 
	#GPIOA
 
GPIO_PORT_A_BASE


	)

50 
	#GPIOB
 
GPIO_PORT_B_BASE


	)

51 
	#GPIOC
 
GPIO_PORT_C_BASE


	)

52 
	#GPIOD
 
GPIO_PORT_D_BASE


	)

53 
	#GPIOE
 
GPIO_PORT_E_BASE


	)

54 
	#GPIOF
 
GPIO_PORT_F_BASE


	)

55 
	#GPIOG
 
GPIO_PORT_G_BASE


	)

63 
	#GPIO_CAN1_RX
 
GPIO11


	)

64 
	#GPIO_CAN1_TX
 
GPIO12


	)

65 
	#GPIO_CAN_RX
 
GPIO_CAN1_RX


	)

66 
	#GPIO_CAN_TX
 
GPIO_CAN1_TX


	)

68 
	#GPIO_CAN_PB_RX
 
GPIO8


	)

69 
	#GPIO_CAN_PB_TX
 
GPIO9


	)

70 
	#GPIO_CAN1_PB_RX
 
GPIO_CAN_PB_RX


	)

71 
	#GPIO_CAN1_PB_TX
 
GPIO_CAN_PB_TX


	)

73 
	#GPIO_CAN_PD_RX
 
GPIO0


	)

74 
	#GPIO_CAN_PD_TX
 
GPIO1


	)

75 
	#GPIO_CAN1_PD_RX
 
GPIO_CAN_PD_RX


	)

76 
	#GPIO_CAN1_PD_TX
 
GPIO_CAN_PD_TX


	)

79 
	#GPIO_BANK_CAN1_RX
 
GPIOA


	)

80 
	#GPIO_BANK_CAN1_TX
 
GPIOA


	)

81 
	#GPIO_BANK_CAN_RX
 
GPIO_BANK_CAN1_RX


	)

82 
	#GPIO_BANK_CAN_TX
 
GPIO_BANK_CAN1_TX


	)

84 
	#GPIO_BANK_CAN_PB_RX
 
GPIOB


	)

85 
	#GPIO_BANK_CAN_PB_TX
 
GPIOB


	)

86 
	#GPIO_BANK_CAN1_PB_RX
 
GPIO_BANK_CAN_PB_RX


	)

87 
	#GPIO_BANK_CAN1_PB_TX
 
GPIO_BANK_CAN_PB_TX


	)

89 
	#GPIO_BANK_CAN_PD_RX
 
GPIOD


	)

90 
	#GPIO_BANK_CAN_PD_TX
 
GPIOD


	)

91 
	#GPIO_BANK_CAN1_PD_RX
 
GPIO_BANK_CAN_PD_RX


	)

92 
	#GPIO_BANK_CAN1_PD_TX
 
GPIO_BANK_CAN_PD_TX


	)

95 
	#GPIO_CAN2_RX
 
GPIO12


	)

96 
	#GPIO_CAN2_TX
 
GPIO13


	)

98 
	#GPIO_CAN2_RE_RX
 
GPIO5


	)

99 
	#GPIO_CAN2_RE_TX
 
GPIO6


	)

102 
	#GPIO_BANK_CAN2_RX
 
GPIOB


	)

103 
	#GPIO_BANK_CAN2_TX
 
GPIOB


	)

105 
	#GPIO_BANK_CAN2_RE_RX
 
GPIOB


	)

106 
	#GPIO_BANK_CAN2_RE_TX
 
GPIOB


	)

109 
	#GPIO_JTMS_SWDIO
 
GPIO13


	)

110 
	#GPIO_JTCK_SWCLK
 
GPIO14


	)

111 
	#GPIO_JTDI
 
GPIO15


	)

112 
	#GPIO_JTDO_TRACESWO
 
GPIO3


	)

113 
	#GPIO_JNTRST
 
GPIO4


	)

114 
	#GPIO_TRACECK
 
GPIO2


	)

115 
	#GPIO_TRACED0
 
GPIO3


	)

116 
	#GPIO_TRACED1
 
GPIO4


	)

117 
	#GPIO_TRACED2
 
GPIO5


	)

118 
	#GPIO_TRACED3
 
GPIO6


	)

121 
	#GPIO_BANK_JTMS_SWDIO
 
GPIOA


	)

122 
	#GPIO_BANK_JTCK_SWCLK
 
GPIOA


	)

123 
	#GPIO_BANK_JTDI
 
GPIOA


	)

124 
	#GPIO_BANK_JTDO_TRACESWO
 
GPIOB


	)

125 
	#GPIO_BANK_JNTRST
 
GPIOB


	)

126 
	#GPIO_BANK_TRACECK
 
GPIOE


	)

127 
	#GPIO_BANK_TRACED0
 
GPIOE


	)

128 
	#GPIO_BANK_TRACED1
 
GPIOE


	)

129 
	#GPIO_BANK_TRACED2
 
GPIOE


	)

130 
	#GPIO_BANK_TRACED3
 
GPIOE


	)

133 
	#GPIO_TIM5_CH1
 
GPIO0


	)

134 
	#GPIO_TIM5_CH2
 
GPIO1


	)

135 
	#GPIO_TIM5_CH3
 
GPIO2


	)

136 
	#GPIO_TIM5_CH4
 
GPIO3


	)

139 
	#GPIO_BANK_TIM5_CH1
 
GPIOA


	)

140 
	#GPIO_BANK_TIM5_CH2
 
GPIOA


	)

141 
	#GPIO_BANK_TIM5_CH3
 
GPIOA


	)

142 
	#GPIO_BANK_TIM5_CH4
 
GPIOA


	)

143 
	#GPIO_BANK_TIM5
 
GPIOA


	)

146 
	#GPIO_TIM4_CH1
 
GPIO6


	)

147 
	#GPIO_TIM4_CH2
 
GPIO7


	)

148 
	#GPIO_TIM4_CH3
 
GPIO8


	)

149 
	#GPIO_TIM4_CH4
 
GPIO9


	)

151 
	#GPIO_TIM4_RE_CH1
 
GPIO12


	)

152 
	#GPIO_TIM4_RE_CH2
 
GPIO13


	)

153 
	#GPIO_TIM4_RE_CH3
 
GPIO14


	)

154 
	#GPIO_TIM4_RE_CH4
 
GPIO15


	)

157 
	#GPIO_BANK_TIM4_CH1
 
GPIOB


	)

158 
	#GPIO_BANK_TIM4_CH2
 
GPIOB


	)

159 
	#GPIO_BANK_TIM4_CH3
 
GPIOB


	)

160 
	#GPIO_BANK_TIM4_CH4
 
GPIOB


	)

161 
	#GPIO_BANK_TIM4
 
GPIOB


	)

163 
	#GPIO_BANK_TIM4_RE_CH1
 
GPIOD


	)

164 
	#GPIO_BANK_TIM4_RE_CH2
 
GPIOD


	)

165 
	#GPIO_BANK_TIM4_RE_CH3
 
GPIOD


	)

166 
	#GPIO_BANK_TIM4_RE_CH4
 
GPIOD


	)

167 
	#GPIO_BANK_TIM4_RE
 
GPIOD


	)

170 
	#GPIO_TIM3_CH1
 
GPIO6


	)

171 
	#GPIO_TIM3_CH2
 
GPIO7


	)

172 
	#GPIO_TIM3_CH3
 
GPIO0


	)

173 
	#GPIO_TIM3_CH4
 
GPIO1


	)

175 
	#GPIO_TIM3_PR_CH1
 
GPIO4


	)

176 
	#GPIO_TIM3_PR_CH2
 
GPIO5


	)

177 
	#GPIO_TIM3_PR_CH3
 
GPIO0


	)

178 
	#GPIO_TIM3_PR_CH4
 
GPIO1


	)

180 
	#GPIO_TIM3_FR_CH1
 
GPIO6


	)

181 
	#GPIO_TIM3_FR_CH2
 
GPIO7


	)

182 
	#GPIO_TIM3_FR_CH3
 
GPIO8


	)

183 
	#GPIO_TIM3_FR_CH4
 
GPIO9


	)

186 
	#GPIO_BANK_TIM3_CH1
 
GPIOA


	)

187 
	#GPIO_BANK_TIM3_CH2
 
GPIOA


	)

188 
	#GPIO_BANK_TIM3_CH3
 
GPIOB


	)

189 
	#GPIO_BANK_TIM3_CH4
 
GPIOB


	)

190 
	#GPIO_BANK_TIM3_CH12
 
GPIOA


	)

191 
	#GPIO_BANK_TIM3_CH34
 
GPIOB


	)

193 
	#GPIO_BANK_TIM3_PR_CH1
 
GPIOB


	)

194 
	#GPIO_BANK_TIM3_PR_CH2
 
GPIOB


	)

195 
	#GPIO_BANK_TIM3_PR_CH3
 
GPIOB


	)

196 
	#GPIO_BANK_TIM3_PR_CH4
 
GPIOB


	)

197 
	#GPIO_BANK_TIM3_PR
 
GPIOB


	)

199 
	#GPIO_BANK_TIM3_FR_CH1
 
GPIOC


	)

200 
	#GPIO_BANK_TIM3_FR_CH2
 
GPIOC


	)

201 
	#GPIO_BANK_TIM3_FR_CH3
 
GPIOC


	)

202 
	#GPIO_BANK_TIM3_FR_CH4
 
GPIOC


	)

203 
	#GPIO_BANK_TIM3_FR
 
GPIOC


	)

206 
	#GPIO_TIM2_CH1_ETR
 
GPIO0


	)

207 
	#GPIO_TIM2_CH2
 
GPIO1


	)

208 
	#GPIO_TIM2_CH3
 
GPIO2


	)

209 
	#GPIO_TIM2_CH4
 
GPIO3


	)

211 
	#GPIO_TIM2_PR1_CH1_ETR
 
GPIO15


	)

212 
	#GPIO_TIM2_PR1_CH2
 
GPIO3


	)

213 
	#GPIO_TIM2_PR1_CH3
 
GPIO2


	)

214 
	#GPIO_TIM2_PR1_CH4
 
GPIO3


	)

216 
	#GPIO_TIM2_PR2_CH1_ETR
 
GPIO0


	)

217 
	#GPIO_TIM2_PR2_CH2
 
GPIO1


	)

218 
	#GPIO_TIM2_PR2_CH3
 
GPIO10


	)

219 
	#GPIO_TIM2_PR2_CH4
 
GPIO11


	)

221 
	#GPIO_TIM2_FR_CH1_ETR
 
GPIO15


	)

222 
	#GPIO_TIM2_FR_CH2
 
GPIO3


	)

223 
	#GPIO_TIM2_FR_CH3
 
GPIO10


	)

224 
	#GPIO_TIM2_FR_CH4
 
GPIO11


	)

227 
	#GPIO_BANK_TIM2_CH1_ETR
 
GPIOA


	)

228 
	#GPIO_BANK_TIM2_CH2
 
GPIOA


	)

229 
	#GPIO_BANK_TIM2_CH3
 
GPIOA


	)

230 
	#GPIO_BANK_TIM2_CH4
 
GPIOA


	)

231 
	#GPIO_BANK_TIM2
 
GPIOA


	)

233 
	#GPIO_BANK_TIM2_PR1_CH1_ETR
 
GPIOA


	)

234 
	#GPIO_BANK_TIM2_PR1_CH2
 
GPIOB


	)

235 
	#GPIO_BANK_TIM2_PR1_CH3
 
GPIOA


	)

236 
	#GPIO_BANK_TIM2_PR1_CH4
 
GPIOA


	)

237 
	#GPIO_BANK_TIM2_PR1_CH134
 
GPIOA


	)

239 
	#GPIO_BANK_TIM2_PR2_CH1_ETR
 
GPIOA


	)

240 
	#GPIO_BANK_TIM2_PR2_CH2
 
GPIOA


	)

241 
	#GPIO_BANK_TIM2_PR2_CH3
 
GPIOB


	)

242 
	#GPIO_BANK_TIM2_PR2_CH4
 
GPIOB


	)

243 
	#GPIO_BANK_TIM2_PR2_CH12
 
GPIOA


	)

244 
	#GPIO_BANK_TIM2_PR2_CH34
 
GPIOB


	)

246 
	#GPIO_BANK_TIM2_FR_CH1_ETR
 
GPIOA


	)

247 
	#GPIO_BANK_TIM2_FR_CH2
 
GPIOB


	)

248 
	#GPIO_BANK_TIM2_FR_CH3
 
GPIOB


	)

249 
	#GPIO_BANK_TIM2_FR_CH4
 
GPIOB


	)

250 
	#GPIO_BANK_TIM2_FR_CH234
 
GPIOB


	)

253 
	#GPIO_TIM1_ETR
 
GPIO12


	)

254 
	#GPIO_TIM1_CH1
 
GPIO8


	)

255 
	#GPIO_TIM1_CH2
 
GPIO9


	)

256 
	#GPIO_TIM1_CH3
 
GPIO10


	)

257 
	#GPIO_TIM1_CH4
 
GPIO11


	)

258 
	#GPIO_TIM1_BKIN
 
GPIO12


	)

259 
	#GPIO_TIM1_CH1N
 
GPIO13


	)

260 
	#GPIO_TIM1_CH2N
 
GPIO14


	)

261 
	#GPIO_TIM1_CH3N
 
GPIO15


	)

263 
	#GPIO_TIM1_PR_ETR
 
GPIO12


	)

264 
	#GPIO_TIM1_PR_CH1
 
GPIO8


	)

265 
	#GPIO_TIM1_PR_CH2
 
GPIO9


	)

266 
	#GPIO_TIM1_PR_CH3
 
GPIO10


	)

267 
	#GPIO_TIM1_PR_CH4
 
GPIO11


	)

268 
	#GPIO_TIM1_PR_BKIN
 
GPIO6


	)

269 
	#GPIO_TIM1_PR_CH1N
 
GPIO7


	)

270 
	#GPIO_TIM1_PR_CH2N
 
GPIO0


	)

271 
	#GPIO_TIM1_PR_CH3N
 
GPIO1


	)

273 
	#GPIO_TIM1_FR_ETR
 
GPIO7


	)

274 
	#GPIO_TIM1_FR_CH1
 
GPIO9


	)

275 
	#GPIO_TIM1_FR_CH2
 
GPIO11


	)

276 
	#GPIO_TIM1_FR_CH3
 
GPIO13


	)

277 
	#GPIO_TIM1_FR_CH4
 
GPIO14


	)

278 
	#GPIO_TIM1_FR_BKIN
 
GPIO15


	)

279 
	#GPIO_TIM1_FR_CH1N
 
GPIO8


	)

280 
	#GPIO_TIM1_FR_CH2N
 
GPIO10


	)

281 
	#GPIO_TIM1_FR_CH3N
 
GPIO12


	)

284 
	#GPIO_BANK_TIM1_ETR
 
GPIOA


	)

285 
	#GPIO_BANK_TIM1_CH1
 
GPIOA


	)

286 
	#GPIO_BANK_TIM1_CH2
 
GPIOA


	)

287 
	#GPIO_BANK_TIM1_CH3
 
GPIOA


	)

288 
	#GPIO_BANK_TIM1_CH4
 
GPIOA


	)

289 
	#GPIO_BANK_TIM1_BKIN
 
GPIOB


	)

290 
	#GPIO_BANK_TIM1_CH1N
 
GPIOB


	)

291 
	#GPIO_BANK_TIM1_CH2N
 
GPIOB


	)

292 
	#GPIO_BANK_TIM1_CH3N
 
GPIOB


	)

293 
	#GPIO_BANK_TIM1_ETR_CH1234
 
GPIOA


	)

294 
	#GPIO_BANK_TIM1_BKIN_CH123N
 
GPIOB


	)

296 
	#GPIO_BANK_TIM1_PR_ETR
 
GPIOA


	)

297 
	#GPIO_BANK_TIM1_PR_CH1
 
GPIOA


	)

298 
	#GPIO_BANK_TIM1_PR_CH2
 
GPIOA


	)

299 
	#GPIO_BANK_TIM1_PR_CH3
 
GPIOA


	)

300 
	#GPIO_BANK_TIM1_PR_CH4
 
GPIOA


	)

301 
	#GPIO_BANK_TIM1_PR_BKIN
 
GPIOA


	)

302 
	#GPIO_BANK_TIM1_PR_CH1N
 
GPIOA


	)

303 
	#GPIO_BANK_TIM1_PR_CH2N
 
GPIOB


	)

304 
	#GPIO_BANK_TIM1_PR_CH3N
 
GPIOB


	)

305 
	#GPIO_BANK_TIM1_PR_ETR_CH1234_BKIN_CH1N
 
GPIOA


	)

306 
	#GPIO_BANK_TIM1_PR_CH23N
 
GPIOB


	)

308 
	#GPIO_BANK_TIM1_FR_ETR
 
GPIOE


	)

309 
	#GPIO_BANK_TIM1_FR_CH1
 
GPIOE


	)

310 
	#GPIO_BANK_TIM1_FR_CH2
 
GPIOE


	)

311 
	#GPIO_BANK_TIM1_FR_CH3
 
GPIOE


	)

312 
	#GPIO_BANK_TIM1_FR_CH4
 
GPIOE


	)

313 
	#GPIO_BANK_TIM1_FR_BKIN
 
GPIOE


	)

314 
	#GPIO_BANK_TIM1_FR_CH1N
 
GPIOE


	)

315 
	#GPIO_BANK_TIM1_FR_CH2N
 
GPIOE


	)

316 
	#GPIO_BANK_TIM1_FR_CH3N
 
GPIOE


	)

317 
	#GPIO_BANK_TIM1_FR
 
GPIOE


	)

320 
	#GPIO_UART5_TX
 
GPIO12


	)

321 
	#GPIO_UART5_RX
 
GPIO2


	)

324 
	#GPIO_BANK_UART5_TX
 
GPIOC


	)

325 
	#GPIO_BANK_UART5_RX
 
GPIOD


	)

328 
	#GPIO_UART4_TX
 
GPIO10


	)

329 
	#GPIO_UART4_RX
 
GPIO11


	)

332 
	#GPIO_BANK_UART4_TX
 
GPIOC


	)

333 
	#GPIO_BANK_UART4_RX
 
GPIOC


	)

336 
	#GPIO_USART3_TX
 
GPIO10


	)

337 
	#GPIO_USART3_RX
 
GPIO11


	)

338 
	#GPIO_USART3_CK
 
GPIO12


	)

339 
	#GPIO_USART3_CTS
 
GPIO13


	)

340 
	#GPIO_USART3_RTS
 
GPIO14


	)

342 
	#GPIO_USART3_PR_TX
 
GPIO10


	)

343 
	#GPIO_USART3_PR_RX
 
GPIO11


	)

344 
	#GPIO_USART3_PR_CK
 
GPIO12


	)

345 
	#GPIO_USART3_PR_CTS
 
GPIO13


	)

346 
	#GPIO_USART3_PR_RTS
 
GPIO14


	)

348 
	#GPIO_USART3_FR_TX
 
GPIO8


	)

349 
	#GPIO_USART3_FR_RX
 
GPIO9


	)

350 
	#GPIO_USART3_FR_CK
 
GPIO10


	)

351 
	#GPIO_USART3_FR_CTS
 
GPIO11


	)

352 
	#GPIO_USART3_FR_RTS
 
GPIO12


	)

355 
	#GPIO_BANK_USART3_TX
 
GPIOB


	)

356 
	#GPIO_BANK_USART3_RX
 
GPIOB


	)

357 
	#GPIO_BANK_USART3_CK
 
GPIOB


	)

358 
	#GPIO_BANK_USART3_CTS
 
GPIOB


	)

359 
	#GPIO_BANK_USART3_RTS
 
GPIOB


	)

361 
	#GPIO_BANK_USART3_PR_TX
 
GPIOC


	)

362 
	#GPIO_BANK_USART3_PR_RX
 
GPIOC


	)

363 
	#GPIO_BANK_USART3_PR_CK
 
GPIOC


	)

364 
	#GPIO_BANK_USART3_PR_CTS
 
GPIOB


	)

365 
	#GPIO_BANK_USART3_PR_RTS
 
GPIOB


	)

367 
	#GPIO_BANK_USART3_FR_TX
 
GPIOD


	)

368 
	#GPIO_BANK_USART3_FR_RX
 
GPIOD


	)

369 
	#GPIO_BANK_USART3_FR_CK
 
GPIOD


	)

370 
	#GPIO_BANK_USART3_FR_CTS
 
GPIOD


	)

371 
	#GPIO_BANK_USART3_FR_RTS
 
GPIOD


	)

374 
	#GPIO_USART2_CTS
 
GPIO0


	)

375 
	#GPIO_USART2_RTS
 
GPIO1


	)

376 
	#GPIO_USART2_TX
 
GPIO2


	)

377 
	#GPIO_USART2_RX
 
GPIO3


	)

378 
	#GPIO_USART2_CK
 
GPIO4


	)

380 
	#GPIO_USART2_RE_CTS
 
GPIO3


	)

381 
	#GPIO_USART2_RE_RTS
 
GPIO4


	)

382 
	#GPIO_USART2_RE_TX
 
GPIO5


	)

383 
	#GPIO_USART2_RE_RX
 
GPIO6


	)

384 
	#GPIO_USART2_RE_CK
 
GPIO7


	)

387 
	#GPIO_BANK_USART2_CTS
 
GPIOA


	)

388 
	#GPIO_BANK_USART2_RTS
 
GPIOA


	)

389 
	#GPIO_BANK_USART2_TX
 
GPIOA


	)

390 
	#GPIO_BANK_USART2_RX
 
GPIOA


	)

391 
	#GPIO_BANK_USART2_CK
 
GPIOA


	)

393 
	#GPIO_BANK_USART2_RE_CTS
 
GPIOD


	)

394 
	#GPIO_BANK_USART2_RE_RTS
 
GPIOD


	)

395 
	#GPIO_BANK_USART2_RE_TX
 
GPIOD


	)

396 
	#GPIO_BANK_USART2_RE_RX
 
GPIOD


	)

397 
	#GPIO_BANK_USART2_RE_CK
 
GPIOD


	)

400 
	#GPIO_USART1_TX
 
GPIO9


	)

401 
	#GPIO_USART1_RX
 
GPIO10


	)

403 
	#GPIO_USART1_RE_TX
 
GPIO6


	)

404 
	#GPIO_USART1_RE_RX
 
GPIO7


	)

407 
	#GPIO_BANK_USART1_TX
 
GPIOA


	)

408 
	#GPIO_BANK_USART1_RX
 
GPIOA


	)

410 
	#GPIO_BANK_USART1_RE_TX
 
GPIOB


	)

411 
	#GPIO_BANK_USART1_RE_RX
 
GPIOB


	)

414 
	#GPIO_I2C1_SMBAI
 
GPIO5


	)

415 
	#GPIO_I2C1_SCL
 
GPIO6


	)

416 
	#GPIO_I2C1_SDA
 
GPIO7


	)

418 
	#GPIO_I2C1_RE_SMBAI
 
GPIO5


	)

419 
	#GPIO_I2C1_RE_SCL
 
GPIO8


	)

420 
	#GPIO_I2C1_RE_SDA
 
GPIO9


	)

423 
	#GPIO_BANK_I2C1_SMBAI
 
GPIOB


	)

424 
	#GPIO_BANK_I2C1_SCL
 
GPIOB


	)

425 
	#GPIO_BANK_I2C1_SDA
 
GPIOB


	)

427 
	#GPIO_BANK_I2C1_RE_SMBAI
 
GPIOB


	)

428 
	#GPIO_BANK_I2C1_RE_SCL
 
GPIOB


	)

429 
	#GPIO_BANK_I2C1_RE_SDA
 
GPIOB


	)

432 
	#GPIO_I2C2_SCL
 
GPIO10


	)

433 
	#GPIO_I2C2_SDA
 
GPIO11


	)

434 
	#GPIO_I2C2_SMBAI
 
GPIO12


	)

437 
	#GPIO_BANK_I2C2_SCL
 
GPIOB


	)

438 
	#GPIO_BANK_I2C2_SDA
 
GPIOB


	)

439 
	#GPIO_BANK_I2C2_SMBAI
 
GPIOB


	)

442 
	#GPIO_SPI1_NSS
 
GPIO4


	)

443 
	#GPIO_SPI1_SCK
 
GPIO5


	)

444 
	#GPIO_SPI1_MISO
 
GPIO6


	)

445 
	#GPIO_SPI1_MOSI
 
GPIO7


	)

447 
	#GPIO_SPI1_RE_NSS
 
GPIO15


	)

448 
	#GPIO_SPI1_RE_SCK
 
GPIO3


	)

449 
	#GPIO_SPI1_RE_MISO
 
GPIO4


	)

450 
	#GPIO_SPI1_RE_MOSI
 
GPIO5


	)

453 
	#GPIO_BANK_SPI1_NSS
 
GPIOA


	)

454 
	#GPIO_BANK_SPI1_SCK
 
GPIOA


	)

455 
	#GPIO_BANK_SPI1_MISO
 
GPIOA


	)

456 
	#GPIO_BANK_SPI1_MOSI
 
GPIOA


	)

458 
	#GPIO_BANK_SPI1_RE_NSS
 
GPIOA


	)

459 
	#GPIO_BANK_SPI1_RE_SCK
 
GPIOB


	)

460 
	#GPIO_BANK_SPI1_RE_MISO
 
GPIOB


	)

461 
	#GPIO_BANK_SPI1_RE_MOSI
 
GPIOB


	)

464 
	#GPIO_SPI2_NSS
 
GPIO12


	)

465 
	#GPIO_SPI2_SCK
 
GPIO13


	)

466 
	#GPIO_SPI2_MISO
 
GPIO14


	)

467 
	#GPIO_SPI2_MOSI
 
GPIO15


	)

470 
	#GPIO_BANK_SPI2_NSS
 
GPIOB


	)

471 
	#GPIO_BANK_SPI2_SCK
 
GPIOB


	)

472 
	#GPIO_BANK_SPI2_MISO
 
GPIOB


	)

473 
	#GPIO_BANK_SPI2_MOSI
 
GPIOB


	)

476 
	#GPIO_SPI3_NSS
 
GPIO15


	)

477 
	#GPIO_SPI3_SCK
 
GPIO3


	)

478 
	#GPIO_SPI3_MISO
 
GPIO4


	)

479 
	#GPIO_SPI3_MOSI
 
GPIO5


	)

481 
	#GPIO_SPI3_RE_NSS
 
GPIO4


	)

482 
	#GPIO_SPI3_RE_SCK
 
GPIO10


	)

483 
	#GPIO_SPI3_RE_MISO
 
GPIO11


	)

484 
	#GPIO_SPI3_RE_MOSI
 
GPIO12


	)

487 
	#GPIO_BANK_SPI3_NSS
 
GPIOA


	)

488 
	#GPIO_BANK_SPI3_SCK
 
GPIOB


	)

489 
	#GPIO_BANK_SPI3_MISO
 
GPIOB


	)

490 
	#GPIO_BANK_SPI3_MOSI
 
GPIOB


	)

492 
	#GPIO_BANK_SPI3_RE_NSS
 
GPIOA


	)

493 
	#GPIO_BANK_SPI3_RE_SCK
 
GPIOC


	)

494 
	#GPIO_BANK_SPI3_RE_MISO
 
GPIOC


	)

495 
	#GPIO_BANK_SPI3_RE_MOSI
 
GPIOC


	)

498 
	#GPIO_ETH_RX_DV_CRS_DV
 
GPIO7


	)

499 
	#GPIO_ETH_RXD0
 
GPIO4


	)

500 
	#GPIO_ETH_RXD1
 
GPIO5


	)

501 
	#GPIO_ETH_RXD2
 
GPIO0


	)

502 
	#GPIO_ETH_RXD3
 
GPIO1


	)

504 
	#GPIO_ETH_RE_RX_DV_CRS_DV
 
GPIO8


	)

505 
	#GPIO_ETH_RE_RXD0
 
GPIO9


	)

506 
	#GPIO_ETH_RE_RXD1
 
GPIO10


	)

507 
	#GPIO_ETH_RE_RXD2
 
GPIO11


	)

508 
	#GPIO_ETH_RE_RXD3
 
GPIO12


	)

511 
	#GPIO_BANK_ETH_RX_DV_CRS_DV
 
GPIOA


	)

512 
	#GPIO_BANK_ETH_RXD0
 
GPIOC


	)

513 
	#GPIO_BANK_ETH_RXD1
 
GPIOC


	)

514 
	#GPIO_BANK_ETH_RXD2
 
GPIOB


	)

515 
	#GPIO_BANK_ETH_RXD3
 
GPIOB


	)

517 
	#GPIO_BANK_ETH_RE_RX_DV_CRS_DV
 
GPIOD


	)

518 
	#GPIO_BANK_ETH_RE_RXD0
 
GPIOD


	)

519 
	#GPIO_BANK_ETH_RE_RXD1
 
GPIOD


	)

520 
	#GPIO_BANK_ETH_RE_RXD2
 
GPIOD


	)

521 
	#GPIO_BANK_ETH_RE_RXD3
 
GPIOD


	)

526 
	#GPIO_CRL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00)

	)

527 
	#GPIOA_CRL
 
	`GPIO_CRL
(
GPIOA
)

	)

528 
	#GPIOB_CRL
 
	`GPIO_CRL
(
GPIOB
)

	)

529 
	#GPIOC_CRL
 
	`GPIO_CRL
(
GPIOC
)

	)

530 
	#GPIOD_CRL
 
	`GPIO_CRL
(
GPIOD
)

	)

531 
	#GPIOE_CRL
 
	`GPIO_CRL
(
GPIOE
)

	)

532 
	#GPIOF_CRL
 
	`GPIO_CRL
(
GPIOF
)

	)

533 
	#GPIOG_CRL
 
	`GPIO_CRL
(
GPIOG
)

	)

536 
	#GPIO_CRH
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x04)

	)

537 
	#GPIOA_CRH
 
	`GPIO_CRH
(
GPIOA
)

	)

538 
	#GPIOB_CRH
 
	`GPIO_CRH
(
GPIOB
)

	)

539 
	#GPIOC_CRH
 
	`GPIO_CRH
(
GPIOC
)

	)

540 
	#GPIOD_CRH
 
	`GPIO_CRH
(
GPIOD
)

	)

541 
	#GPIOE_CRH
 
	`GPIO_CRH
(
GPIOE
)

	)

542 
	#GPIOF_CRH
 
	`GPIO_CRH
(
GPIOF
)

	)

543 
	#GPIOG_CRH
 
	`GPIO_CRH
(
GPIOG
)

	)

546 
	#GPIO_IDR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x08)

	)

547 
	#GPIOA_IDR
 
	`GPIO_IDR
(
GPIOA
)

	)

548 
	#GPIOB_IDR
 
	`GPIO_IDR
(
GPIOB
)

	)

549 
	#GPIOC_IDR
 
	`GPIO_IDR
(
GPIOC
)

	)

550 
	#GPIOD_IDR
 
	`GPIO_IDR
(
GPIOD
)

	)

551 
	#GPIOE_IDR
 
	`GPIO_IDR
(
GPIOE
)

	)

552 
	#GPIOF_IDR
 
	`GPIO_IDR
(
GPIOF
)

	)

553 
	#GPIOG_IDR
 
	`GPIO_IDR
(
GPIOG
)

	)

556 
	#GPIO_ODR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0c)

	)

557 
	#GPIOA_ODR
 
	`GPIO_ODR
(
GPIOA
)

	)

558 
	#GPIOB_ODR
 
	`GPIO_ODR
(
GPIOB
)

	)

559 
	#GPIOC_ODR
 
	`GPIO_ODR
(
GPIOC
)

	)

560 
	#GPIOD_ODR
 
	`GPIO_ODR
(
GPIOD
)

	)

561 
	#GPIOE_ODR
 
	`GPIO_ODR
(
GPIOE
)

	)

562 
	#GPIOF_ODR
 
	`GPIO_ODR
(
GPIOF
)

	)

563 
	#GPIOG_ODR
 
	`GPIO_ODR
(
GPIOG
)

	)

566 
	#GPIO_BSRR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x10)

	)

567 
	#GPIOA_BSRR
 
	`GPIO_BSRR
(
GPIOA
)

	)

568 
	#GPIOB_BSRR
 
	`GPIO_BSRR
(
GPIOB
)

	)

569 
	#GPIOC_BSRR
 
	`GPIO_BSRR
(
GPIOC
)

	)

570 
	#GPIOD_BSRR
 
	`GPIO_BSRR
(
GPIOD
)

	)

571 
	#GPIOE_BSRR
 
	`GPIO_BSRR
(
GPIOE
)

	)

572 
	#GPIOF_BSRR
 
	`GPIO_BSRR
(
GPIOF
)

	)

573 
	#GPIOG_BSRR
 
	`GPIO_BSRR
(
GPIOG
)

	)

576 
	#GPIO_BRR
(
p‹t
Ë
	`MMIO16
(’‹tË+ 0x14)

	)

577 
	#GPIOA_BRR
 
	`GPIO_BRR
(
GPIOA
)

	)

578 
	#GPIOB_BRR
 
	`GPIO_BRR
(
GPIOB
)

	)

579 
	#GPIOC_BRR
 
	`GPIO_BRR
(
GPIOC
)

	)

580 
	#GPIOD_BRR
 
	`GPIO_BRR
(
GPIOD
)

	)

581 
	#GPIOE_BRR
 
	`GPIO_BRR
(
GPIOE
)

	)

582 
	#GPIOF_BRR
 
	`GPIO_BRR
(
GPIOF
)

	)

583 
	#GPIOG_BRR
 
	`GPIO_BRR
(
GPIOG
)

	)

586 
	#GPIO_LCKR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x18)

	)

587 
	#GPIOA_LCKR
 
	`GPIO_LCKR
(
GPIOA
)

	)

588 
	#GPIOB_LCKR
 
	`GPIO_LCKR
(
GPIOB
)

	)

589 
	#GPIOC_LCKR
 
	`GPIO_LCKR
(
GPIOC
)

	)

590 
	#GPIOD_LCKR
 
	`GPIO_LCKR
(
GPIOD
)

	)

591 
	#GPIOE_LCKR
 
	`GPIO_LCKR
(
GPIOE
)

	)

592 
	#GPIOF_LCKR
 
	`GPIO_LCKR
(
GPIOF
)

	)

593 
	#GPIOG_LCKR
 
	`GPIO_LCKR
(
GPIOG
)

	)

612 
	#GPIO_CNF_INPUT_ANALOG
 0x00

	)

614 
	#GPIO_CNF_INPUT_FLOAT
 0x01

	)

616 
	#GPIO_CNF_INPUT_PULL_UPDOWN
 0x02

	)

619 
	#GPIO_CNF_OUTPUT_PUSHPULL
 0x00

	)

621 
	#GPIO_CNF_OUTPUT_OPENDRAIN
 0x01

	)

623 
	#GPIO_CNF_OUTPUT_ALTFN_PUSHPULL
 0x02

	)

625 
	#GPIO_CNF_OUTPUT_ALTFN_OPENDRAIN
 0x03

	)

636 
	#GPIO_MODE_INPUT
 0x00

	)

637 
	#GPIO_MODE_OUTPUT_10_MHZ
 0x01

	)

638 
	#GPIO_MODE_OUTPUT_2_MHZ
 0x02

	)

639 
	#GPIO_MODE_OUTPUT_50_MHZ
 0x03

	)

662 
	#AFIO_EVCR
 
	`MMIO32
(
AFIO_BASE
 + 0x00)

	)

665 
	#AFIO_MAPR
 
	`MMIO32
(
AFIO_BASE
 + 0x04)

	)

668 
	#AFIO_EXTICR
(
i
Ë
	`MMIO32
(
AFIO_BASE
 + 0x08 + (i)*4)

	)

669 
	#AFIO_EXTICR1
 
	`AFIO_EXTICR
(0)

	)

670 
	#AFIO_EXTICR2
 
	`AFIO_EXTICR
(1)

	)

671 
	#AFIO_EXTICR3
 
	`AFIO_EXTICR
(2)

	)

672 
	#AFIO_EXTICR4
 
	`AFIO_EXTICR
(3)

	)

675 
	#AFIO_MAPR2
 
	`MMIO32
(
AFIO_BASE
 + 0x1C)

	)

680 
	#AFIO_EVCR_EVOE
 (1 << 7)

	)

687 
	#AFIO_EVCR_PORT_PA
 (0x0 << 4)

	)

688 
	#AFIO_EVCR_PORT_PB
 (0x1 << 4)

	)

689 
	#AFIO_EVCR_PORT_PC
 (0x2 << 4)

	)

690 
	#AFIO_EVCR_PORT_PD
 (0x3 << 4)

	)

691 
	#AFIO_EVCR_PORT_PE
 (0x4 << 4)

	)

699 
	#AFIO_EVCR_PIN_Px0
 (0x0 << 0)

	)

700 
	#AFIO_EVCR_PIN_Px1
 (0x1 << 0)

	)

701 
	#AFIO_EVCR_PIN_Px2
 (0x2 << 0)

	)

702 
	#AFIO_EVCR_PIN_Px3
 (0x3 << 0)

	)

703 
	#AFIO_EVCR_PIN_Px4
 (0x4 << 0)

	)

704 
	#AFIO_EVCR_PIN_Px5
 (0x5 << 0)

	)

705 
	#AFIO_EVCR_PIN_Px6
 (0x6 << 0)

	)

706 
	#AFIO_EVCR_PIN_Px7
 (0x7 << 0)

	)

707 
	#AFIO_EVCR_PIN_Px8
 (0x8 << 0)

	)

708 
	#AFIO_EVCR_PIN_Px9
 (0x9 << 0)

	)

709 
	#AFIO_EVCR_PIN_Px10
 (0xA << 0)

	)

710 
	#AFIO_EVCR_PIN_Px11
 (0xB << 0)

	)

711 
	#AFIO_EVCR_PIN_Px12
 (0xC << 0)

	)

712 
	#AFIO_EVCR_PIN_Px13
 (0xD << 0)

	)

713 
	#AFIO_EVCR_PIN_Px14
 (0xE << 0)

	)

714 
	#AFIO_EVCR_PIN_Px15
 (0xF << 0)

	)

728 
	#AFIO_MAPR_PTP_PPS_REMAP
 (1 << 30)

	)

732 
	#AFIO_MAPR_TIM2ITR1_IREMAP
 (1 << 29)

	)

736 
	#AFIO_MAPR_SPI3_REMAP
 (1 << 28)

	)

740 
	#AFIO_MAPR_MII_RMII_SEL
 (1 << 23)

	)

744 
	#AFIO_MAPR_CAN2_REMAP
 (1 << 22)

	)

748 
	#AFIO_MAPR_ETH_REMAP
 (1 << 21)

	)

759 
	#AFIO_MAPR_SWJ_MASK
 (0x7 << 24)

	)

761 
	#AFIO_MAPR_SWJ_CFG_FULL_SWJ
 (0x0 << 24)

	)

763 
	#AFIO_MAPR_SWJ_CFG_FULL_SWJ_NO_JNTRST
 (0x1 << 24)

	)

765 
	#AFIO_MAPR_SWJ_CFG_JTAG_OFF_SW_ON
 (0x2 << 24)

	)

767 
	#AFIO_MAPR_SWJ_CFG_JTAG_OFF_SW_OFF
 (0x4 << 24)

	)

779 
	#AFIO_MAPR_ADC2_ETRGREG_REMAP
 (1 << 20)

	)

786 
	#AFIO_MAPR_ADC2_ETRGINJ_REMAP
 (1 << 19)

	)

793 
	#AFIO_MAPR_ADC1_ETRGREG_REMAP
 (1 << 18)

	)

800 
	#AFIO_MAPR_ADC1_ETRGINJ_REMAP
 (1 << 17)

	)

804 
	#AFIO_MAPR_TIM5CH4_IREMAP
 (1 << 16)

	)

808 
	#AFIO_MAPR_PD01_REMAP
 (1 << 15)

	)

812 
	#AFIO_MAPR_TIM4_REMAP
 (1 << 12)

	)

816 
	#AFIO_MAPR_USART2_REMAP
 (1 << 3)

	)

820 
	#AFIO_MAPR_USART1_REMAP
 (1 << 2)

	)

824 
	#AFIO_MAPR_I2C1_REMAP
 (1 << 1)

	)

828 
	#AFIO_MAPR_SPI1_REMAP
 (1 << 0)

	)

836 
	#AFIO_MAPR_CAN1_REMAP_PORTA
 (0x0 << 13)

	)

837 
	#AFIO_MAPR_CAN1_REMAP_PORTB
 (0x2 << 13Ë

	)

838 
	#AFIO_MAPR_CAN1_REMAP_PORTD
 (0x3 << 13)

	)

846 
	#AFIO_MAPR_TIM3_REMAP_NO_REMAP
 (0x0 << 10)

	)

847 
	#AFIO_MAPR_TIM3_REMAP_PARTIAL_REMAP
 (0x2 << 10)

	)

848 
	#AFIO_MAPR_TIM3_REMAP_FULL_REMAP
 (0x3 << 10)

	)

856 
	#AFIO_MAPR_TIM2_REMAP_NO_REMAP
 (0x0 << 8)

	)

857 
	#AFIO_MAPR_TIM2_REMAP_PARTIAL_REMAP1
 (0x1 << 8)

	)

858 
	#AFIO_MAPR_TIM2_REMAP_PARTIAL_REMAP2
 (0x2 << 8)

	)

859 
	#AFIO_MAPR_TIM2_REMAP_FULL_REMAP
 (0x3 << 8)

	)

867 
	#AFIO_MAPR_TIM1_REMAP_NO_REMAP
 (0x0 << 6)

	)

868 
	#AFIO_MAPR_TIM1_REMAP_PARTIAL_REMAP
 (0x1 << 6)

	)

869 
	#AFIO_MAPR_TIM1_REMAP_FULL_REMAP
 (0x3 << 6)

	)

877 
	#AFIO_MAPR_USART3_REMAP_NO_REMAP
 (0x0 << 4)

	)

878 
	#AFIO_MAPR_USART3_REMAP_PARTIAL_REMAP
 (0x1 << 4)

	)

879 
	#AFIO_MAPR_USART3_REMAP_FULL_REMAP
 (0x3 << 4)

	)

887 
	#AFIO_MAPR2_MISC_REMAP
 (1 << 13)

	)

890 
	#AFIO_MAPR2_TIM12_REMAP
 (1 << 12)

	)

893 
	#AFIO_MAPR2_TIM76_DAC_DMA_REMAPE
 (1 << 11)

	)

897 
	#AFIO_MAPR2_FSMC_NADV_DISCONNECT
 (1 << 10)

	)

901 
	#AFIO_MAPR2_TIM14_REMAP
 (1 << 9)

	)

905 
	#AFIO_MAPR2_TIM13_REMAP
 (1 << 8)

	)

909 
	#AFIO_MAPR2_TIM11_REMAP
 (1 << 7)

	)

913 
	#AFIO_MAPR2_TIM10_REMAP
 (1 << 6)

	)

917 
	#AFIO_MAPR2_TIM9_REMAP
 (1 << 5)

	)

920 
	#AFIO_MAPR2_TIM1_DMA_REMAP
 (1 << 4)

	)

923 
	#AFIO_MAPR2_CEC_REMAP
 (1 << 3)

	)

926 
	#AFIO_MAPR2_TIM17_REMAP
 (1 << 2)

	)

929 
	#AFIO_MAPR2_TIM16_REMAP
 (1 << 1)

	)

932 
	#AFIO_MAPR1_TIM16_REMAP
 (1 << 0)

	)

946 
	#AFIO_EXTI0
 0

	)

947 
	#AFIO_EXTI1
 1

	)

948 
	#AFIO_EXTI2
 2

	)

949 
	#AFIO_EXTI3
 3

	)

950 
	#AFIO_EXTI4
 4

	)

951 
	#AFIO_EXTI5
 5

	)

952 
	#AFIO_EXTI6
 6

	)

953 
	#AFIO_EXTI7
 7

	)

954 
	#AFIO_EXTI8
 8

	)

955 
	#AFIO_EXTI9
 9

	)

956 
	#AFIO_EXTI10
 10

	)

957 
	#AFIO_EXTI11
 11

	)

958 
	#AFIO_EXTI12
 12

	)

959 
	#AFIO_EXTI13
 13

	)

960 
	#AFIO_EXTI14
 14

	)

961 
	#AFIO_EXTI15
 15

	)

967 
BEGIN_DECLS


969 
gpio_£t_mode
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
mode
, uöt8_à
˙f
,

970 
uöt16_t
 
gpios
);

971 
gpio_£t_evítout
(
uöt8_t
 
evouç‹t
, uöt8_à
evouçö
);

972 
gpio_¥im¨y_ªm≠
(
uöt32_t
 
swjíabÀ
, uöt32_à
m≠s
);

973 
gpio_£c⁄d¨y_ªm≠
(
uöt32_t
 
m≠s
);

975 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\i2c.h

31 #i‚de‡
LIBOPENCM3_I2C_H


32 
	#LIBOPENCM3_I2C_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/i2c_comm⁄_Æl.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\iwdg.h

33 #i‚de‡
LIBOPENCM3_IWDG_H


34 
	#LIBOPENCM3_IWDG_H


	)

36 
	~<lib›ícm3/°m32/comm⁄/iwdg_comm⁄_Æl.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\nvic.h

6 #i‚de‡
LIBOPENCM3_STM32_F1_NVIC_H


7 
	#LIBOPENCM3_STM32_F1_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_WWDG_IRQ
 0

	)

17 
	#NVIC_PVD_IRQ
 1

	)

18 
	#NVIC_TAMPER_IRQ
 2

	)

19 
	#NVIC_RTC_IRQ
 3

	)

20 
	#NVIC_FLASH_IRQ
 4

	)

21 
	#NVIC_RCC_IRQ
 5

	)

22 
	#NVIC_EXTI0_IRQ
 6

	)

23 
	#NVIC_EXTI1_IRQ
 7

	)

24 
	#NVIC_EXTI2_IRQ
 8

	)

25 
	#NVIC_EXTI3_IRQ
 9

	)

26 
	#NVIC_EXTI4_IRQ
 10

	)

27 
	#NVIC_DMA1_CHANNEL1_IRQ
 11

	)

28 
	#NVIC_DMA1_CHANNEL2_IRQ
 12

	)

29 
	#NVIC_DMA1_CHANNEL3_IRQ
 13

	)

30 
	#NVIC_DMA1_CHANNEL4_IRQ
 14

	)

31 
	#NVIC_DMA1_CHANNEL5_IRQ
 15

	)

32 
	#NVIC_DMA1_CHANNEL6_IRQ
 16

	)

33 
	#NVIC_DMA1_CHANNEL7_IRQ
 17

	)

34 
	#NVIC_ADC1_2_IRQ
 18

	)

35 
	#NVIC_USB_HP_CAN_TX_IRQ
 19

	)

36 
	#NVIC_USB_LP_CAN_RX0_IRQ
 20

	)

37 
	#NVIC_CAN_RX1_IRQ
 21

	)

38 
	#NVIC_CAN_SCE_IRQ
 22

	)

39 
	#NVIC_EXTI9_5_IRQ
 23

	)

40 
	#NVIC_TIM1_BRK_IRQ
 24

	)

41 
	#NVIC_TIM1_UP_IRQ
 25

	)

42 
	#NVIC_TIM1_TRG_COM_IRQ
 26

	)

43 
	#NVIC_TIM1_CC_IRQ
 27

	)

44 
	#NVIC_TIM2_IRQ
 28

	)

45 
	#NVIC_TIM3_IRQ
 29

	)

46 
	#NVIC_TIM4_IRQ
 30

	)

47 
	#NVIC_I2C1_EV_IRQ
 31

	)

48 
	#NVIC_I2C1_ER_IRQ
 32

	)

49 
	#NVIC_I2C2_EV_IRQ
 33

	)

50 
	#NVIC_I2C2_ER_IRQ
 34

	)

51 
	#NVIC_SPI1_IRQ
 35

	)

52 
	#NVIC_SPI2_IRQ
 36

	)

53 
	#NVIC_USART1_IRQ
 37

	)

54 
	#NVIC_USART2_IRQ
 38

	)

55 
	#NVIC_USART3_IRQ
 39

	)

56 
	#NVIC_EXTI15_10_IRQ
 40

	)

57 
	#NVIC_RTC_ALARM_IRQ
 41

	)

58 
	#NVIC_USB_WAKEUP_IRQ
 42

	)

59 
	#NVIC_TIM8_BRK_IRQ
 43

	)

60 
	#NVIC_TIM8_UP_IRQ
 44

	)

61 
	#NVIC_TIM8_TRG_COM_IRQ
 45

	)

62 
	#NVIC_TIM8_CC_IRQ
 46

	)

63 
	#NVIC_ADC3_IRQ
 47

	)

64 
	#NVIC_FSMC_IRQ
 48

	)

65 
	#NVIC_SDIO_IRQ
 49

	)

66 
	#NVIC_TIM5_IRQ
 50

	)

67 
	#NVIC_SPI3_IRQ
 51

	)

68 
	#NVIC_UART4_IRQ
 52

	)

69 
	#NVIC_UART5_IRQ
 53

	)

70 
	#NVIC_TIM6_IRQ
 54

	)

71 
	#NVIC_TIM7_IRQ
 55

	)

72 
	#NVIC_DMA2_CHANNEL1_IRQ
 56

	)

73 
	#NVIC_DMA2_CHANNEL2_IRQ
 57

	)

74 
	#NVIC_DMA2_CHANNEL3_IRQ
 58

	)

75 
	#NVIC_DMA2_CHANNEL4_5_IRQ
 59

	)

76 
	#NVIC_DMA2_CHANNEL5_IRQ
 60

	)

77 
	#NVIC_ETH_IRQ
 61

	)

78 
	#NVIC_ETH_WKUP_IRQ
 62

	)

79 
	#NVIC_CAN2_TX_IRQ
 63

	)

80 
	#NVIC_CAN2_RX0_IRQ
 64

	)

81 
	#NVIC_CAN2_RX1_IRQ
 65

	)

82 
	#NVIC_CAN2_SCE_IRQ
 66

	)

83 
	#NVIC_OTG_FS_IRQ
 67

	)

85 
	#NVIC_IRQ_COUNT
 68

	)

94 
BEGIN_DECLS


96 
wwdg_i§
();

97 
pvd_i§
();

98 
èm≥r_i§
();

99 
πc_i§
();

100 
Êash_i§
();

101 
rcc_i§
();

102 
exti0_i§
();

103 
exti1_i§
();

104 
exti2_i§
();

105 
exti3_i§
();

106 
exti4_i§
();

107 
dma1_ch™√l1_i§
();

108 
dma1_ch™√l2_i§
();

109 
dma1_ch™√l3_i§
();

110 
dma1_ch™√l4_i§
();

111 
dma1_ch™√l5_i§
();

112 
dma1_ch™√l6_i§
();

113 
dma1_ch™√l7_i§
();

114 
adc1_2_i§
();

115 
usb_hp_ˇn_tx_i§
();

116 
usb_Õ_ˇn_rx0_i§
();

117 
ˇn_rx1_i§
();

118 
ˇn_s˚_i§
();

119 
exti9_5_i§
();

120 
tim1_brk_i§
();

121 
tim1_up_i§
();

122 
tim1_åg_com_i§
();

123 
tim1_cc_i§
();

124 
tim2_i§
();

125 
tim3_i§
();

126 
tim4_i§
();

127 
i2c1_ev_i§
();

128 
i2c1_î_i§
();

129 
i2c2_ev_i§
();

130 
i2c2_î_i§
();

131 
•i1_i§
();

132 
•i2_i§
();

133 
ußπ1_i§
();

134 
ußπ2_i§
();

135 
ußπ3_i§
();

136 
exti15_10_i§
();

137 
πc_Æ¨m_i§
();

138 
usb_wakeup_i§
();

139 
tim8_brk_i§
();

140 
tim8_up_i§
();

141 
tim8_åg_com_i§
();

142 
tim8_cc_i§
();

143 
adc3_i§
();

144 
fsmc_i§
();

145 
sdio_i§
();

146 
tim5_i§
();

147 
•i3_i§
();

148 
u¨t4_i§
();

149 
u¨t5_i§
();

150 
tim6_i§
();

151 
tim7_i§
();

152 
dma2_ch™√l1_i§
();

153 
dma2_ch™√l2_i§
();

154 
dma2_ch™√l3_i§
();

155 
dma2_ch™√l4_5_i§
();

156 
dma2_ch™√l5_i§
();

157 
ëh_i§
();

158 
ëh_wkup_i§
();

159 
ˇn2_tx_i§
();

160 
ˇn2_rx0_i§
();

161 
ˇn2_rx1_i§
();

162 
ˇn2_s˚_i§
();

163 
Ÿg_fs_i§
();

165 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\pwr.h

31 #i‚de‡
LIBOPENCM3_PWR_H


32 
	#LIBOPENCM3_PWR_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/pwr_comm⁄_Æl.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\rcc.h

40 #i‚de‡
LIBOPENCM3_RCC_H


41 
	#LIBOPENCM3_RCC_H


	)

48 
	#RCC_CR
 
	`MMIO32
(
RCC_BASE
 + 0x00)

	)

49 
	#RCC_CFGR
 
	`MMIO32
(
RCC_BASE
 + 0x04)

	)

50 
	#RCC_CIR
 
	`MMIO32
(
RCC_BASE
 + 0x08)

	)

51 
	#RCC_APB2RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x0c)

	)

52 
	#RCC_APB1RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x10)

	)

53 
	#RCC_AHBENR
 
	`MMIO32
(
RCC_BASE
 + 0x14)

	)

54 
	#RCC_APB2ENR
 
	`MMIO32
(
RCC_BASE
 + 0x18)

	)

55 
	#RCC_APB1ENR
 
	`MMIO32
(
RCC_BASE
 + 0x1c)

	)

56 
	#RCC_BDCR
 
	`MMIO32
(
RCC_BASE
 + 0x20)

	)

57 
	#RCC_CSR
 
	`MMIO32
(
RCC_BASE
 + 0x24)

	)

58 
	#RCC_AHBRSTR
 
	`MMIO32
(
RCC_BASE
 + 0x28Ë

	)

59 
	#RCC_CFGR2
 
	`MMIO32
(
RCC_BASE
 + 0x2cË

	)

63 
	#RCC_CR_PLL3RDY
 (1 << 29Ë

	)

64 
	#RCC_CR_PLL3ON
 (1 << 28Ë

	)

65 
	#RCC_CR_PLL2RDY
 (1 << 27Ë

	)

66 
	#RCC_CR_PLL2ON
 (1 << 26Ë

	)

67 
	#RCC_CR_PLLRDY
 (1 << 25)

	)

68 
	#RCC_CR_PLLON
 (1 << 24)

	)

69 
	#RCC_CR_CSSON
 (1 << 19)

	)

70 
	#RCC_CR_HSEBYP
 (1 << 18)

	)

71 
	#RCC_CR_HSERDY
 (1 << 17)

	)

72 
	#RCC_CR_HSEON
 (1 << 16)

	)

75 
	#RCC_CR_HSIRDY
 (1 << 1)

	)

76 
	#RCC_CR_HSION
 (1 << 0)

	)

80 
	#RCC_CFGR_OTGFSPRE
 (1 << 22Ë

	)

81 
	#RCC_CFGR_USBPRE
 (1 << 22Ë

	)

83 
	#RCC_CFGR_PLLMUL_SHIFT
 18

	)

84 
	#RCC_CFGR_PLLMUL
 (0xF << 
RCC_CFGR_PLLMUL_SHIFT
)

	)

86 
	#RCC_CFGR_PLLXTPRE
 (1 << 17)

	)

87 
	#RCC_CFGR_PLLSRC
 (1 << 16)

	)

89 
	#RCC_CFGR_ADCPRE_SHIFT
 14

	)

90 
	#RCC_CFGR_ADCPRE
 (3 << 
RCC_CFGR_ADCPRE_SHIFT
)

	)

92 
	#RCC_CFGR_PPRE2_SHIFT
 11

	)

93 
	#RCC_CFGR_PPRE2
 (7 << 
RCC_CFGR_PPRE2_SHIFT
)

	)

95 
	#RCC_CFGR_PPRE1_SHIFT
 8

	)

96 
	#RCC_CFGR_PPRE1
 (7 << 
RCC_CFGR_PPRE1_SHIFT
)

	)

98 
	#RCC_CFGR_HPRE_SHIFT
 4

	)

99 
	#RCC_CFGR_HPRE
 (0xF << 
RCC_CFGR_HPRE_SHIFT
)

	)

101 
	#RCC_CFGR_SWS_SHIFT
 2

	)

102 
	#RCC_CFGR_SWS
 (3 << 
RCC_CFGR_SWS_SHIFT
)

	)

104 
	#RCC_CFGR_SW_SHIFT
 0

	)

105 
	#RCC_CFGR_SW
 (3 << 
RCC_CFGR_SW_SHIFT
)

	)

112 
	#RCC_CFGR_MCO_SHIFT
 24

	)

113 
	#RCC_CFGR_MCO_MASK
 0xf

	)

114 
	#RCC_CFGR_MCO_NOCLK
 0x0

	)

115 
	#RCC_CFGR_MCO_SYSCLK
 0x4

	)

116 
	#RCC_CFGR_MCO_HSICLK
 0x5

	)

117 
	#RCC_CFGR_MCO_HSECLK
 0x6

	)

118 
	#RCC_CFGR_MCO_PLLCLK_DIV2
 0x7

	)

119 
	#RCC_CFGR_MCO_PLL2CLK
 0x8

	)

120 
	#RCC_CFGR_MCO_PLL3CLK_DIV2
 0x9

	)

121 
	#RCC_CFGR_MCO_XT1
 0x®

	)

122 
	#RCC_CFGR_MCO_PLL3
 0xb

	)

130 
	#RCC_CFGR_USBPRE_PLL_CLK_DIV1_5
 0x0

	)

131 
	#RCC_CFGR_USBPRE_PLL_CLK_NODIV
 0x1

	)

135 
	#RCC_CFGR_USBPRE_PLL_VCO_CLK_DIV3
 0x0

	)

136 
	#RCC_CFGR_USBPRE_PLL_VCO_CLK_DIV2
 0x1

	)

143 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL2
 0x0

	)

144 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL3
 0x1

	)

145 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL4
 0x2

	)

146 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL5
 0x3

	)

147 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL6
 0x4

	)

148 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL7
 0x5

	)

149 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL8
 0x6

	)

150 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL9
 0x7

	)

151 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL10
 0x8

	)

152 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL11
 0x9

	)

153 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL12
 0x®

	)

154 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL13
 0xb

	)

155 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL14
 0x¯

	)

156 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL15
 0xd

	)

157 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL6_5
 0xd

	)

159 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL16
 0xê

	)

169 
	#RCC_CFGR_PLLXTPRE_HSE_CLK
 0x0

	)

170 
	#RCC_CFGR_PLLXTPRE_HSE_CLK_DIV2
 0x1

	)

178 
	#RCC_CFGR_PLLSRC_HSI_CLK_DIV2
 0x0

	)

179 
	#RCC_CFGR_PLLSRC_HSE_CLK
 0x1

	)

180 
	#RCC_CFGR_PLLSRC_PREDIV1_CLK
 0x1

	)

189 
	#RCC_CFGR_ADCPRE_PCLK2_DIV2
 0x0

	)

190 
	#RCC_CFGR_ADCPRE_PCLK2_DIV4
 0x1

	)

191 
	#RCC_CFGR_ADCPRE_PCLK2_DIV6
 0x2

	)

192 
	#RCC_CFGR_ADCPRE_PCLK2_DIV8
 0x3

	)

200 
	#RCC_CFGR_PPRE2_HCLK_NODIV
 0x0

	)

201 
	#RCC_CFGR_PPRE2_HCLK_DIV2
 0x4

	)

202 
	#RCC_CFGR_PPRE2_HCLK_DIV4
 0x5

	)

203 
	#RCC_CFGR_PPRE2_HCLK_DIV8
 0x6

	)

204 
	#RCC_CFGR_PPRE2_HCLK_DIV16
 0x7

	)

212 
	#RCC_CFGR_PPRE1_HCLK_NODIV
 0x0

	)

213 
	#RCC_CFGR_PPRE1_HCLK_DIV2
 0x4

	)

214 
	#RCC_CFGR_PPRE1_HCLK_DIV4
 0x5

	)

215 
	#RCC_CFGR_PPRE1_HCLK_DIV8
 0x6

	)

216 
	#RCC_CFGR_PPRE1_HCLK_DIV16
 0x7

	)

224 
	#RCC_CFGR_HPRE_SYSCLK_NODIV
 0x0

	)

225 
	#RCC_CFGR_HPRE_SYSCLK_DIV2
 0x8

	)

226 
	#RCC_CFGR_HPRE_SYSCLK_DIV4
 0x9

	)

227 
	#RCC_CFGR_HPRE_SYSCLK_DIV8
 0xa

	)

228 
	#RCC_CFGR_HPRE_SYSCLK_DIV16
 0xb

	)

229 
	#RCC_CFGR_HPRE_SYSCLK_DIV64
 0xc

	)

230 
	#RCC_CFGR_HPRE_SYSCLK_DIV128
 0xd

	)

231 
	#RCC_CFGR_HPRE_SYSCLK_DIV256
 0xe

	)

232 
	#RCC_CFGR_HPRE_SYSCLK_DIV512
 0xf

	)

236 
	#RCC_CFGR_SWS_SYSCLKSEL_HSICLK
 0x0

	)

237 
	#RCC_CFGR_SWS_SYSCLKSEL_HSECLK
 0x1

	)

238 
	#RCC_CFGR_SWS_SYSCLKSEL_PLLCLK
 0x2

	)

245 
	#RCC_CFGR_SW_SYSCLKSEL_HSICLK
 0x0

	)

246 
	#RCC_CFGR_SW_SYSCLKSEL_HSECLK
 0x1

	)

247 
	#RCC_CFGR_SW_SYSCLKSEL_PLLCLK
 0x2

	)

253 
	#RCC_CIR_CSSC
 (1 << 23)

	)

256 
	#RCC_CIR_PLL3RDYC
 (1 << 22Ë

	)

257 
	#RCC_CIR_PLL2RDYC
 (1 << 21Ë

	)

258 
	#RCC_CIR_PLLRDYC
 (1 << 20)

	)

259 
	#RCC_CIR_HSERDYC
 (1 << 19)

	)

260 
	#RCC_CIR_HSIRDYC
 (1 << 18)

	)

261 
	#RCC_CIR_LSERDYC
 (1 << 17)

	)

262 
	#RCC_CIR_LSIRDYC
 (1 << 16)

	)

265 
	#RCC_CIR_PLL3RDYIE
 (1 << 14Ë

	)

266 
	#RCC_CIR_PLL2RDYIE
 (1 << 13Ë

	)

267 
	#RCC_CIR_PLLRDYIE
 (1 << 12)

	)

268 
	#RCC_CIR_HSERDYIE
 (1 << 11)

	)

269 
	#RCC_CIR_HSIRDYIE
 (1 << 10)

	)

270 
	#RCC_CIR_LSERDYIE
 (1 << 9)

	)

271 
	#RCC_CIR_LSIRDYIE
 (1 << 8)

	)

274 
	#RCC_CIR_CSSF
 (1 << 7)

	)

277 
	#RCC_CIR_PLL3RDYF
 (1 << 6Ë

	)

278 
	#RCC_CIR_PLL2RDYF
 (1 << 5Ë

	)

279 
	#RCC_CIR_PLLRDYF
 (1 << 4)

	)

280 
	#RCC_CIR_HSERDYF
 (1 << 3)

	)

281 
	#RCC_CIR_HSIRDYF
 (1 << 2)

	)

282 
	#RCC_CIR_LSERDYF
 (1 << 1)

	)

283 
	#RCC_CIR_LSIRDYF
 (1 << 0)

	)

291 
	#RCC_APB2RSTR_TIM17RST
 (1 << 18)

	)

292 
	#RCC_APB2RSTR_TIM16RST
 (1 << 17)

	)

293 
	#RCC_APB2RSTR_TIM15RST
 (1 << 16)

	)

294 
	#RCC_APB2RSTR_ADC3RST
 (1 << 15Ë

	)

295 
	#RCC_APB2RSTR_USART1RST
 (1 << 14)

	)

296 
	#RCC_APB2RSTR_TIM8RST
 (1 << 13Ë

	)

297 
	#RCC_APB2RSTR_SPI1RST
 (1 << 12)

	)

298 
	#RCC_APB2RSTR_TIM1RST
 (1 << 11)

	)

299 
	#RCC_APB2RSTR_ADC2RST
 (1 << 10)

	)

300 
	#RCC_APB2RSTR_ADC1RST
 (1 << 9)

	)

301 
	#RCC_APB2RSTR_IOPGRST
 (1 << 8Ë

	)

302 
	#RCC_APB2RSTR_IOPFRST
 (1 << 7Ë

	)

303 
	#RCC_APB2RSTR_IOPERST
 (1 << 6)

	)

304 
	#RCC_APB2RSTR_IOPDRST
 (1 << 5)

	)

305 
	#RCC_APB2RSTR_IOPCRST
 (1 << 4)

	)

306 
	#RCC_APB2RSTR_IOPBRST
 (1 << 3)

	)

307 
	#RCC_APB2RSTR_IOPARST
 (1 << 2)

	)

308 
	#RCC_APB2RSTR_AFIORST
 (1 << 0)

	)

317 
	#RCC_APB1RSTR_DACRST
 (1 << 29)

	)

318 
	#RCC_APB1RSTR_PWRRST
 (1 << 28)

	)

319 
	#RCC_APB1RSTR_BKPRST
 (1 << 27)

	)

320 
	#RCC_APB1RSTR_CAN2RST
 (1 << 26Ë

	)

321 
	#RCC_APB1RSTR_CAN1RST
 (1 << 25Ë

	)

322 
	#RCC_APB1RSTR_CANRST
 (1 << 25Ë

	)

324 
	#RCC_APB1RSTR_USBRST
 (1 << 23Ë

	)

325 
	#RCC_APB1RSTR_I2C2RST
 (1 << 22)

	)

326 
	#RCC_APB1RSTR_I2C1RST
 (1 << 21)

	)

327 
	#RCC_APB1RSTR_UART5RST
 (1 << 20)

	)

328 
	#RCC_APB1RSTR_UART4RST
 (1 << 19)

	)

329 
	#RCC_APB1RSTR_USART3RST
 (1 << 18)

	)

330 
	#RCC_APB1RSTR_USART2RST
 (1 << 17)

	)

331 
	#RCC_APB1RSTR_SPI3RST
 (1 << 15)

	)

332 
	#RCC_APB1RSTR_SPI2RST
 (1 << 14)

	)

333 
	#RCC_APB1RSTR_WWDGRST
 (1 << 11)

	)

334 
	#RCC_APB1RSTR_TIM7RST
 (1 << 5)

	)

335 
	#RCC_APB1RSTR_TIM6RST
 (1 << 4)

	)

336 
	#RCC_APB1RSTR_TIM5RST
 (1 << 3)

	)

337 
	#RCC_APB1RSTR_TIM4RST
 (1 << 2)

	)

338 
	#RCC_APB1RSTR_TIM3RST
 (1 << 1)

	)

339 
	#RCC_APB1RSTR_TIM2RST
 (1 << 0)

	)

348 
	#RCC_AHBENR_ETHMACENRX
 (1 << 16)

	)

349 
	#RCC_AHBENR_ETHMACENTX
 (1 << 15)

	)

350 
	#RCC_AHBENR_ETHMACEN
 (1 << 14)

	)

351 
	#RCC_AHBENR_OTGFSEN
 (1 << 12)

	)

352 
	#RCC_AHBENR_SDIOEN
 (1 << 10)

	)

353 
	#RCC_AHBENR_FSMCEN
 (1 << 8)

	)

354 
	#RCC_AHBENR_CRCEN
 (1 << 6)

	)

355 
	#RCC_AHBENR_FLITFEN
 (1 << 4)

	)

356 
	#RCC_AHBENR_SRAMEN
 (1 << 2)

	)

357 
	#RCC_AHBENR_DMA2EN
 (1 << 1)

	)

358 
	#RCC_AHBENR_DMA1EN
 (1 << 0)

	)

367 
	#RCC_APB2ENR_TIM17EN
 (1 << 17)

	)

368 
	#RCC_APB2ENR_TIM16EN
 (1 << 16)

	)

369 
	#RCC_APB2ENR_TIM15EN
 (1 << 16)

	)

370 
	#RCC_APB2ENR_ADC3EN
 (1 << 15Ë

	)

371 
	#RCC_APB2ENR_USART1EN
 (1 << 14)

	)

372 
	#RCC_APB2ENR_TIM8EN
 (1 << 13Ë

	)

373 
	#RCC_APB2ENR_SPI1EN
 (1 << 12)

	)

374 
	#RCC_APB2ENR_TIM1EN
 (1 << 11)

	)

375 
	#RCC_APB2ENR_ADC2EN
 (1 << 10)

	)

376 
	#RCC_APB2ENR_ADC1EN
 (1 << 9)

	)

377 
	#RCC_APB2ENR_IOPGEN
 (1 << 8Ë

	)

378 
	#RCC_APB2ENR_IOPFEN
 (1 << 7Ë

	)

379 
	#RCC_APB2ENR_IOPEEN
 (1 << 6)

	)

380 
	#RCC_APB2ENR_IOPDEN
 (1 << 5)

	)

381 
	#RCC_APB2ENR_IOPCEN
 (1 << 4)

	)

382 
	#RCC_APB2ENR_IOPBEN
 (1 << 3)

	)

383 
	#RCC_APB2ENR_IOPAEN
 (1 << 2)

	)

384 
	#RCC_APB2ENR_AFIOEN
 (1 << 0)

	)

393 
	#RCC_APB1ENR_DACEN
 (1 << 29)

	)

394 
	#RCC_APB1ENR_PWREN
 (1 << 28)

	)

395 
	#RCC_APB1ENR_BKPEN
 (1 << 27)

	)

396 
	#RCC_APB1ENR_CAN2EN
 (1 << 26Ë

	)

397 
	#RCC_APB1ENR_CAN1EN
 (1 << 25Ë

	)

398 
	#RCC_APB1ENR_CANEN
 (1 << 25Ë

	)

400 
	#RCC_APB1ENR_USBEN
 (1 << 23Ë

	)

401 
	#RCC_APB1ENR_I2C2EN
 (1 << 22)

	)

402 
	#RCC_APB1ENR_I2C1EN
 (1 << 21)

	)

403 
	#RCC_APB1ENR_UART5EN
 (1 << 20)

	)

404 
	#RCC_APB1ENR_UART4EN
 (1 << 19)

	)

405 
	#RCC_APB1ENR_USART3EN
 (1 << 18)

	)

406 
	#RCC_APB1ENR_USART2EN
 (1 << 17)

	)

407 
	#RCC_APB1ENR_SPI3EN
 (1 << 15)

	)

408 
	#RCC_APB1ENR_SPI2EN
 (1 << 14)

	)

409 
	#RCC_APB1ENR_WWDGEN
 (1 << 11)

	)

410 
	#RCC_APB1ENR_TIM7EN
 (1 << 5)

	)

411 
	#RCC_APB1ENR_TIM6EN
 (1 << 4)

	)

412 
	#RCC_APB1ENR_TIM5EN
 (1 << 3)

	)

413 
	#RCC_APB1ENR_TIM4EN
 (1 << 2)

	)

414 
	#RCC_APB1ENR_TIM3EN
 (1 << 1)

	)

415 
	#RCC_APB1ENR_TIM2EN
 (1 << 0)

	)

420 
	#RCC_BDCR_BDRST
 (1 << 16)

	)

421 
	#RCC_BDCR_RTCEN
 (1 << 15)

	)

423 
	#RCC_BDCR_LSEBYP
 (1 << 2)

	)

424 
	#RCC_BDCR_LSERDY
 (1 << 1)

	)

425 
	#RCC_BDCR_LSEON
 (1 << 0)

	)

429 
	#RCC_CSR_LPWRRSTF
 (1 << 31)

	)

430 
	#RCC_CSR_WWDGRSTF
 (1 << 30)

	)

431 
	#RCC_CSR_IWDGRSTF
 (1 << 29)

	)

432 
	#RCC_CSR_SFTRSTF
 (1 << 28)

	)

433 
	#RCC_CSR_PORRSTF
 (1 << 27)

	)

434 
	#RCC_CSR_PINRSTF
 (1 << 26)

	)

435 
	#RCC_CSR_RMVF
 (1 << 24)

	)

436 
	#RCC_CSR_LSIRDY
 (1 << 1)

	)

437 
	#RCC_CSR_LSION
 (1 << 0)

	)

445 
	#RCC_AHBRSTR_ETHMACRST
 (1 << 14)

	)

446 
	#RCC_AHBRSTR_OTGFSRST
 (1 << 12)

	)

452 
	#RCC_CFGR2_I2S3SRC_SYSCLK
 0x0

	)

453 
	#RCC_CFGR2_I2S3SRC_PLL3_VCO_CLK
 0x1

	)

456 
	#RCC_CFGR2_I2S2SRC_SYSCLK
 0x0

	)

457 
	#RCC_CFGR2_I2S2SRC_PLL3_VCO_CLK
 0x1

	)

458 
	#RCC_CFGR2_I2S2SRC
 (1 << 17)

	)

461 
	#RCC_CFGR2_PREDIV1SRC_HSE_CLK
 0x0

	)

462 
	#RCC_CFGR2_PREDIV1SRC_PLL2_CLK
 0x1

	)

463 
	#RCC_CFGR2_PREDIV1SRC
 (1 << 16)

	)

465 
	#RCC_CFGR2_PLL3MUL_SHIFT
 12

	)

466 
	#RCC_CFGR2_PLL3MUL
 (0xF << 
RCC_CFGR2_PLL3MUL_SHIFT
)

	)

468 
	#RCC_CFGR2_PLL2MUL_SHIFT
 8

	)

469 
	#RCC_CFGR2_PLL2MUL
 (0xF << 
RCC_CFGR2_PLL2MUL_SHIFT
)

	)

471 
	#RCC_CFGR2_PREDIV2_SHIFT
 4

	)

472 
	#RCC_CFGR2_PREDIV2
 (0xF << 
RCC_CFGR2_PREDIV2_SHIFT
)

	)

474 
	#RCC_CFGR2_PREDIV1_SHIFT
 0

	)

475 
	#RCC_CFGR2_PREDIV1
 (0xF << 
RCC_CFGR2_PREDIV1_SHIFT
)

	)

478 
	#RCC_CFGR2_PLL3MUL_PLL3_CLK_MUL8
 0x6

	)

479 
	#RCC_CFGR2_PLL3MUL_PLL3_CLK_MUL9
 0x7

	)

480 
	#RCC_CFGR2_PLL3MUL_PLL3_CLK_MUL10
 0x8

	)

481 
	#RCC_CFGR2_PLL3MUL_PLL3_CLK_MUL11
 0x9

	)

482 
	#RCC_CFGR2_PLL3MUL_PLL3_CLK_MUL12
 0xa

	)

483 
	#RCC_CFGR2_PLL3MUL_PLL3_CLK_MUL13
 0xb

	)

484 
	#RCC_CFGR2_PLL3MUL_PLL3_CLK_MUL14
 0xc

	)

485 
	#RCC_CFGR2_PLL3MUL_PLL3_CLK_MUL16
 0xe

	)

486 
	#RCC_CFGR2_PLL3MUL_PLL3_CLK_MUL20
 0xf

	)

489 
	#RCC_CFGR2_PLL2MUL_PLL2_CLK_MUL8
 0x6

	)

490 
	#RCC_CFGR2_PLL2MUL_PLL2_CLK_MUL9
 0x7

	)

491 
	#RCC_CFGR2_PLL2MUL_PLL2_CLK_MUL10
 0x8

	)

492 
	#RCC_CFGR2_PLL2MUL_PLL2_CLK_MUL11
 0x9

	)

493 
	#RCC_CFGR2_PLL2MUL_PLL2_CLK_MUL12
 0xa

	)

494 
	#RCC_CFGR2_PLL2MUL_PLL2_CLK_MUL13
 0xb

	)

495 
	#RCC_CFGR2_PLL2MUL_PLL2_CLK_MUL14
 0xc

	)

496 
	#RCC_CFGR2_PLL2MUL_PLL2_CLK_MUL16
 0xe

	)

497 
	#RCC_CFGR2_PLL2MUL_PLL2_CLK_MUL20
 0xf

	)

500 
	#RCC_CFGR2_PREDIV_NODIV
 0x0

	)

501 
	#RCC_CFGR2_PREDIV_DIV2
 0x1

	)

502 
	#RCC_CFGR2_PREDIV_DIV3
 0x2

	)

503 
	#RCC_CFGR2_PREDIV_DIV4
 0x3

	)

504 
	#RCC_CFGR2_PREDIV_DIV5
 0x4

	)

505 
	#RCC_CFGR2_PREDIV_DIV6
 0x5

	)

506 
	#RCC_CFGR2_PREDIV_DIV7
 0x6

	)

507 
	#RCC_CFGR2_PREDIV_DIV8
 0x7

	)

508 
	#RCC_CFGR2_PREDIV_DIV9
 0x8

	)

509 
	#RCC_CFGR2_PREDIV_DIV10
 0x9

	)

510 
	#RCC_CFGR2_PREDIV_DIV11
 0xa

	)

511 
	#RCC_CFGR2_PREDIV_DIV12
 0xb

	)

512 
	#RCC_CFGR2_PREDIV_DIV13
 0xc

	)

513 
	#RCC_CFGR2_PREDIV_DIV14
 0xd

	)

514 
	#RCC_CFGR2_PREDIV_DIV15
 0xe

	)

515 
	#RCC_CFGR2_PREDIV_DIV16
 0xf

	)

518 
	#RCC_CFGR2_PREDIV2_NODIV
 0x0

	)

519 
	#RCC_CFGR2_PREDIV2_DIV2
 0x1

	)

520 
	#RCC_CFGR2_PREDIV2_DIV3
 0x2

	)

521 
	#RCC_CFGR2_PREDIV2_DIV4
 0x3

	)

522 
	#RCC_CFGR2_PREDIV2_DIV5
 0x4

	)

523 
	#RCC_CFGR2_PREDIV2_DIV6
 0x5

	)

524 
	#RCC_CFGR2_PREDIV2_DIV7
 0x6

	)

525 
	#RCC_CFGR2_PREDIV2_DIV8
 0x7

	)

526 
	#RCC_CFGR2_PREDIV2_DIV9
 0x8

	)

527 
	#RCC_CFGR2_PREDIV2_DIV10
 0x9

	)

528 
	#RCC_CFGR2_PREDIV2_DIV11
 0xa

	)

529 
	#RCC_CFGR2_PREDIV2_DIV12
 0xb

	)

530 
	#RCC_CFGR2_PREDIV2_DIV13
 0xc

	)

531 
	#RCC_CFGR2_PREDIV2_DIV14
 0xd

	)

532 
	#RCC_CFGR2_PREDIV2_DIV15
 0xe

	)

533 
	#RCC_CFGR2_PREDIV2_DIV16
 0xf

	)

536 
uöt32_t
 
rcc_ahb_‰equícy
;

537 
uöt32_t
 
rcc_≠b1_‰equícy
;

538 
uöt32_t
 
rcc_≠b2_‰equícy
;

542 
	ercc_osc
 {

543 
	mRCC_PLL
, 
	mRCC_PLL2
, 
	mRCC_PLL3
, 
	mRCC_HSE
, 
	mRCC_HSI
, 
	mRCC_LSE
, 
	mRCC_LSI


546 
	#_REG_BIT
(
ba£
, 
bô
Ë(((ba£Ë<< 5Ë+ (bô))

	)

552 
	ercc_≥rùh_˛kí
 {

555 
	mRCC_DMA1
 = 
_REG_BIT
(0x14, 0),

556 
	mRCC_DMA2
 = 
_REG_BIT
(0x14, 1),

557 
	mRCC_SRAM
 = 
_REG_BIT
(0x14, 2),

558 
	mRCC_FLTF
 = 
_REG_BIT
(0x14, 4),

559 
	mRCC_CRC
 = 
_REG_BIT
(0x14, 6),

560 
	mRCC_FSMC
 = 
_REG_BIT
(0x14, 8),

561 
	mRCC_SDIO
 = 
_REG_BIT
(0x14, 10),

562 
	mRCC_OTGFS
 = 
_REG_BIT
(0x14, 12),

563 
	mRCC_ETHMAC
 = 
_REG_BIT
(0x14, 14),

564 
	mRCC_ETHMACTX
 = 
_REG_BIT
(0x14, 15),

565 
	mRCC_ETHMACRX
 = 
_REG_BIT
(0x14, 16),

568 
	mRCC_AFIO
 = 
_REG_BIT
(0x18, 0),

569 
	mRCC_GPIOA
 = 
_REG_BIT
(0x18, 2),

570 
	mRCC_GPIOB
 = 
_REG_BIT
(0x18, 3),

571 
	mRCC_GPIOC
 = 
_REG_BIT
(0x18, 4),

572 
	mRCC_GPIOD
 = 
_REG_BIT
(0x18, 5),

573 
	mRCC_GPIOE
 = 
_REG_BIT
(0x18, 6),

574 
	mRCC_GPIOF
 = 
_REG_BIT
(0x18, 7),

575 
	mRCC_GPIOG
 = 
_REG_BIT
(0x18, 8),

576 
	mRCC_ADC1
 = 
_REG_BIT
(0x18, 9),

577 
	mRCC_ADC2
 = 
_REG_BIT
(0x18, 10),

578 
	mRCC_TIM1
 = 
_REG_BIT
(0x18, 11),

579 
	mRCC_SPI1
 = 
_REG_BIT
(0x18, 12),

580 
	mRCC_TIM8
 = 
_REG_BIT
(0x18, 13),

581 
	mRCC_USART1
 = 
_REG_BIT
(0x18, 14),

582 
	mRCC_ADC3
 = 
_REG_BIT
(0x18, 15),

583 
	mRCC_TIM15
 = 
_REG_BIT
(0x18, 16),

584 
	mRCC_TIM16
 = 
_REG_BIT
(0x18, 17),

585 
	mRCC_TIM17
 = 
_REG_BIT
(0x18, 18),

586 
	mRCC_TIM9
 = 
_REG_BIT
(0x18, 19),

587 
	mRCC_TIM10
 = 
_REG_BIT
(0x18, 20),

588 
	mRCC_TIM11
 = 
_REG_BIT
(0x18, 21),

591 
	mRCC_TIM2
 = 
_REG_BIT
(0x1C, 0),

592 
	mRCC_TIM3
 = 
_REG_BIT
(0x1C, 1),

593 
	mRCC_TIM4
 = 
_REG_BIT
(0x1C, 2),

594 
	mRCC_TIM5
 = 
_REG_BIT
(0x1C, 3),

595 
	mRCC_TIM6
 = 
_REG_BIT
(0x1C, 4),

596 
	mRCC_TIM7
 = 
_REG_BIT
(0x1C, 5),

597 
	mRCC_TIM12
 = 
_REG_BIT
(0x1C, 6),

598 
	mRCC_TIM13
 = 
_REG_BIT
(0x1C, 7),

599 
	mRCC_TIM14
 = 
_REG_BIT
(0x1C, 8),

600 
	mRCC_WWDG
 = 
_REG_BIT
(0x1C, 11),

601 
	mRCC_SPI2
 = 
_REG_BIT
(0x1C, 14),

602 
	mRCC_SPI3
 = 
_REG_BIT
(0x1C, 15),

603 
	mRCC_USART2
 = 
_REG_BIT
(0x1C, 17),

604 
	mRCC_USART3
 = 
_REG_BIT
(0x1C, 18),

605 
	mRCC_UART4
 = 
_REG_BIT
(0x1C, 19),

606 
	mRCC_UART5
 = 
_REG_BIT
(0x1C, 20),

607 
	mRCC_I2C1
 = 
_REG_BIT
(0x1C, 21),

608 
	mRCC_I2C2
 = 
_REG_BIT
(0x1C, 22),

609 
	mRCC_USB
 = 
_REG_BIT
(0x1C, 23),

610 
	mRCC_CAN
 = 
_REG_BIT
(0x1C, 25),

611 
	mRCC_CAN1
 = 
_REG_BIT
(0x1C, 25),

612 
	mRCC_CAN2
 = 
_REG_BIT
(0x1C, 26),

613 
	mRCC_BKP
 = 
_REG_BIT
(0x1C, 27),

614 
	mRCC_PWR
 = 
_REG_BIT
(0x1C, 28),

615 
	mRCC_DAC
 = 
_REG_BIT
(0x1C, 29),

616 
	mRCC_CEC
 = 
_REG_BIT
(0x1C, 30),

619 
	ercc_≥rùh_r°
 {

622 
	mRST_OTGFS
 = 
_REG_BIT
(0x28, 12),

623 
	mRST_ETHMAC
 = 
_REG_BIT
(0x28, 14),

626 
	mRST_AFIO
 = 
_REG_BIT
(0x0c, 0),

627 
	mRST_GPIOA
 = 
_REG_BIT
(0x0c, 2),

628 
	mRST_GPIOB
 = 
_REG_BIT
(0x0c, 3),

629 
	mRST_GPIOC
 = 
_REG_BIT
(0x0c, 4),

630 
	mRST_GPIOD
 = 
_REG_BIT
(0x0c, 5),

631 
	mRST_GPIOE
 = 
_REG_BIT
(0x0c, 6),

632 
	mRST_GPIOF
 = 
_REG_BIT
(0x0c, 7),

633 
	mRST_GPIOG
 = 
_REG_BIT
(0x0c, 8),

634 
	mRST_ADC1
 = 
_REG_BIT
(0x0c, 9),

635 
	mRST_ADC2
 = 
_REG_BIT
(0x0c, 10),

636 
	mRST_TIM1
 = 
_REG_BIT
(0x0c, 11),

637 
	mRST_SPI1
 = 
_REG_BIT
(0x0c, 12),

638 
	mRST_TIM8
 = 
_REG_BIT
(0x0c, 13),

639 
	mRST_USART1
 = 
_REG_BIT
(0x0c, 14),

640 
	mRST_ADC3
 = 
_REG_BIT
(0x0c, 15),

641 
	mRST_TIM15
 = 
_REG_BIT
(0x0c, 16),

642 
	mRST_TIM16
 = 
_REG_BIT
(0x0c, 17),

643 
	mRST_TIM17
 = 
_REG_BIT
(0x0c, 18),

644 
	mRST_TIM9
 = 
_REG_BIT
(0x0c, 19),

645 
	mRST_TIM10
 = 
_REG_BIT
(0x0c, 20),

646 
	mRST_TIM11
 = 
_REG_BIT
(0x0c, 21),

649 
	mRST_TIM2
 = 
_REG_BIT
(0x10, 0),

650 
	mRST_TIM3
 = 
_REG_BIT
(0x10, 1),

651 
	mRST_TIM4
 = 
_REG_BIT
(0x10, 2),

652 
	mRST_TIM5
 = 
_REG_BIT
(0x10, 3),

653 
	mRST_TIM6
 = 
_REG_BIT
(0x10, 4),

654 
	mRST_TIM7
 = 
_REG_BIT
(0x10, 5),

655 
	mRST_TIM12
 = 
_REG_BIT
(0x10, 6),

656 
	mRST_TIM13
 = 
_REG_BIT
(0x10, 7),

657 
	mRST_TIM14
 = 
_REG_BIT
(0x10, 8),

658 
	mRST_WWDG
 = 
_REG_BIT
(0x10, 11),

659 
	mRST_SPI2
 = 
_REG_BIT
(0x10, 14),

660 
	mRST_SPI3
 = 
_REG_BIT
(0x10, 15),

661 
	mRST_USART2
 = 
_REG_BIT
(0x10, 17),

662 
	mRST_USART3
 = 
_REG_BIT
(0x10, 18),

663 
	mRST_UART4
 = 
_REG_BIT
(0x10, 19),

664 
	mRST_UART5
 = 
_REG_BIT
(0x10, 20),

665 
	mRST_I2C1
 = 
_REG_BIT
(0x10, 21),

666 
	mRST_I2C2
 = 
_REG_BIT
(0x10, 22),

667 
	mRST_USB
 = 
_REG_BIT
(0x10, 23),

668 
	mRST_CAN
 = 
_REG_BIT
(0x10, 24),

669 
	mRST_CAN1
 = 
_REG_BIT
(0x10, 24),

670 
	mRST_CAN2
 = 
_REG_BIT
(0x10, 25),

671 
	mRST_BKP
 = 
_REG_BIT
(0x10, 27),

672 
	mRST_PWR
 = 
_REG_BIT
(0x10, 28),

673 
	mRST_DAC
 = 
_REG_BIT
(0x10, 29),

674 
	mRST_CEC
 = 
_REG_BIT
(0x10, 30),

677 
	~<lib›ícm3/°m32/comm⁄/rcc_comm⁄_Æl.h
>

679 
BEGIN_DECLS


681 
rcc_osc_ªady_öt_˛ór
(
rcc_osc
 
osc
);

682 
rcc_osc_ªady_öt_íabÀ
(
rcc_osc
 
osc
);

683 
rcc_osc_ªady_öt_dißbÀ
(
rcc_osc
 
osc
);

684 
rcc_osc_ªady_öt_Êag
(
rcc_osc
 
osc
);

685 
rcc_css_öt_˛ór
();

686 
rcc_css_öt_Êag
();

687 
rcc_waô_f‹_osc_ªady
(
rcc_osc
 
osc
);

688 
rcc_osc_⁄
(
rcc_osc
 
osc
);

689 
rcc_osc_off
(
rcc_osc
 
osc
);

690 
rcc_css_íabÀ
();

691 
rcc_css_dißbÀ
();

692 
rcc_osc_by∑ss_íabÀ
(
rcc_osc
 
osc
);

693 
rcc_osc_by∑ss_dißbÀ
(
rcc_osc
 
osc
);

694 
rcc_£t_sys˛k_sour˚
(
uöt32_t
 
˛k
);

695 
rcc_£t_∂l_mu…ùliˇti⁄_Á˘‹
(
uöt32_t
 
mul
);

696 
rcc_£t_∂l2_mu…ùliˇti⁄_Á˘‹
(
uöt32_t
 
mul
);

697 
rcc_£t_∂l3_mu…ùliˇti⁄_Á˘‹
(
uöt32_t
 
mul
);

698 
rcc_£t_∂l_sour˚
(
uöt32_t
 
∂l§c
);

699 
rcc_£t_∂lxçª
(
uöt32_t
 
∂lxçª
);

700 
uöt32_t
 
rcc_πc_˛ock_íabÀd_Êag
();

701 
rcc_íabÀ_πc_˛ock
();

702 
rcc_£t_πc_˛ock_sour˚
(
rcc_osc
 
˛ock_sour˚
);

703 
rcc_£t_ad˝ª
(
uöt32_t
 
ad˝ª
);

704 
rcc_£t_µª2
(
uöt32_t
 
µª2
);

705 
rcc_£t_µª1
(
uöt32_t
 
µª1
);

706 
rcc_£t_h¥e
(
uöt32_t
 
h¥e
);

707 
rcc_£t_usb¥e
(
uöt32_t
 
usb¥e
);

708 
rcc_£t_¥ediv1
(
uöt32_t
 
¥ediv
);

709 
rcc_£t_¥ediv2
(
uöt32_t
 
¥ediv
);

710 
rcc_£t_¥ediv1_sour˚
(
uöt32_t
 
rcc§c
);

711 
uöt32_t
 
rcc_sy°em_˛ock_sour˚
();

712 
rcc_˛ock_£tup_ö_hsi_out_64mhz
();

713 
rcc_˛ock_£tup_ö_hsi_out_48mhz
();

714 
rcc_˛ock_£tup_ö_hsi_out_24mhz
();

715 
rcc_˛ock_£tup_ö_h£_8mhz_out_24mhz
();

716 
rcc_˛ock_£tup_ö_h£_8mhz_out_72mhz
();

717 
rcc_˛ock_£tup_ö_h£_12mhz_out_72mhz
();

718 
rcc_˛ock_£tup_ö_h£_16mhz_out_72mhz
();

719 
rcc_˛ock_£tup_ö_h£_25mhz_out_72mhz
();

720 
rcc_backupdomaö_ª£t
();

722 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\rtc.h

39 #i‚de‡
LIBOPENCM3_RTC_H


40 
	#LIBOPENCM3_RTC_H


	)

43 
	~<lib›ícm3/°m32/pwr.h
>

44 
	~<lib›ícm3/°m32/rcc.h
>

49 
	#RTC_CRH
 
	`MMIO32
(
RTC_BASE
 + 0x00)

	)

52 
	#RTC_CRL
 
	`MMIO32
(
RTC_BASE
 + 0x04)

	)

55 
	#RTC_PRLH
 
	`MMIO32
(
RTC_BASE
 + 0x08)

	)

56 
	#RTC_PRLL
 
	`MMIO32
(
RTC_BASE
 + 0x0c)

	)

59 
	#RTC_DIVH
 
	`MMIO32
(
RTC_BASE
 + 0x10)

	)

60 
	#RTC_DIVL
 
	`MMIO32
(
RTC_BASE
 + 0x14)

	)

63 
	#RTC_CNTH
 
	`MMIO32
(
RTC_BASE
 + 0x18)

	)

64 
	#RTC_CNTL
 
	`MMIO32
(
RTC_BASE
 + 0x1c)

	)

67 
	#RTC_ALRH
 
	`MMIO32
(
RTC_BASE
 + 0x20)

	)

68 
	#RTC_ALRL
 
	`MMIO32
(
RTC_BASE
 + 0x24)

	)

75 
	#RTC_CRH_OWIE
 (1 << 2)

	)

78 
	#RTC_CRH_ALRIE
 (1 << 1)

	)

81 
	#RTC_CRH_SECIE
 (1 << 0)

	)

88 
	#RTC_CRL_RTOFF
 (1 << 5)

	)

91 
	#RTC_CRL_CNF
 (1 << 4)

	)

94 
	#RTC_CRL_RSF
 (1 << 3)

	)

97 
	#RTC_CRL_OWF
 (1 << 2)

	)

100 
	#RTC_CRL_ALRF
 (1 << 1)

	)

103 
	#RTC_CRL_SECF
 (1 << 0)

	)

144 
	mRTC_SEC
,

146 
	mRTC_ALR
,

148 
	mRTC_OW
,

149 } 
	tπcÊag_t
;

153 
BEGIN_DECLS


155 
πc_awake_‰om_off
(
rcc_osc
 
˛ock_sour˚
);

156 
πc_íãr_c⁄fig_mode
();

157 
πc_exô_c⁄fig_mode
();

158 
πc_£t_Æ¨m_time
(
uöt32_t
 
Æ¨m_time
);

159 
πc_íabÀ_Æ¨m
();

160 
πc_dißbÀ_Æ¨m
();

161 
πc_£t_¥esˇÀ_vÆ
(
uöt32_t
 
¥esˇÀ_vÆ
);

162 
uöt32_t
 
πc_gë_cou¡î_vÆ
();

163 
uöt32_t
 
πc_gë_¥esˇÀ_div_vÆ
();

164 
uöt32_t
 
πc_gë_Æ¨m_vÆ
();

165 
πc_£t_cou¡î_vÆ
(
uöt32_t
 
cou¡î_vÆ
);

166 
πc_öãºu±_íabÀ
(
πcÊag_t
 
Êag_vÆ
);

167 
πc_öãºu±_dißbÀ
(
πcÊag_t
 
Êag_vÆ
);

168 
πc_˛ór_Êag
(
πcÊag_t
 
Êag_vÆ
);

169 
uöt32_t
 
πc_check_Êag
(
πcÊag_t
 
Êag_vÆ
);

170 
πc_awake_‰om_°™dby
();

171 
πc_auto_awake
(
rcc_osc
 
˛ock_sour˚
, 
uöt32_t
 
¥esˇÀ_vÆ
);

173 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\spi.h

31 #i‚de‡
LIBOPENCM3_SPI_H


32 
	#LIBOPENCM3_SPI_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/•i_comm⁄_l1f124.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\st_usbfs.h

21 #i‚de‡
LIBOPENCM3_ST_USBFS_H


22 #îr‹ 
Do
 
nŸ
 
ö˛ude
 
dúe˘ly
 !

25 
	~<lib›ícm3/°m32/comm⁄/°_usbfs_v1.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\timer.h

35 #i‚de‡
LIBOPENCM3_TIMER_H


36 
	#LIBOPENCM3_TIMER_H


	)

38 
	~<lib›ícm3/°m32/comm⁄/timî_comm⁄_Æl.h
>

41 
	etim_ic_pﬁ
 {

42 
	mTIM_IC_RISING
,

43 
	mTIM_IC_FALLING
,

48 
BEGIN_DECLS


50 
timî_ic_£t_pﬁ¨ôy
(
uöt32_t
 
timî
,

51 
tim_ic_id
 
ic
,

52 
tim_ic_pﬁ
 
pﬁ
);

54 
	gEND_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\usart.h

31 #i‚de‡
LIBOPENCM3_USART_H


32 
	#LIBOPENCM3_USART_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/ußπ_comm⁄_f124.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\flash.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/Êash.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/Êash.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/Êash.h
>

29 #ñi‡
deföed
(
STM32F3
)

30 
	~<lib›ícm3/°m32/f3/Êash.h
>

31 #ñi‡
deföed
(
STM32F4
)

32 
	~<lib›ícm3/°m32/f4/Êash.h
>

33 #ñi‡
deföed
(
STM32L1
)

34 
	~<lib›ícm3/°m32/l1/Êash.h
>

35 #ñi‡
deföed
(
STM32L4
)

36 
	~<lib›ícm3/°m32/l4/Êash.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\fsmc.h

20 #i‚de‡
LIBOPENCM3_FSMC_H


21 
	#LIBOPENCM3_FSMC_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

26 #i‡
deföed
(
STM32F4
)

27 
	~<lib›ícm3/°m32/f4/fmc.h
>

32 
	#FSMC_BANK1_BASE
 0x60000000U

	)

33 
	#FSMC_BANK2_BASE
 0x70000000U

	)

34 
	#FSMC_BANK3_BASE
 0x80000000U

	)

35 
	#FSMC_BANK4_BASE
 0x90000000U

	)

40 
	#FSMC_BCR
(
x
Ë
	`MMIO32
(
FSMC_BASE
 + 0x00 + 8 * (x))

	)

41 
	#FSMC_BCR1
 
	`FSMC_BCR
(0)

	)

42 
	#FSMC_BCR2
 
	`FSMC_BCR
(1)

	)

43 
	#FSMC_BCR3
 
	`FSMC_BCR
(2)

	)

44 
	#FSMC_BCR4
 
	`FSMC_BCR
(3)

	)

47 
	#FSMC_BTR
(
x
Ë
	`MMIO32
(
FSMC_BASE
 + 0x04 + 8 * (x))

	)

48 
	#FSMC_BTR1
 
	`FSMC_BTR
(0)

	)

49 
	#FSMC_BTR2
 
	`FSMC_BTR
(1)

	)

50 
	#FSMC_BTR3
 
	`FSMC_BTR
(2)

	)

51 
	#FSMC_BTR4
 
	`FSMC_BTR
(3)

	)

54 
	#FSMC_BWTR
(
x
Ë
	`MMIO32
(
FSMC_BASE
 + 0x104 + 8 * (x))

	)

55 
	#FSMC_BWTR1
 
	`FSMC_BWTR
(0)

	)

56 
	#FSMC_BWTR2
 
	`FSMC_BWTR
(1)

	)

57 
	#FSMC_BWTR3
 
	`FSMC_BWTR
(2)

	)

58 
	#FSMC_BWTR4
 
	`FSMC_BWTR
(3)

	)

61 
	#FSMC_PCR
(
x
Ë
	`MMIO32
(
FSMC_BASE
 + 0x40 + 0x20 * (x))

	)

62 
	#FSMC_PCR2
 
	`FSMC_PCR
(1)

	)

63 
	#FSMC_PCR3
 
	`FSMC_PCR
(2)

	)

64 
	#FSMC_PCR4
 
	`FSMC_PCR
(3)

	)

67 
	#FSMC_SR
(
x
Ë
	`MMIO32
(
FSMC_BASE
 + 0x44 + 0x20 * (x))

	)

68 
	#FSMC_SR2
 
	`FSMC_SR
(1)

	)

69 
	#FSMC_SR3
 
	`FSMC_SR
(2)

	)

70 
	#FSMC_SR4
 
	`FSMC_SR
(3)

	)

73 
	#FSMC_PMEM
(
x
Ë
	`MMIO32
(
FSMC_BASE
 + 0x48 + 0x20 * (x))

	)

74 
	#FSMC_PMEM2
 
	`FSMC_PMEM
(1)

	)

75 
	#FSMC_PMEM3
 
	`FSMC_PMEM
(2)

	)

76 
	#FSMC_PMEM4
 
	`FSMC_PMEM
(3)

	)

79 
	#FSMC_PATT
(
x
Ë
	`MMIO32
(
FSMC_BASE
 + 0x4¯+ 0x20 * (x))

	)

80 
	#FSMC_PATT2
 
	`FSMC_PATT
(1)

	)

81 
	#FSMC_PATT3
 
	`FSMC_PATT
(2)

	)

82 
	#FSMC_PATT4
 
	`FSMC_PATT
(3)

	)

85 
	#FSMC_PIO4
 
	`MMIO32
(
FSMC_BASE
 + 0xb0)

	)

88 
	#FSMC_ECCR
(
x
Ë
	`MMIO32
(
FSMC_BASE
 + 0x54 + 0x20 * (x))

	)

89 
	#FSMC_ECCR2
 
	`FSMC_ECCR
(1)

	)

90 
	#FSMC_ECCR3
 
	`FSMC_ECCR
(2)

	)

97 
	#FSMC_BCR_CBURSTRW
 (1 << 19)

	)

102 
	#FSMC_BCR_ASYNCWAIT
 (1 << 15)

	)

105 
	#FSMC_BCR_EXTMOD
 (1 << 14)

	)

108 
	#FSMC_BCR_WAITEN
 (1 << 13)

	)

111 
	#FSMC_BCR_WREN
 (1 << 12)

	)

114 
	#FSMC_BCR_WAITCFG
 (1 << 11)

	)

117 
	#FSMC_BCR_WRAPMOD
 (1 << 10)

	)

120 
	#FSMC_BCR_WAITPOL
 (1 << 9)

	)

123 
	#FSMC_BCR_BURSTEN
 (1 << 8)

	)

128 
	#FSMC_BCR_FACCEN
 (1 << 6)

	)

131 
	#FSMC_BCR_MWID
 (1 << 4)

	)

134 
	#FSMC_BCR_MTYP
 (1 << 2)

	)

137 
	#FSMC_BCR_MUXEN
 (1 << 1)

	)

140 
	#FSMC_BCR_MBKEN
 (1 << 0)

	)

147 
	#FSMC_BTx_ACCMOD_A
 (0)

	)

148 
	#FSMC_BTx_ACCMOD_B
 (1)

	)

149 
	#FSMC_BTx_ACCMOD_C
 (2)

	)

150 
	#FSMC_BTx_ACCMOD_D
 (3)

	)

153 
	#FSMC_BTR_ACCMOD
 (1 << 28)

	)

154 
	#FSMC_BTR_ACCMODx
(
x
Ë(((xË& 0x03Ë<< 28)

	)

157 
	#FSMC_BTR_DATLAT
 (1 << 24)

	)

158 
	#FSMC_BTR_DATLATx
(
x
Ë(((xË& 0x0fË<< 24)

	)

161 
	#FSMC_BTR_CLKDIV
 (1 << 20)

	)

162 
	#FSMC_BTR_CLKDIVx
(
x
Ë(((xË& 0x0fË<< 20)

	)

165 
	#FSMC_BTR_BUSTURN
 (1 << 16)

	)

166 
	#FSMC_BTR_BUSTURNx
(
x
Ë(((xË& 0x0fË<< 16)

	)

169 
	#FSMC_BTR_DATAST
 (1 << 8)

	)

170 
	#FSMC_BTR_DATASTx
(
x
Ë(((xË& 0xffË<< 8)

	)

173 
	#FSMC_BTR_ADDHLD
 (1 << 4)

	)

174 
	#FSMC_BTR_ADDHLDx
(
x
Ë(((xË& 0x0fË<< 4)

	)

177 
	#FSMC_BTR_ADDSET
 (1 << 0)

	)

178 
	#FSMC_BTR_ADDSETx
(
x
Ë(((xË& 0x0fË<< 0)

	)

185 
	#FSMC_BWTR_ACCMOD
 (1 << 28)

	)

188 
	#FSMC_BWTR_DATLAT
 (1 << 24)

	)

191 
	#FSMC_BWTR_CLKDIV
 (1 << 20)

	)

196 
	#FSMC_BWTR_DATAST
 (1 << 8)

	)

199 
	#FSMC_BWTR_ADDHLD
 (1 << 4)

	)

202 
	#FSMC_BWTR_ADDSET
 (1 << 0)

	)

209 
	#FSMC_PCR_ECCPS
 (1 << 17)

	)

212 
	#FSMC_PCR_TAR
 (1 << 13)

	)

215 
	#FSMC_PCR_TCLR
 (1 << 9)

	)

220 
	#FSMC_PCR_ECCEN
 (1 << 6)

	)

223 
	#FSMC_PCR_PWID
 (1 << 4)

	)

226 
	#FSMC_PCR_PTYP
 (1 << 3)

	)

229 
	#FSMC_PCR_PBKEN
 (1 << 2)

	)

232 
	#FSMC_PCR_PWAITEN
 (1 << 1)

	)

241 
	#FSMC_SR_FEMPT
 (1 << 6)

	)

244 
	#FSMC_SR_IFEN
 (1 << 5)

	)

247 
	#FSMC_SR_ILEN
 (1 << 4)

	)

250 
	#FSMC_SR_IREN
 (1 << 3)

	)

253 
	#FSMC_SR_IFS
 (1 << 2)

	)

256 
	#FSMC_SR_ILS
 (1 << 1)

	)

259 
	#FSMC_SR_IRS
 (1 << 0)

	)

264 
	#FSMC_PMEM_MEMHIZX
 (1 << 24)

	)

267 
	#FSMC_PMEM_MEMHOLDX
 (1 << 16)

	)

270 
	#FSMC_PMEM_MEMWAITX
 (1 << 8)

	)

273 
	#FSMC_PMEM_MEMSETX
 (1 << 0)

	)

278 
	#FSMC_PATT_ATTHIZX
 (1 << 24)

	)

281 
	#FSMC_PATT_ATTHOLDX
 (1 << 16)

	)

284 
	#FSMC_PATT_ATTWAITX
 (1 << 8)

	)

287 
	#FSMC_PATT_ATTSETX
 (1 << 0)

	)

292 
	#FSMC_PIO4_IOHIZX
 (1 << 24)

	)

295 
	#FSMC_PIO4_IOHOLDX
 (1 << 16)

	)

298 
	#FSMC_PIO4_IOWAITX
 (1 << 8)

	)

301 
	#FSMC_PIO4_IOSETX
 (1 << 0)

	)

306 
	#FSMC_ECCR_ECCX
 (1 << 0)

	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\gpio.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/gpio.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/gpio.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/gpio.h
>

29 #ñi‡
deföed
(
STM32F3
)

30 
	~<lib›ícm3/°m32/f3/gpio.h
>

31 #ñi‡
deföed
(
STM32F4
)

32 
	~<lib›ícm3/°m32/f4/gpio.h
>

33 #ñi‡
deföed
(
STM32F7
)

34 
	~<lib›ícm3/°m32/f7/gpio.h
>

35 #ñi‡
deföed
(
STM32L0
)

36 
	~<lib›ícm3/°m32/l0/gpio.h
>

37 #ñi‡
deföed
(
STM32L1
)

38 
	~<lib›ícm3/°m32/l1/gpio.h
>

39 #ñi‡
deföed
(
STM32L4
)

40 
	~<lib›ícm3/°m32/l4/gpio.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\i2c.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/i2c.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/i2c.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/i2c.h
>

29 #ñi‡
deföed
(
STM32F3
)

30 
	~<lib›ícm3/°m32/f3/i2c.h
>

31 #ñi‡
deföed
(
STM32F4
)

32 
	~<lib›ícm3/°m32/f4/i2c.h
>

33 #ñi‡
deföed
(
STM32L1
)

34 
	~<lib›ícm3/°m32/l1/i2c.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\iwdg.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/iwdg.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/iwdg.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/iwdg.h
>

29 #ñi‡
deföed
(
STM32F3
)

30 
	~<lib›ícm3/°m32/f3/iwdg.h
>

31 #ñi‡
deföed
(
STM32F4
)

32 
	~<lib›ícm3/°m32/f4/iwdg.h
>

33 #ñi‡
deföed
(
STM32L1
)

34 
	~<lib›ícm3/°m32/l1/iwdg.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\otg_fs.h

25 #i‚de‡
LIBOPENCM3_OTG_FS_H


26 
	#LIBOPENCM3_OTG_FS_H


	)

28 
	~<lib›ícm3/cm3/comm⁄.h
>

29 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

30 
	~<lib›ícm3/°m32/Ÿg_comm⁄.h
>

35 
	#OTG_FS_GOTGCTL
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GOTGCTL
)

	)

36 
	#OTG_FS_GOTGINT
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GOTGINT
)

	)

37 
	#OTG_FS_GAHBCFG
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GAHBCFG
)

	)

38 
	#OTG_FS_GUSBCFG
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GUSBCFG
)

	)

39 
	#OTG_FS_GRSTCTL
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GRSTCTL
)

	)

40 
	#OTG_FS_GINTSTS
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GINTSTS
)

	)

41 
	#OTG_FS_GINTMSK
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GINTMSK
)

	)

42 
	#OTG_FS_GRXSTSR
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GRXSTSR
)

	)

43 
	#OTG_FS_GRXSTSP
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GRXSTSP
)

	)

44 
	#OTG_FS_GRXFSIZ
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GRXFSIZ
)

	)

45 
	#OTG_FS_GNPTXFSIZ
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GNPTXFSIZ
)

	)

46 
	#OTG_FS_GNPTXSTS
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GNPTXSTS
)

	)

47 
	#OTG_FS_GCCFG
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GCCFG
)

	)

48 
	#OTG_FS_CID
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_CID
)

	)

49 
	#OTG_FS_HPTXFSIZ
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_HPTXFSIZ
)

	)

50 
	#OTG_FS_DIEPTXF
(
x
Ë
	`MMIO32
(
USB_OTG_FS_BASE
 + 
	`OTG_DIEPTXF
(x))

	)

54 
	#OTG_FS_HCFG
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_HCFG
)

	)

55 
	#OTG_FS_HFIR
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_HFIR
)

	)

56 
	#OTG_FS_HFNUM
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_HFNUM
)

	)

57 
	#OTG_FS_HPTXSTS
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_HPTXSTS
)

	)

58 
	#OTG_FS_HAINT
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_HAINT
)

	)

59 
	#OTG_FS_HAINTMSK
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_HAINTMSK
)

	)

60 
	#OTG_FS_HPRT
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_HPRT
)

	)

61 
	#OTG_FS_HCCHAR
(
x
Ë
	`MMIO32
(
USB_OTG_FS_BASE
 + 
	`OTG_HCCHAR
(x))

	)

62 
	#OTG_FS_HCINT
(
x
Ë
	`MMIO32
(
USB_OTG_FS_BASE
 + 
	`OTG_HCINT
(x))

	)

63 
	#OTG_FS_HCINTMSK
(
x
Ë
	`MMIO32
(
USB_OTG_FS_BASE
 + 
	`OTG_HCINTMSK
(x))

	)

64 
	#OTG_FS_HCTSIZ
(
x
Ë
	`MMIO32
(
USB_OTG_FS_BASE
 + 
	`OTG_HCTSIZ
(x))

	)

67 
	#OTG_FS_DCFG
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DCFG
)

	)

68 
	#OTG_FS_DCTL
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DCTL
)

	)

69 
	#OTG_FS_DSTS
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DSTS
)

	)

70 
	#OTG_FS_DIEPMSK
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DIEPMSK
)

	)

71 
	#OTG_FS_DOEPMSK
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DOEPMSK
)

	)

72 
	#OTG_FS_DAINT
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DAINT
)

	)

73 
	#OTG_FS_DAINTMSK
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DAINTMSK
)

	)

74 
	#OTG_FS_DVBUSDIS
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DVBUSDIS
)

	)

75 
	#OTG_FS_DVBUSPULSE
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DVBUSPULSE
)

	)

76 
	#OTG_FS_DIEPEMPMSK
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DIEPEMPMSK
)

	)

77 
	#OTG_FS_DIEPCTL0
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DIEPCTL0
)

	)

78 
	#OTG_FS_DIEPCTL
(
x
Ë
	`MMIO32
(
USB_OTG_FS_BASE
 + 
	`OTG_DIEPCTL
(x))

	)

79 
	#OTG_FS_DOEPCTL0
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DOEPCTL0
)

	)

80 
	#OTG_FS_DOEPCTL
(
x
Ë
	`MMIO32
(
USB_OTG_FS_BASE
 + 
	`OTG_DOEPCTL
(x))

	)

81 
	#OTG_FS_DIEPINT
(
x
Ë
	`MMIO32
(
USB_OTG_FS_BASE
 + 
	`OTG_DIEPINT
(x))

	)

82 
	#OTG_FS_DOEPINT
(
x
Ë
	`MMIO32
(
USB_OTG_FS_BASE
 + 
	`OTG_DOEPINT
(x))

	)

83 
	#OTG_FS_DIEPTSIZ0
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DIEPTSIZ0
)

	)

84 
	#OTG_FS_DOEPTSIZ0
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DOEPTSIZ0
)

	)

85 
	#OTG_FS_DIEPTSIZ
(
x
Ë
	`MMIO32
(
USB_OTG_FS_BASE
 + 
	`OTG_DIEPTSIZ
(x))

	)

86 
	#OTG_FS_DTXFSTS
(
x
Ë
	`MMIO32
(
USB_OTG_FS_BASE
 + 
	`OTG_DTXFSTS
(x))

	)

87 
	#OTG_FS_DOEPTSIZ
(
x
Ë
	`MMIO32
(
USB_OTG_FS_BASE
 + 
	`OTG_DOEPTSIZ
(x))

	)

90 
	#OTG_FS_PCGCCTL
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_PCGCCTL
)

	)

93 
	#OTG_FS_FIFO
(
x
Ë(&
	`MMIO32
(
USB_OTG_FS_BASE
 \

94 + (((
x
) + 1) \

95 << 12)))

	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\otg_hs.h

20 #i‚de‡
LIBOPENCM3_OTG_HS_H


21 
	#LIBOPENCM3_OTG_HS_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

25 
	~<lib›ícm3/°m32/Ÿg_comm⁄.h
>

30 
	#OTG_HCSPLT
(
x
Ë(0x504 + 0x20*(x))

	)

31 
	#OTG_HCDMA
(
x
Ë(0x514 + 0x20*(x))

	)

34 
	#OTG_DEACHHINT
 0x838

	)

35 
	#OTG_DEACHHINTMSK
 0x83C

	)

36 
	#OTG_DIEPEACHMSK1
 0x844

	)

37 
	#OTG_DOEPEACHMSK1
 0x884

	)

38 
	#OTG_DIEPDMA
(
x
Ë(0x914 + 0x20*(x))

	)

39 
	#OTG_DOEPDMA
(
x
Ë(0xB14 + 0x20*(x))

	)

46 
	#OTG_HS_GOTGCTL
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GOTGCTL
)

	)

47 
	#OTG_HS_GOTGINT
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GOTGINT
)

	)

48 
	#OTG_HS_GAHBCFG
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GAHBCFG
)

	)

49 
	#OTG_HS_GUSBCFG
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GUSBCFG
)

	)

50 
	#OTG_HS_GRSTCTL
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GRSTCTL
)

	)

51 
	#OTG_HS_GINTSTS
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GINTSTS
)

	)

52 
	#OTG_HS_GINTMSK
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GINTMSK
)

	)

53 
	#OTG_HS_GRXSTSR
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GRXSTSR
)

	)

54 
	#OTG_HS_GRXSTSP
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GRXSTSP
)

	)

55 
	#OTG_HS_GRXFSIZ
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GRXFSIZ
)

	)

56 
	#OTG_HS_GNPTXFSIZ
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GNPTXFSIZ
)

	)

57 
	#OTG_HS_GNPTXSTS
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GNPTXSTS
)

	)

58 
	#OTG_HS_GCCFG
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GCCFG
)

	)

59 
	#OTG_HS_CID
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_CID
)

	)

60 
	#OTG_HS_HPTXFSIZ
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_HPTXFSIZ
)

	)

61 
	#OTG_HS_DIEPTXF
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_DIEPTXF
(x))

	)

64 
	#OTG_HS_HCFG
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_HCFG
)

	)

65 
	#OTG_HS_HFIR
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_HFIR
)

	)

66 
	#OTG_HS_HFNUM
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_HFNUM
)

	)

67 
	#OTG_HS_HPTXSTS
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_HPTXSTS
)

	)

68 
	#OTG_HS_HAINT
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_HAINT
)

	)

69 
	#OTG_HS_HAINTMSK
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_HAINTMSK
)

	)

70 
	#OTG_HS_HPRT
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_HPRT
)

	)

71 
	#OTG_HS_HCCHAR
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_HCCHAR
(x))

	)

72 
	#OTG_HS_HCSPLT
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_HCSPLT
(x))

	)

73 
	#OTG_HS_HCINT
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_HCINT
(x))

	)

74 
	#OTG_HS_HCINTMSK
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_HCINTMSK
(x))

	)

75 
	#OTG_HS_HCTSIZ
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_HCTSIZ
(x))

	)

76 
	#OTG_HS_HCDMA
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_HCDMA
(x))

	)

79 
	#OTG_HS_DCFG
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DCFG
)

	)

80 
	#OTG_HS_DCTL
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DCTL
)

	)

81 
	#OTG_HS_DSTS
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DSTS
)

	)

82 
	#OTG_HS_DIEPMSK
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DIEPMSK
)

	)

83 
	#OTG_HS_DOEPMSK
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DOEPMSK
)

	)

84 
	#OTG_HS_DAINT
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DAINT
)

	)

85 
	#OTG_HS_DAINTMSK
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DAINTMSK
)

	)

86 
	#OTG_HS_DVBUSDIS
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DVBUSDIS
)

	)

87 
	#OTG_HS_DVBUSPULSE
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DVBUSPULSE
)

	)

88 
	#OTG_HS_DIEPEMPMSK
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DIEPEMPMSK
)

	)

89 
	#OTG_HS_DIEPCTL0
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DIEPCTL0
)

	)

90 
	#OTG_HS_DIEPCTL
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_DIEPCTL
(x))

	)

91 
	#OTG_HS_DOEPCTL0
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DOEPCTL0
)

	)

92 
	#OTG_HS_DOEPCTL
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_DOEPCTL
(x))

	)

93 
	#OTG_HS_DIEPINT
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_DIEPINT
(x))

	)

94 
	#OTG_HS_DOEPINT
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_DOEPINT
(x))

	)

95 
	#OTG_HS_DIEPTSIZ0
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DIEPTSIZ0
)

	)

96 
	#OTG_HS_DOEPTSIZ0
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DOEPTSIZ0
)

	)

97 
	#OTG_HS_DIEPTSIZ
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + \

98 
	`OTG_DIEPTSIZ
(
x
))

	)

99 
	#OTG_HS_DTXFSTS
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_DTXFSTS
(x))

	)

100 
	#OTG_HS_DOEPTSIZ
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + \

101 
	`OTG_DOEPTSIZ
(
x
))

	)

102 
	#OTG_HS_DEACHHINT
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DEACHHINT
)

	)

103 
	#OTG_HS_DEACHHINTMSK
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DEACHHINTMSK
)

	)

104 
	#OTG_HS_DIEPEACHMSK
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DIEPEACHMSK1
)

	)

105 
	#OTG_HS_DOEPEACHMSK
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DOEPEACHMSK1
)

	)

106 
	#OTG_HS_DIEPDMA
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_DIEPDMA
(x))

	)

107 
	#OTG_HS_DOEPDMA
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_DOEPDMA
(x))

	)

110 
	#OTG_HS_PCGCCTL
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_PCGCCTL
)

	)

113 
	#OTG_HS_FIFO
(
x
Ë(&
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_FIFO
(x)))

	)

118 
	#OTG_DEACHHINT_OEP1INT
 (1 << 17)

	)

120 
	#OTG_DEACHHINT_IEP1INT
 (1 << 1)

	)

125 
	#OTG_DIEPEACHMSK1_NAKM
 (1 << 13)

	)

127 
	#OTG_DIEPEACHMSK1_BIM
 (1 << 9)

	)

128 
	#OTG_DIEPEACHMSK1_TXFURM
 (1 << 8)

	)

130 
	#OTG_DIEPEACHMSK1_INEPNEM
 (1 << 6)

	)

131 
	#OTG_DIEPEACHMSK1_INEPNMM
 (1 << 5)

	)

132 
	#OTG_DIEPEACHMSK1_ITTXFEMSK
 (1 << 4)

	)

133 
	#OTG_DIEPEACHMSK1_TOM
 (1 << 3)

	)

135 
	#OTG_DIEPEACHMSK1_EPDM
 (1 << 1)

	)

136 
	#OTG_DIEPEACHMSK1_XFRCM
 (1 << 0)

	)

140 
	#OTG_DOEPEACHMSK1_NYETM
 (1 << 14)

	)

141 
	#OTG_DOEPEACHMSK1_NAKM
 (1 << 13)

	)

142 
	#OTG_DOEPEACHMSK1_BERRM
 (1 << 12)

	)

144 
	#OTG_DOEPEACHMSK1_BIM
 (1 << 9)

	)

145 
	#OTG_DOEPEACHMSK1_OPEM
 (1 << 8)

	)

147 
	#OTG_DOEPEACHMSK1_AHBERRM
 (1 << 2)

	)

148 
	#OTG_DOEPEACHMSK1_EPDM
 (1 << 1)

	)

149 
	#OTG_DOEPEACHMSK1_XFRCM
 (1 << 0)

	)

153 
	#OTG_HCSPLT_SPLITEN
 (1 << 31)

	)

155 
	#OTG_HCSPLT_COMPLSPLT
 (1 << 16)

	)

156 
	#OTG_HCSPLT_XACTPOS_ALL
 (0x3 << 14)

	)

157 
	#OTG_HCSPLT_XACTPOS_BEGIN
 (0x2 << 14)

	)

158 
	#OTG_HCSPLT_XACTPOS_MID
 (0x0 << 14)

	)

159 
	#OTG_HCSPLT_XACTPOS_END
 (0x1 << 14)

	)

160 
	#OTG_HCSPLT_HUBADDR_MASK
 (0x7‡<< 7)

	)

161 
	#OTG_HCSPLT_PORTADDR_MASK
 (0x7‡<< 0)

	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\pwr.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/pwr.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/pwr.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/pwr.h
>

29 #ñi‡
deföed
(
STM32F3
)

30 
	~<lib›ícm3/°m32/f3/pwr.h
>

31 #ñi‡
deföed
(
STM32F4
)

32 
	~<lib›ícm3/°m32/f4/pwr.h
>

33 #ñi‡
deföed
(
STM32L1
)

34 
	~<lib›ícm3/°m32/l1/pwr.h
>

35 #ñi‡
deföed
(
STM32L0
)

36 
	~<lib›ícm3/°m32/l0/pwr.h
>

37 #ñi‡
deföed
(
STM32L4
)

38 
	~<lib›ícm3/°m32/l4/pwr.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\rcc.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/rcc.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/rcc.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/rcc.h
>

29 #ñi‡
deföed
(
STM32F3
)

30 
	~<lib›ícm3/°m32/f3/rcc.h
>

31 #ñi‡
deföed
(
STM32F4
)

32 
	~<lib›ícm3/°m32/f4/rcc.h
>

33 #ñi‡
deföed
(
STM32L0
)

34 
	~<lib›ícm3/°m32/l0/rcc.h
>

35 #ñi‡
deföed
(
STM32L1
)

36 
	~<lib›ícm3/°m32/l1/rcc.h
>

37 #ñi‡
deföed
(
STM32L4
)

38 
	~<lib›ícm3/°m32/l4/rcc.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\rtc.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/πc.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/πc.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/πc.h
>

29 #ñi‡
deföed
(
STM32F4
)

30 
	~<lib›ícm3/°m32/f4/πc.h
>

31 #ñi‡
deföed
(
STM32L1
)

32 
	~<lib›ícm3/°m32/l1/πc.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\sdio.h

20 #i‚de‡
LIBOPENCM3_SDIO_H


21 
	#LIBOPENCM3_SDIO_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

29 
	#SDIO_POWER
 
	`MMIO32
(
SDIO_BASE
 + 0x00)

	)

32 
	#SDIO_CLKCR
 
	`MMIO32
(
SDIO_BASE
 + 0x04)

	)

35 
	#SDIO_ARG
 
	`MMIO32
(
SDIO_BASE
 + 0x08)

	)

38 
	#SDIO_CMD
 
	`MMIO32
(
SDIO_BASE
 + 0x0C)

	)

41 
	#SDIO_RESPCMD
 
	`MMIO32
(
SDIO_BASE
 + 0x10)

	)

44 
	#SDIO_RESP1
 
	`MMIO32
(
SDIO_BASE
 + 0x14)

	)

45 
	#SDIO_RESP2
 
	`MMIO32
(
SDIO_BASE
 + 0x18)

	)

46 
	#SDIO_RESP3
 
	`MMIO32
(
SDIO_BASE
 + 0x1C)

	)

47 
	#SDIO_RESP4
 
	`MMIO32
(
SDIO_BASE
 + 0x20)

	)

50 
	#SDIO_DTIMER
 
	`MMIO32
(
SDIO_BASE
 + 0x24)

	)

53 
	#SDIO_DLEN
 
	`MMIO32
(
SDIO_BASE
 + 0x28)

	)

56 
	#SDIO_DCTRL
 
	`MMIO32
(
SDIO_BASE
 + 0x2C)

	)

60 
	#SDIO_DCOUNT
 
	`MMIO32
(
SDIO_BASE
 + 0x30)

	)

63 
	#SDIO_STA
 
	`MMIO32
(
SDIO_BASE
 + 0x34)

	)

66 
	#SDIO_ICR
 
	`MMIO32
(
SDIO_BASE
 + 0x38)

	)

69 
	#SDIO_MASK
 
	`MMIO32
(
SDIO_BASE
 + 0x3C)

	)

72 
	#SDIO_FIFOCNT
 
	`MMIO32
(
SDIO_BASE
 + 0x48)

	)

76 
	#SDIO_FIFO
 
	`MMIO32
(
SDIO_BASE
 + 0x80)

	)

81 
	#SDIO_POWER_PWRCTRL_SHIFT
 0

	)

82 
	#SDIO_POWER_PWRCTRL_PWROFF
 (0x0 << 
SDIO_POWER_PWRCTRL_SHIFT
)

	)

84 
	#SDIO_POWER_PWRCTRL_RSVPWRUP
 (0x2 << 
SDIO_POWER_PWRCTRL_SHIFT
)

	)

85 
	#SDIO_POWER_PWRCTRL_PWRON
 (0x3 << 
SDIO_POWER_PWRCTRL_SHIFT
)

	)

91 
	#SDIO_CLKCR_HWFC_EN
 (1 << 14)

	)

94 
	#SDIO_CLKCR_NEGEDGE
 (1 << 13)

	)

98 
	#SDIO_CLKCR_WIDBUS_SHIFT
 11

	)

99 
	#SDIO_CLKCR_WIDBUS_1
 (0x0 << 
SDIO_CLKCR_WIDBUS_SHIFT
)

	)

100 
	#SDIO_CLKCR_WIDBUS_4
 (0x1 << 
SDIO_CLKCR_WIDBUS_SHIFT
)

	)

101 
	#SDIO_CLKCR_WIDBUS_8
 (0x2 << 
SDIO_CLKCR_WIDBUS_SHIFT
)

	)

104 
	#SDIO_CLKCR_BYPASS
 (1 << 10)

	)

107 
	#SDIO_CLKCR_PWRSAV
 (1 << 9)

	)

110 
	#SDIO_CLKCR_CLKEN
 (1 << 8)

	)

113 
	#SDIO_CLKCR_CLKDIV_SHIFT
 0

	)

114 
	#SDIO_CLKCR_CLKDIV_MSK
 (0xFF << 
SDIO_CLKCR_CLKDIV_SHIFT
)

	)

120 
	#SDIO_CMD_ATACMD
 (1 << 14)

	)

123 
	#SDIO_CMD_NIEN
 (1 << 13)

	)

126 
	#SDIO_CMD_ENCMDCOMPL
 (1 << 12)

	)

129 
	#SDIO_CMD_SDIOSUSPEND
 (1 << 11)

	)

132 
	#SDIO_CMD_CPSMEN
 (1 << 10)

	)

135 
	#SDIO_CMD_WAITPEND
 (1 << 9)

	)

138 
	#SDIO_CMD_WAITINT
 (1 << 8)

	)

141 
	#SDIO_CMD_WAITRESP_SHIFT
 6

	)

143 
	#SDIO_CMD_WAITRESP_NO_0
 (0x0 << 
SDIO_CMD_WAITRESP_SHIFT
)

	)

145 
	#SDIO_CMD_WAITRESP_SHORT
 (0x1 << 
SDIO_CMD_WAITRESP_SHIFT
)

	)

147 
	#SDIO_CMD_WAITRESP_NO_2
 (0x2 << 
SDIO_CMD_WAITRESP_SHIFT
)

	)

149 
	#SDIO_CMD_WAITRESP_LONG
 (0x3 << 
SDIO_CMD_WAITRESP_SHIFT
)

	)

152 
	#SDIO_CMD_CMDINDEX_SHIFT
 0

	)

153 
	#SDIO_CMD_CMDINDEX_MSK
 (0x3F << 
SDIO_CMD_CMDINDEX_SHIFT
)

	)

158 
	#SDIO_RESPCMD_SHIFT
 0

	)

159 
	#SDIO_RESPCMD_MSK
 (0x3F << 
SDIO_RESPCMD_SHIFT
)

	)

165 
	#SDIO_DCTRL_SDIOEN
 (1 << 11)

	)

171 
	#SDIO_DCTRL_RWMOD
 (1 << 10)

	)

177 
	#SDIO_DCTRL_RWSTOP
 (1 << 9)

	)

180 
	#SDIO_DCTRL_RWSTART
 (1 << 8)

	)

186 
	#SDIO_DCTRL_DBLOCKSIZE_SHIFT
 4

	)

187 
	#SDIO_DCTRL_DBLOCKSIZE_0
 (0x0 << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

188 
	#SDIO_DCTRL_DBLOCKSIZE_1
 (0x1 << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

189 
	#SDIO_DCTRL_DBLOCKSIZE_2
 (0x2 << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

190 
	#SDIO_DCTRL_DBLOCKSIZE_3
 (0x3 << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

191 
	#SDIO_DCTRL_DBLOCKSIZE_4
 (0x4 << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

192 
	#SDIO_DCTRL_DBLOCKSIZE_5
 (0x5 << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

193 
	#SDIO_DCTRL_DBLOCKSIZE_6
 (0x6 << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

194 
	#SDIO_DCTRL_DBLOCKSIZE_7
 (0x7 << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

195 
	#SDIO_DCTRL_DBLOCKSIZE_8
 (0x8 << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

196 
	#SDIO_DCTRL_DBLOCKSIZE_9
 (0x9 << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

197 
	#SDIO_DCTRL_DBLOCKSIZE_10
 (0xA << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

198 
	#SDIO_DCTRL_DBLOCKSIZE_11
 (0xB << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

199 
	#SDIO_DCTRL_DBLOCKSIZE_12
 (0xC << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

200 
	#SDIO_DCTRL_DBLOCKSIZE_13
 (0xD << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

201 
	#SDIO_DCTRL_DBLOCKSIZE_14
 (0xE << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

204 
	#SDIO_DCTRL_DMAEN
 (1 << 3)

	)

207 
	#SDIO_DCTRL_DTMODE
 (1 << 2)

	)

213 
	#SDIO_DCTRL_DTDIR
 (1 << 1)

	)

216 
	#SDIO_DCTRL_DTEN
 (1 << 0)

	)

222 
	#SDIO_STA_CEATAEND
 (1 << 23)

	)

225 
	#SDIO_STA_SDIOIT
 (1 << 22)

	)

228 
	#SDIO_STA_RXDAVL
 (1 << 21)

	)

231 
	#SDIO_STA_TXDAVL
 (1 << 20)

	)

234 
	#SDIO_STA_RXFIFOE
 (1 << 19)

	)

240 
	#SDIO_STA_TXFIFOE
 (1 << 18)

	)

246 
	#SDIO_STA_RXFIFOF
 (1 << 17)

	)

249 
	#SDIO_STA_TXFIFOF
 (1 << 16)

	)

252 
	#SDIO_STA_RXFIFOHF
 (1 << 15)

	)

257 
	#SDIO_STA_TXFIFOHE
 (1 << 14)

	)

260 
	#SDIO_STA_RXACT
 (1 << 13)

	)

263 
	#SDIO_STA_TXACT
 (1 << 12)

	)

266 
	#SDIO_STA_CMDACT
 (1 << 11)

	)

269 
	#SDIO_STA_DBCKEND
 (1 << 10)

	)

272 
	#SDIO_STA_STBITERR
 (1 << 9)

	)

275 
	#SDIO_STA_DATAEND
 (1 << 8)

	)

278 
	#SDIO_STA_CMDSENT
 (1 << 7)

	)

281 
	#SDIO_STA_CMDREND
 (1 << 6)

	)

284 
	#SDIO_STA_RXOVERR
 (1 << 5)

	)

287 
	#SDIO_STA_TXUNDERR
 (1 << 4)

	)

290 
	#SDIO_STA_DTIMEOUT
 (1 << 3)

	)

293 
	#SDIO_STA_CTIMEOUT
 (1 << 2)

	)

296 
	#SDIO_STA_DCRCFAIL
 (1 << 1)

	)

299 
	#SDIO_STA_CCRCFAIL
 (1 << 0)

	)

305 
	#SDIO_ICR_CEATAENDC
 (1 << 23)

	)

308 
	#SDIO_ICR_SDIOITC
 (1 << 22)

	)

311 
	#SDIO_ICR_DBCKENDC
 (1 << 10)

	)

314 
	#SDIO_ICR_STBITERRC
 (1 << 9)

	)

317 
	#SDIO_ICR_DATAENDC
 (1 << 8)

	)

320 
	#SDIO_ICR_CMDSENTC
 (1 << 7)

	)

323 
	#SDIO_ICR_CMDRENDC
 (1 << 6)

	)

326 
	#SDIO_ICR_RXOVERRC
 (1 << 5)

	)

329 
	#SDIO_ICR_TXUNDERRC
 (1 << 4)

	)

332 
	#SDIO_ICR_DTIMEOUTC
 (1 << 3)

	)

335 
	#SDIO_ICR_CTIMEOUTC
 (1 << 2)

	)

338 
	#SDIO_ICR_DCRCFAILC
 (1 << 1)

	)

341 
	#SDIO_ICR_CCRCFAILC
 (1 << 0)

	)

347 
	#SDIO_MASK_CEATAENDIE
 (1 << 23)

	)

350 
	#SDIO_MASK_SDIOITIE
 (1 << 22)

	)

353 
	#SDIO_MASK_RXDAVLIE
 (1 << 21)

	)

356 
	#SDIO_MASK_TXDAVLIE
 (1 << 20)

	)

359 
	#SDIO_MASK_RXFIFOEIE
 (1 << 19)

	)

362 
	#SDIO_MASK_TXFIFOEIE
 (1 << 18)

	)

365 
	#SDIO_MASK_RXFIFOFIE
 (1 << 17)

	)

368 
	#SDIO_MASK_TXFIFOFIE
 (1 << 16)

	)

371 
	#SDIO_MASK_RXFIFOHFIE
 (1 << 15)

	)

374 
	#SDIO_MASK_TXFIFOHEIE
 (1 << 14)

	)

377 
	#SDIO_MASK_RXACTIE
 (1 << 13)

	)

380 
	#SDIO_MASK_TXACTIE
 (1 << 12)

	)

383 
	#SDIO_MASK_CMDACTIE
 (1 << 11)

	)

386 
	#SDIO_MASK_DBCKENDIE
 (1 << 10)

	)

389 
	#SDIO_MASK_STBITERRIE
 (1 << 9)

	)

392 
	#SDIO_MASK_DATAENDIE
 (1 << 8)

	)

395 
	#SDIO_MASK_CMDSENTIE
 (1 << 7)

	)

398 
	#SDIO_MASK_CMDRENDIE
 (1 << 6)

	)

401 
	#SDIO_MASK_RXOVERRIE
 (1 << 5)

	)

404 
	#SDIO_MASK_TXUNDERRIE
 (1 << 4)

	)

407 
	#SDIO_MASK_DTIMEOUTIE
 (1 << 3)

	)

410 
	#SDIO_MASK_CTIMEOUTIE
 (1 << 2)

	)

413 
	#SDIO_MASK_DCRCFAILIE
 (1 << 1)

	)

416 
	#SDIO_MASK_CCRCFAILIE
 (1 << 0)

	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\spi.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/•i.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/•i.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/•i.h
>

29 #ñi‡
deföed
(
STM32F3
)

30 
	~<lib›ícm3/°m32/f3/•i.h
>

31 #ñi‡
deföed
(
STM32F4
)

32 
	~<lib›ícm3/°m32/f4/•i.h
>

33 #ñi‡
deföed
(
STM32L1
)

34 
	~<lib›ícm3/°m32/l1/•i.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\st_usbfs.h

20 #i‚de‡
LIBOPENCM3_ST_USBFS_H


21 
	#LIBOPENCM3_ST_USBFS_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

26 #i‡
deföed
(
STM32F0
)

27 
	~<lib›ícm3/°m32/f0/°_usbfs.h
>

28 #ñi‡
deföed
(
STM32F1
)

29 
	~<lib›ícm3/°m32/f1/°_usbfs.h
>

30 #ñi‡
deföed
(
STM32F3
)

31 
	~<lib›ícm3/°m32/f3/°_usbfs.h
>

32 #ñi‡
deföed
(
STM32L0
)

33 
	~<lib›ícm3/°m32/l0/°_usbfs.h
>

34 #ñi‡
deföed
(
STM32L1
)

35 
	~<lib›ícm3/°m32/l1/°_usbfs.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\timer.h

22 
	~<lib›ícm3/cm3/comm⁄.h
>

23 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

25 #i‡
deföed
(
STM32F0
)

26 
	~<lib›ícm3/°m32/f0/timî.h
>

27 #ñi‡
deföed
(
STM32F1
)

28 
	~<lib›ícm3/°m32/f1/timî.h
>

29 #ñi‡
deföed
(
STM32F2
)

30 
	~<lib›ícm3/°m32/f2/timî.h
>

31 #ñi‡
deföed
(
STM32F3
)

32 
	~<lib›ícm3/°m32/f3/timî.h
>

33 #ñi‡
deföed
(
STM32F4
)

34 
	~<lib›ícm3/°m32/f4/timî.h
>

35 #ñi‡
deföed
(
STM32L0
)

36 
	~<lib›ícm3/°m32/l0/timî.h
>

37 #ñi‡
deföed
(
STM32L1
)

38 
	~<lib›ícm3/°m32/l1/timî.h
>

39 #ñi‡
deföed
(
STM32L4
)

40 
	~<lib›ícm3/°m32/l4/timî.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\tools.h

20 #i‚de‡
LIBOPENCM3_TOOLS_H


21 
	#LIBOPENCM3_TOOLS_H


	)

28 
	#GET_REG
(
REG
Ë((
uöt16_t
Ë*(REG))

	)

31 
	#SET_REG
(
REG
, 
VAL
Ë(*(REGË(
uöt16_t
)(VAL))

	)

34 
	#CLR_REG_BIT
(
REG
, 
BIT
Ë
	`SET_REG
((REG), (~(BIT)))

	)

37 
	#CLR_REG_BIT_MSK_AND_SET
(
REG
, 
MSK
, 
BIT
, 
EXTRA_BITS
) \

38 
	`SET_REG
((
REG
), (
	`GET_REG
((REG)Ë& (
MSK
Ë& (~(
BIT
))Ë| (
EXTRA_BITS
))

	)

40 
	#CLR_REG_BIT_MSK
(
REG
, 
MSK
, 
BIT
) \

41 
	`CLR_REG_BIT_MSK_AND_SET
((
REG
), (
MSK
), (
BIT
), 0)

	)

44 
	#GET_REG_BIT
(
REG
, 
BIT
Ë(
	`GET_REG
(REGË& (BIT))

	)

56 
	#TOG_SET_REG_BIT_MSK_AND_SET
(
REG
, 
MSK
, 
BIT
, 
EXTRA_BITS
) \

58 
uöt16_t
 
toggÀ_mask
 = 
	`GET_REG
(
REG
Ë& (
MSK
); \

59 
uöt16_t
 
bô_£À˘‹
; \

60 
bô_£À˘‹
 = 1; bit_selector; bit_selector <<= 1) { \

61 i‡((
bô_£À˘‹
 & (
BIT
)) != 0) { \

62 
toggÀ_mask
 ^
bô_£À˘‹
; \

65 
	`SET_REG
((
REG
), 
toggÀ_mask
 | (
EXTRA_BITS
)); \

66 } 0)

	)

68 
	#TOG_SET_REG_BIT_MSK
(
REG
, 
MSK
, 
BIT
) \

69 
	`TOG_SET_REG_BIT_MSK_AND_SET
((
REG
), (
MSK
), (
BIT
), 0)

	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\usart.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/ußπ.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/ußπ.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/ußπ.h
>

29 #ñi‡
deföed
(
STM32F3
)

30 
	~<lib›ícm3/°m32/f3/ußπ.h
>

31 #ñi‡
deföed
(
STM32F4
)

32 
	~<lib›ícm3/°m32/f4/ußπ.h
>

33 #ñi‡
deföed
(
STM32L1
)

34 
	~<lib›ícm3/°m32/l1/ußπ.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\wwdg.h

20 #i‚de‡
LIBOPENCM3_WWDG_H


21 
	#LIBOPENCM3_WWDG_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

29 
	#WWDG_CR
 
	`MMIO32
(
WWDG_BASE
 + 0x00)

	)

32 
	#WWDG_CFR
 
	`MMIO32
(
WWDG_BASE
 + 0x04)

	)

35 
	#WWDG_SR
 
	`MMIO32
(
WWDG_BASE
 + 0x08)

	)

42 
	#WWDG_CR_WDGA
 (1 << 7)

	)

45 
	#WWDG_CR_T_LSB
 0

	)

46 
	#WWDG_CR_T0
 (1 << 0)

	)

47 
	#WWDG_CR_T1
 (1 << 1)

	)

48 
	#WWDG_CR_T2
 (1 << 2)

	)

49 
	#WWDG_CR_T3
 (1 << 3)

	)

50 
	#WWDG_CR_T4
 (1 << 4)

	)

51 
	#WWDG_CR_T5
 (1 << 5)

	)

52 
	#WWDG_CR_T6
 (1 << 6)

	)

59 
	#WWDG_CFR_EWI
 (1 << 9)

	)

62 
	#WWDG_CFR_WDGTB_LSB
 7

	)

63 
	#WWDG_CFR_WDGTB_CK_DIV1
 0x0

	)

64 
	#WWDG_CFR_WDGTB_CK_DIV2
 0x1

	)

65 
	#WWDG_CFR_WDGTB_CK_DIV4
 0x2

	)

66 
	#WWDG_CFR_WDGTB_CK_DIV8
 0x3

	)

69 
	#WWDG_CFG_W_LSB
 0

	)

70 
	#WWDG_CFG_W
 (1 << 0)

	)

77 
	#WWDG_SR_EWIF
 (1 << 0)

	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\usb\audio.h

38 #i‚de‡
LIBOPENCM3_USB_AUDIO_H


39 
	#LIBOPENCM3_USB_AUDIO_H


	)

47 
	#USB_CLASS_AUDIO
 0x01

	)

50 
	#USB_AUDIO_SUBCLASS_UNDEFINED
 0x00

	)

51 
	#USB_AUDIO_SUBCLASS_CONTROL
 0x01

	)

52 
	#USB_AUDIO_SUBCLASS_AUDIOSTREAMING
 0x02

	)

53 
	#USB_AUDIO_SUBCLASS_MIDISTREAMING
 0x03

	)

56 
	#USB_AUDIO_DT_CS_UNDEFINED
 0x20

	)

57 
	#USB_AUDIO_DT_CS_DEVICE
 0x21

	)

58 
	#USB_AUDIO_DT_CS_CONFIGURATION
 0x22

	)

59 
	#USB_AUDIO_DT_CS_STRING
 0x23

	)

60 
	#USB_AUDIO_DT_CS_INTERFACE
 0x24

	)

61 
	#USB_AUDIO_DT_CS_ENDPOINT
 0x25

	)

64 
	#USB_AUDIO_TYPE_AC_DESCRIPTOR_UNDEFINED
 0x00

	)

65 
	#USB_AUDIO_TYPE_HEADER
 0x01

	)

66 
	#USB_AUDIO_TYPE_INPUT_TERMINAL
 0x02

	)

67 
	#USB_AUDIO_TYPE_OUTPUT_TERMINAL
 0x03

	)

68 
	#USB_AUDIO_TYPE_MIXER_UNIT
 0x04

	)

69 
	#USB_AUDIO_TYPE_SELECTOR_UNIT
 0x05

	)

70 
	#USB_AUDIO_TYPE_FEATURE_UNIT
 0x06

	)

71 
	#USB_AUDIO_TYPE_PROCESSING_UNIT
 0x07

	)

72 
	#USB_AUDIO_TYPE_EXTENSION_UNIT
 0x08

	)

75 
	susb_audio_hódî_des¸ùt‹_hód
 {

76 
uöt8_t
 
	mbLígth
;

77 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

78 
uöt8_t
 
	mbDes¸ùt‹Subty≥
;

79 
uöt16_t
 
	mbcdADC
;

80 
uöt16_t
 
	mwTŸÆLígth
;

81 
uöt8_t
 
	mböCﬁÀ˘i⁄
;

83 } 
__©åibuã__
((
∑cked
));

86 
	susb_audio_hódî_des¸ùt‹_body
 {

88 
uöt8_t
 
	mbaI¡îÁ˚Nr
;

89 } 
__©åibuã__
((
∑cked
));

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\usb\cdc.h

38 #i‚de‡
__CDC_H


39 
	#__CDC_H


	)

47 
	#USB_CLASS_CDC
 0x02

	)

50 
	#USB_CDC_SUBCLASS_DLCM
 0x01

	)

51 
	#USB_CDC_SUBCLASS_ACM
 0x02

	)

55 
	#USB_CDC_PROTOCOL_NONE
 0x00

	)

56 
	#USB_CDC_PROTOCOL_AT
 0x01

	)

60 
	#USB_CLASS_DATA
 0x0A

	)

63 
	#CS_INTERFACE
 0x24

	)

64 
	#CS_ENDPOINT
 0x25

	)

68 
	#USB_CDC_TYPE_HEADER
 0x00

	)

69 
	#USB_CDC_TYPE_CALL_MANAGEMENT
 0x01

	)

70 
	#USB_CDC_TYPE_ACM
 0x02

	)

72 
	#USB_CDC_TYPE_UNION
 0x06

	)

76 
	susb_cdc_hódî_des¸ùt‹
 {

77 
uöt8_t
 
	mbFun˘i⁄Lígth
;

78 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

79 
uöt8_t
 
	mbDes¸ùt‹Subty≥
;

80 
uöt16_t
 
	mbcdCDC
;

81 } 
__©åibuã__
((
∑cked
));

84 
	susb_cdc_uni⁄_des¸ùt‹
 {

85 
uöt8_t
 
	mbFun˘i⁄Lígth
;

86 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

87 
uöt8_t
 
	mbDes¸ùt‹Subty≥
;

88 
uöt8_t
 
	mbC⁄åﬁI¡îÁ˚
;

89 
uöt8_t
 
	mbSub‹dö©eI¡îÁ˚0
;

91 } 
__©åibuã__
((
∑cked
));

100 
	susb_cdc_ˇŒ_m™agemít_des¸ùt‹
 {

101 
uöt8_t
 
	mbFun˘i⁄Lígth
;

102 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

103 
uöt8_t
 
	mbDes¸ùt‹Subty≥
;

104 
uöt8_t
 
	mbmC≠abûôõs
;

105 
uöt8_t
 
	mbD©aI¡îÁ˚
;

106 } 
__©åibuã__
((
∑cked
));

109 
	susb_cdc_acm_des¸ùt‹
 {

110 
uöt8_t
 
	mbFun˘i⁄Lígth
;

111 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

112 
uöt8_t
 
	mbDes¸ùt‹Subty≥
;

113 
uöt8_t
 
	mbmC≠abûôõs
;

114 } 
__©åibuã__
((
∑cked
));

118 
	#USB_CDC_REQ_SET_LINE_CODING
 0x20

	)

120 
	#USB_CDC_REQ_SET_CONTROL_LINE_STATE
 0x22

	)

124 
	susb_cdc_löe_codög
 {

125 
uöt32_t
 
	mdwDTER©e
;

126 
uöt8_t
 
	mbCh¨F‹m©
;

127 
uöt8_t
 
	mbP¨ôyTy≥
;

128 
uöt8_t
 
	mbD©aBôs
;

129 } 
__©åibuã__
((
∑cked
));

131 
	eusb_cdc_löe_codög_bCh¨F‹m©
 {

132 
	mUSB_CDC_1_STOP_BITS
 = 0,

133 
	mUSB_CDC_1_5_STOP_BITS
 = 1,

134 
	mUSB_CDC_2_STOP_BITS
 = 2,

137 
	eusb_cdc_löe_codög_bP¨ôyTy≥
 {

138 
	mUSB_CDC_NO_PARITY
 = 0,

139 
	mUSB_CDC_ODD_PARITY
 = 1,

140 
	mUSB_CDC_EVEN_PARITY
 = 2,

141 
	mUSB_CDC_MARK_PARITY
 = 3,

142 
	mUSB_CDC_SPACE_PARITY
 = 4,

147 
	#USB_CDC_NOTIFY_SERIAL_STATE
 0x20

	)

151 
	susb_cdc_nŸifiˇti⁄
 {

152 
uöt8_t
 
	mbmReque°Ty≥
;

153 
uöt8_t
 
	mbNŸifiˇti⁄
;

154 
uöt16_t
 
	mwVÆue
;

155 
uöt16_t
 
	mwIndex
;

156 
uöt16_t
 
	mwLígth
;

157 } 
__©åibuã__
((
∑cked
));

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\usb\dfu.h

38 #i‚de‡
__DFU_H


39 
	#__DFU_H


	)

41 
	edfu_ªq
 {

42 
	mDFU_DETACH
,

43 
	mDFU_DNLOAD
,

44 
	mDFU_UPLOAD
,

45 
	mDFU_GETSTATUS
,

46 
	mDFU_CLRSTATUS
,

47 
	mDFU_GETSTATE
,

48 
	mDFU_ABORT
,

51 
	edfu_°©us
 {

52 
	mDFU_STATUS_OK
,

53 
	mDFU_STATUS_ERR_TARGET
,

54 
	mDFU_STATUS_ERR_FILE
,

55 
	mDFU_STATUS_ERR_WRITE
,

56 
	mDFU_STATUS_ERR_ERASE
,

57 
	mDFU_STATUS_ERR_CHECK_ERASED
,

58 
	mDFU_STATUS_ERR_PROG
,

59 
	mDFU_STATUS_ERR_VERIFY
,

60 
	mDFU_STATUS_ERR_ADDRESS
,

61 
	mDFU_STATUS_ERR_NOTDONE
,

62 
	mDFU_STATUS_ERR_FIRMWARE
,

63 
	mDFU_STATUS_ERR_VENDOR
,

64 
	mDFU_STATUS_ERR_USBR
,

65 
	mDFU_STATUS_ERR_POR
,

66 
	mDFU_STATUS_ERR_UNKNOWN
,

67 
	mDFU_STATUS_ERR_STALLEDPKT
,

70 
	edfu_°©e
 {

71 
	mSTATE_APP_IDLE
,

72 
	mSTATE_APP_DETACH
,

73 
	mSTATE_DFU_IDLE
,

74 
	mSTATE_DFU_DNLOAD_SYNC
,

75 
	mSTATE_DFU_DNBUSY
,

76 
	mSTATE_DFU_DNLOAD_IDLE
,

77 
	mSTATE_DFU_MANIFEST_SYNC
,

78 
	mSTATE_DFU_MANIFEST
,

79 
	mSTATE_DFU_MANIFEST_WAIT_RESET
,

80 
	mSTATE_DFU_UPLOAD_IDLE
,

81 
	mSTATE_DFU_ERROR
,

84 
	#DFU_FUNCTIONAL
 0x21

	)

85 
	susb_dfu_des¸ùt‹
 {

86 
uöt8_t
 
	mbLígth
;

87 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

88 
uöt8_t
 
	mbmAâribuãs
;

89 
	#USB_DFU_CAN_DOWNLOAD
 0x01

	)

90 
	#USB_DFU_CAN_UPLOAD
 0x02

	)

91 
	#USB_DFU_MANIFEST_TOLERANT
 0x04

	)

92 
	#USB_DFU_WILL_DETACH
 0x08

	)

94 
uöt16_t
 
	mwDëachTimeout
;

95 
uöt16_t
 
	mwTøns„rSize
;

96 
uöt16_t
 
	mbcdDFUVîsi⁄
;

97 } 
__©åibuã__
((
∑cked
));

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\usb\doc-usb.h

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\usb\hid.h

38 #i‚de‡
__HID_H


39 
	#__HID_H


	)

41 
	~<°döt.h
>

43 
	#USB_CLASS_HID
 3

	)

45 
	#USB_DT_HID
 0x21

	)

46 
	#USB_DT_REPORT
 0x22

	)

48 
	susb_hid_des¸ùt‹
 {

49 
uöt8_t
 
	mbLígth
;

50 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

51 
uöt16_t
 
	mbcdHID
;

52 
uöt8_t
 
	mbCou¡ryCode
;

53 
uöt8_t
 
	mbNumDes¸ùt‹s
;

54 } 
__©åibuã__
((
∑cked
));

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\usb\midi.h

38 #i‚de‡
LIBOPENCM3_USB_MIDI_H


39 
	#LIBOPENCM3_USB_MIDI_H


	)

47 
	#USB_MIDI_SUBTYPE_MS_DESCRIPTOR_UNDEFINED
 0x00

	)

48 
	#USB_MIDI_SUBTYPE_MS_HEADER
 0x01

	)

49 
	#USB_MIDI_SUBTYPE_MIDI_IN_JACK
 0x02

	)

50 
	#USB_MIDI_SUBTYPE_MIDI_OUT_JACK
 0x03

	)

51 
	#USB_MIDI_SUBTYPE_MIDI_ELEMENT
 0x04

	)

54 
	#USB_MIDI_SUBTYPE_DESCRIPTOR_UNDEFINED
 0x00

	)

55 
	#USB_MIDI_SUBTYPE_MS_GENERAL
 0x01

	)

58 
	#USB_MIDI_JACK_TYPE_UNDEFINED
 0x00

	)

59 
	#USB_MIDI_JACK_TYPE_EMBEDDED
 0x01

	)

60 
	#USB_MIDI_JACK_TYPE_EXTERNAL
 0x02

	)

63 
	#USB_MIDI_EP_CONTROL_UNDEFINED
 0x00

	)

64 
	#USB_MIDI_ASSOCIATION_CONTROL
 0x01

	)

68 
	susb_midi_hódî_des¸ùt‹
 {

69 
uöt8_t
 
	mbLígth
;

70 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

71 
uöt8_t
 
	mbDes¸ùt‹Subty≥
;

72 
uöt16_t
 
	mbcdMSC
;

73 
uöt16_t
 
	mwTŸÆLígth
;

74 } 
__©åibuã__
((
∑cked
));

77 
	susb_midi_ö_jack_des¸ùt‹
 {

78 
uöt8_t
 
	mbLígth
;

79 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

80 
uöt8_t
 
	mbDes¸ùt‹Subty≥
;

81 
uöt8_t
 
	mbJackTy≥
;

82 
uöt8_t
 
	mbJackID
;

83 
uöt8_t
 
	miJack
;

84 } 
__©åibuã__
((
∑cked
));

87 
	susb_midi_out_jack_des¸ùt‹_hód
 {

88 
uöt8_t
 
	mbLígth
;

89 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

90 
uöt8_t
 
	mbDes¸ùt‹Subty≥
;

91 
uöt8_t
 
	mbJackTy≥
;

92 
uöt8_t
 
	mbJackID
;

93 
uöt8_t
 
	mbNrI≈utPös
;

95 } 
__©åibuã__
((
∑cked
));

98 
	susb_midi_out_jack_des¸ùt‹_body
 {

100 
uöt8_t
 
	mbaSour˚ID
;

101 
uöt8_t
 
	mbaSour˚Pö
;

103 } 
__©åibuã__
((
∑cked
));

106 
	susb_midi_out_jack_des¸ùt‹_èû
 {

108 
uöt8_t
 
	miJack
;

109 } 
__©åibuã__
((
∑cked
));

116 
	susb_midi_out_jack_des¸ùt‹
 {

117 
usb_midi_out_jack_des¸ùt‹_hód
 
	mhód
;

118 
usb_midi_out_jack_des¸ùt‹_body
 
	msour˚
[1];

119 
usb_midi_out_jack_des¸ùt‹_èû
 
	mèû
;

120 } 
__©åibuã__
((
∑cked
));

123 
	susb_midi_ñemít_des¸ùt‹_hód
 {

124 
uöt8_t
 
	mbLígth
;

125 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

126 
uöt8_t
 
	mbDes¸ùt‹Subty≥
;

127 
uöt8_t
 
	mbEÀmítID
;

128 
uöt8_t
 
	mbNrI≈utPös
;

130 } 
__©åibuã__
((
∑cked
));

133 
	susb_midi_ñemít_des¸ùt‹_body
 {

135 
uöt8_t
 
	mbaSour˚ID
;

136 
uöt8_t
 
	mbaSour˚Pö
;

138 } 
__©åibuã__
((
∑cked
));

141 
	susb_midi_ñemít_des¸ùt‹_èû
 {

143 
uöt8_t
 
	mbNrOuçutPös
;

144 
uöt8_t
 
	mbInTîmöÆLök
;

145 
uöt8_t
 
	mbOutTîmöÆLök
;

146 
uöt8_t
 
	mbElC≠sSize
;

147 
uöt16_t
 
	mbmEÀmítC≠s
;

150 
uöt8_t
 
	miEÀmít
;

151 } 
__©åibuã__
((
∑cked
));

158 
	susb_midi_ñemít_des¸ùt‹
 {

159 
usb_midi_ñemít_des¸ùt‹_hód
 
	mhód
;

160 
usb_midi_ñemít_des¸ùt‹_body
 
	msour˚
[1];

161 
usb_midi_ñemít_des¸ùt‹_èû
 
	mèû
;

162 } 
__©åibuã__
((
∑cked
));

165 
	susb_midi_ídpoöt_des¸ùt‹_hód
 {

166 
uöt8_t
 
	mbLígth
;

167 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

168 
uöt8_t
 
	mbDes¸ùt‹SubTy≥
;

169 
uöt8_t
 
	mbNumEmbMIDIJack
;

170 } 
__©åibuã__
((
∑cked
));

173 
	susb_midi_ídpoöt_des¸ùt‹_body
 {

174 
uöt8_t
 
	mbaAssocJackID
;

175 } 
__©åibuã__
((
∑cked
));

182 
	susb_midi_ídpoöt_des¸ùt‹
 {

183 
usb_midi_ídpoöt_des¸ùt‹_hód
 
	mhód
;

184 
usb_midi_ídpoöt_des¸ùt‹_body
 
	mjack
[1];

185 } 
__©åibuã__
((
∑cked
));

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\usb\msc.h

40 #i‚de‡
__MSC_H


41 
	#__MSC_H


	)

43 
_usbd_mass_°‹age
 
	tusbd_mass_°‹age
;

55 
	#USB_CLASS_MSC
 0x08

	)

58 
	#USB_MSC_SUBCLASS_RBC
 0x01

	)

59 
	#USB_MSC_SUBCLASS_ATAPI
 0x02

	)

60 
	#USB_MSC_SUBCLASS_UFI
 0x04

	)

61 
	#USB_MSC_SUBCLASS_SCSI
 0x06

	)

62 
	#USB_MSC_SUBCLASS_LOCKABLE
 0x07

	)

63 
	#USB_MSC_SUBCLASS_IEEE1667
 0x08

	)

66 
	#USB_MSC_PROTOCOL_CBI
 0x00

	)

67 
	#USB_MSC_PROTOCOL_CBI_ALT
 0x01

	)

68 
	#USB_MSC_PROTOCOL_BBB
 0x50

	)

71 
	#USB_MSC_REQ_CODES_ADSC
 0x00

	)

72 
	#USB_MSC_REQ_CODES_GET
 0xFC

	)

73 
	#USB_MSC_REQ_CODES_PUT
 0xFD

	)

74 
	#USB_MSC_REQ_CODES_GML
 0xFE

	)

75 
	#USB_MSC_REQ_CODES_BOMSR
 0xFF

	)

78 
	#USB_MSC_REQ_BULK_ONLY_RESET
 0xFF

	)

79 
	#USB_MSC_REQ_GET_MAX_LUN
 0xFE

	)

81 
usbd_mass_°‹age
 *
usb_msc_öô
(
usbd_devi˚
 *
usbd_dev
,

82 
uöt8_t
 
ï_ö
, uöt8_à
ï_ö_size
,

83 
uöt8_t
 
ï_out
, uöt8_à
ï_out_size
,

84 c⁄° *
víd‹_id
,

85 c⁄° *
¥odu˘_id
,

86 c⁄° *
¥odu˘_ªvisi⁄_Àvñ
,

87 c⁄° 
uöt32_t
 
block_cou¡
,

88 (*
ªad_block
)(
uöt32_t
 
lba
, 
uöt8_t
 *
c›y_to
),

89 (*
wrôe_block
)(
uöt32_t
 
lba
, c⁄° 
uöt8_t
 *
c›y_‰om
));

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\usb\usbd.h

38 #i‚de‡
__USBD_H


39 
	#__USBD_H


	)

41 
	~<lib›ícm3/usb/usb°d.h
>

43 
BEGIN_DECLS


46 
	eusbd_ªque°_ªtu∫_codes
 {

47 
	mUSBD_REQ_NOTSUPP
 = 0,

48 
	mUSBD_REQ_HANDLED
 = 1,

49 
	mUSBD_REQ_NEXT_CALLBACK
 = 2,

52 
_usbd_drivî
 
	tusbd_drivî
;

53 
_usbd_devi˚
 
	tusbd_devi˚
;

55 c⁄° 
usbd_drivî
 
°_usbfs_v1_usb_drivî
;

56 c⁄° 
usbd_drivî
 
°m32f107_usb_drivî
;

57 c⁄° 
usbd_drivî
 
°m32f207_usb_drivî
;

58 c⁄° 
usbd_drivî
 
°_usbfs_v2_usb_drivî
;

59 
	#Ÿgfs_usb_drivî
 
°m32f107_usb_drivî


	)

60 
	#Ÿghs_usb_drivî
 
°m32f207_usb_drivî


	)

61 c⁄° 
usbd_drivî
 
efm32lg_usb_drivî
;

86 
usbd_devi˚
 * 
usbd_öô
(c⁄° 
usbd_drivî
 *
drivî
,

87 c⁄° 
usb_devi˚_des¸ùt‹
 *
dev
,

88 c⁄° 
usb_c⁄fig_des¸ùt‹
 *
c⁄f
,

89 c⁄° **
°rögs
, 
num_°rögs
,

90 
uöt8_t
 *
c⁄åﬁ_buf„r
,

91 
uöt16_t
 
c⁄åﬁ_buf„r_size
);

94 
usbd_ªgi°î_ª£t_ˇŒback
(
usbd_devi˚
 *
usbd_dev
,

95 (*
ˇŒback
)());

97 
	`usbd_ªgi°î_su•íd_ˇŒback
(
usbd_devi˚
 *
usbd_dev
,

98 (*
ˇŒback
)());

100 
	`usbd_ªgi°î_ªsume_ˇŒback
(
usbd_devi˚
 *
usbd_dev
,

101 (*
ˇŒback
)());

103 
	`usbd_ªgi°î_sof_ˇŒback
(
usbd_devi˚
 *
usbd_dev
,

104 (*
ˇŒback
)());

106 (*
	tusbd_c⁄åﬁ_com∂ëe_ˇŒback
)(
	tusbd_devi˚
 *
	tusbd_dev
,

107 
	tusb_£tup_d©a
 *
	tªq
);

109 (*
	tusbd_c⁄åﬁ_ˇŒback
)(
	tusbd_devi˚
 *
	tusbd_dev
,

110 
	tusb_£tup_d©a
 *
	tªq
, 
	tuöt8_t
 **
	tbuf
, 
	tuöt16_t
 *
	tÀn
,

111 
	tusbd_c⁄åﬁ_com∂ëe_ˇŒback
 *
	tcom∂ëe
);

113 (*
	tusbd_£t_c⁄fig_ˇŒback
)(
	tusbd_devi˚
 *
	tusbd_dev
,

114 
	tuöt16_t
 
	twVÆue
);

116 (*
	tusbd_£t_Æt£âög_ˇŒback
)(
	tusbd_devi˚
 *
	tusbd_dev
,

117 
	tuöt16_t
 
	twIndex
, uöt16_à
	twVÆue
);

119 (*
	tusbd_ídpoöt_ˇŒback
)(
	tusbd_devi˚
 *
	tusbd_dev
, 
	tuöt8_t
 
	tï
);

130 
	`usbd_ªgi°î_c⁄åﬁ_ˇŒback
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ty≥
,

131 
uöt8_t
 
ty≥_mask
,

132 
usbd_c⁄åﬁ_ˇŒback
 
ˇŒback
);

138 
	`usbd_ªgi°î_£t_c⁄fig_ˇŒback
(
usbd_devi˚
 *
usbd_dev
,

139 
usbd_£t_c⁄fig_ˇŒback
 
ˇŒback
);

141 
	`usbd_ªgi°î_£t_Æt£âög_ˇŒback
(
usbd_devi˚
 *
usbd_dev
,

142 
usbd_£t_Æt£âög_ˇŒback
 
ˇŒback
);

145 
	`usbd_pﬁl
(
usbd_devi˚
 *
usbd_dev
);

148 
	`usbd_disc⁄√˘
(
usbd_devi˚
 *
usbd_dev
, 
boﬁ
 
disc⁄√˘ed
);

154 
	`usbd_ï_£tup
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, uöt8_à
ty≥
,

155 
uöt16_t
 
max_size
, 
usbd_ídpoöt_ˇŒback
 
ˇŒback
);

162 
uöt16_t
 
	`usbd_ï_wrôe_∑ckë
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
,

163 c⁄° *
buf
, 
uöt16_t
 
Àn
);

170 
uöt16_t
 
	`usbd_ï_ªad_∑ckë
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
,

171 *
buf
, 
uöt16_t
 
Àn
);

176 
	`usbd_ï_°Æl_£t
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
,

177 
uöt8_t
 
°Æl
);

183 
uöt8_t
 
	`usbd_ï_°Æl_gë
(
usbd_devi˚
 *
usbd_dev
, uöt8_à
addr
);

189 
	`usbd_ï_«k_£t
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, uöt8_à
«k
);

191 
END_DECLS


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\usb\usbstd.h

43 #i‚de‡
__USBSTD_H


44 
	#__USBSTD_H


	)

46 
	~<°döt.h
>

47 
	~<lib›ícm3/cm3/comm⁄.h
>

56 
	susb_£tup_d©a
 {

57 
uöt8_t
 
	mbmReque°Ty≥
;

58 
uöt8_t
 
	mbReque°
;

59 
uöt16_t
 
	mwVÆue
;

60 
uöt16_t
 
	mwIndex
;

61 
uöt16_t
 
	mwLígth
;

62 } 
__©åibuã__
((
∑cked
));

65 
	#USB_CLASS_VENDOR
 0xFF

	)

69 
	#USB_REQ_TYPE_DIRECTION
 0x80

	)

70 
	#USB_REQ_TYPE_IN
 0x80

	)

72 
	#USB_REQ_TYPE_TYPE
 0x60

	)

73 
	#USB_REQ_TYPE_STANDARD
 0x00

	)

74 
	#USB_REQ_TYPE_CLASS
 0x20

	)

75 
	#USB_REQ_TYPE_VENDOR
 0x40

	)

77 
	#USB_REQ_TYPE_RECIPIENT
 0x1F

	)

78 
	#USB_REQ_TYPE_DEVICE
 0x00

	)

79 
	#USB_REQ_TYPE_INTERFACE
 0x01

	)

80 
	#USB_REQ_TYPE_ENDPOINT
 0x02

	)

81 
	#USB_REQ_TYPE_OTHER
 0x03

	)

84 
	#USB_REQ_GET_STATUS
 0

	)

85 
	#USB_REQ_CLEAR_FEATURE
 1

	)

87 
	#USB_REQ_SET_FEATURE
 3

	)

89 
	#USB_REQ_SET_ADDRESS
 5

	)

90 
	#USB_REQ_GET_DESCRIPTOR
 6

	)

91 
	#USB_REQ_SET_DESCRIPTOR
 7

	)

92 
	#USB_REQ_GET_CONFIGURATION
 8

	)

93 
	#USB_REQ_SET_CONFIGURATION
 9

	)

94 
	#USB_REQ_GET_INTERFACE
 10

	)

95 
	#USB_REQ_SET_INTERFACE
 11

	)

96 
	#USB_REQ_SET_SYNCH_FRAME
 12

	)

99 
	#USB_DT_DEVICE
 1

	)

100 
	#USB_DT_CONFIGURATION
 2

	)

101 
	#USB_DT_STRING
 3

	)

102 
	#USB_DT_INTERFACE
 4

	)

103 
	#USB_DT_ENDPOINT
 5

	)

104 
	#USB_DT_DEVICE_QUALIFIER
 6

	)

105 
	#USB_DT_OTHER_SPEED_CONFIGURATION
 7

	)

106 
	#USB_DT_INTERFACE_POWER
 8

	)

108 
	#USB_DT_OTG
 9

	)

109 
	#USB_DT_DEBUG
 10

	)

110 
	#USB_DT_INTERFACE_ASSOCIATION
 11

	)

113 
	#USB_FEAT_ENDPOINT_HALT
 0

	)

114 
	#USB_FEAT_DEVICE_REMOTE_WAKEUP
 1

	)

115 
	#USB_FEAT_TEST_MODE
 2

	)

118 
	#USB_DEV_STATUS_SELF_POWERED
 0x01

	)

119 
	#USB_DEV_STATUS_REMOTE_WAKEUP
 0x02

	)

122 
	susb_devi˚_des¸ùt‹
 {

123 
uöt8_t
 
	mbLígth
;

124 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

125 
uöt16_t
 
	mbcdUSB
;

126 
uöt8_t
 
	mbDevi˚Cœss
;

127 
uöt8_t
 
	mbDevi˚SubCœss
;

128 
uöt8_t
 
	mbDevi˚PrŸocﬁ
;

129 
uöt8_t
 
	mbMaxPackëSize0
;

130 
uöt16_t
 
	midVíd‹
;

131 
uöt16_t
 
	midProdu˘
;

132 
uöt16_t
 
	mbcdDevi˚
;

133 
uöt8_t
 
	miM™uÁ˘uªr
;

134 
uöt8_t
 
	miProdu˘
;

135 
uöt8_t
 
	miSîülNumbî
;

136 
uöt8_t
 
	mbNumC⁄figuøti⁄s
;

137 } 
__©åibuã__
((
∑cked
));

139 
	#USB_DT_DEVICE_SIZE
 (
usb_devi˚_des¸ùt‹
)

	)

144 
	susb_devi˚_quÆifõr_des¸ùt‹
 {

145 
uöt8_t
 
	mbLígth
;

146 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

147 
uöt16_t
 
	mbcdUSB
;

148 
uöt8_t
 
	mbDevi˚Cœss
;

149 
uöt8_t
 
	mbDevi˚SubCœss
;

150 
uöt8_t
 
	mbDevi˚PrŸocﬁ
;

151 
uöt8_t
 
	mbMaxPackëSize0
;

152 
uöt8_t
 
	mbNumC⁄figuøti⁄s
;

153 
uöt8_t
 
	mbRe£rved
;

154 } 
__©åibuã__
((
∑cked
));

157 
	susb_c⁄fig_des¸ùt‹
 {

158 
uöt8_t
 
	mbLígth
;

159 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

160 
uöt16_t
 
	mwTŸÆLígth
;

161 
uöt8_t
 
	mbNumI¡îÁ˚s
;

162 
uöt8_t
 
	mbC⁄figuøti⁄VÆue
;

163 
uöt8_t
 
	miC⁄figuøti⁄
;

164 
uöt8_t
 
	mbmAâribuãs
;

165 
uöt8_t
 
	mbMaxPowî
;

168 c⁄° 
	susb_öãrÁ˚
 {

169 
uöt8_t
 *
	mcur_Æt£âög
;

170 
uöt8_t
 
	mnum_Æt£âög
;

171 c⁄° 
usb_iÁ˚_assoc_des¸ùt‹
 *
	miÁ˚_assoc
;

172 c⁄° 
usb_öãrÁ˚_des¸ùt‹
 *
	mÆt£âög
;

173 } *
	möãrÁ˚
;

174 } 
__©åibuã__
((
∑cked
));

175 
	#USB_DT_CONFIGURATION_SIZE
 9

	)

178 
	#USB_CONFIG_ATTR_DEFAULT
 0x80

	)

179 
	#USB_CONFIG_ATTR_SELF_POWERED
 0x40

	)

180 
	#USB_CONFIG_ATTR_REMOTE_WAKEUP
 0x20

	)

187 
	susb_öãrÁ˚_des¸ùt‹
 {

188 
uöt8_t
 
	mbLígth
;

189 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

190 
uöt8_t
 
	mbI¡îÁ˚Numbî
;

191 
uöt8_t
 
	mbA…î«ãSëtög
;

192 
uöt8_t
 
	mbNumEndpoöts
;

193 
uöt8_t
 
	mbI¡îÁ˚Cœss
;

194 
uöt8_t
 
	mbI¡îÁ˚SubCœss
;

195 
uöt8_t
 
	mbI¡îÁ˚PrŸocﬁ
;

196 
uöt8_t
 
	miI¡îÁ˚
;

199 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
	mídpoöt
;

200 c⁄° *
	mexåa
;

201 
	mexåÆí
;

202 } 
__©åibuã__
((
∑cked
));

203 
	#USB_DT_INTERFACE_SIZE
 9

	)

206 
	susb_ídpoöt_des¸ùt‹
 {

207 
uöt8_t
 
	mbLígth
;

208 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

209 
uöt8_t
 
	mbEndpoötAddªss
;

210 
uöt8_t
 
	mbmAâribuãs
;

211 
uöt16_t
 
	mwMaxPackëSize
;

212 
uöt8_t
 
	mbI¡îvÆ
;

215 c⁄° *
	mexåa
;

216 
	mexåÆí
;

217 } 
__©åibuã__
((
∑cked
));

218 
	#USB_DT_ENDPOINT_SIZE
 7

	)

221 
	#USB_ENDPOINT_ADDR_OUT
(
x
Ë(x)

	)

222 
	#USB_ENDPOINT_ADDR_IN
(
x
Ë(0x80 | (x))

	)

226 
	#USB_ENDPOINT_ATTR_CONTROL
 0x00

	)

227 
	#USB_ENDPOINT_ATTR_ISOCHRONOUS
 0x01

	)

228 
	#USB_ENDPOINT_ATTR_BULK
 0x02

	)

229 
	#USB_ENDPOINT_ATTR_INTERRUPT
 0x03

	)

230 
	#USB_ENDPOINT_ATTR_TYPE
 0x03

	)

232 
	#USB_ENDPOINT_ATTR_NOSYNC
 0x00

	)

233 
	#USB_ENDPOINT_ATTR_ASYNC
 0x04

	)

234 
	#USB_ENDPOINT_ATTR_ADAPTIVE
 0x08

	)

235 
	#USB_ENDPOINT_ATTR_SYNC
 0x0C

	)

236 
	#USB_ENDPOINT_ATTR_SYNCTYPE
 0x0C

	)

238 
	#USB_ENDPOINT_ATTR_DATA
 0x00

	)

239 
	#USB_ENDPOINT_ATTR_FEEDBACK
 0x10

	)

240 
	#USB_ENDPOINT_ATTR_IMPLICIT_FEEDBACK_DATA
 0x20

	)

241 
	#USB_ENDPOINT_ATTR_USAGETYPE
 0x30

	)

246 
	susb_°rög_des¸ùt‹
 {

247 
uöt8_t
 
	mbLígth
;

248 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

249 
uöt16_t
 
	mwD©a
[];

250 } 
__©åibuã__
((
∑cked
));

253 
	susb_iÁ˚_assoc_des¸ùt‹
 {

254 
uöt8_t
 
	mbLígth
;

255 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

256 
uöt8_t
 
	mbFú°I¡îÁ˚
;

257 
uöt8_t
 
	mbI¡îÁ˚Cou¡
;

258 
uöt8_t
 
	mbFun˘i⁄Cœss
;

259 
uöt8_t
 
	mbFun˘i⁄SubCœss
;

260 
uöt8_t
 
	mbFun˘i⁄PrŸocﬁ
;

261 
uöt8_t
 
	miFun˘i⁄
;

262 } 
__©åibuã__
((
∑cked
));

263 
	#USB_DT_INTERFACE_ASSOCIATION_SIZE
 \

264 (
usb_iÁ˚_assoc_des¸ùt‹
)

	)

266 
	eusb_œnguage_id
 {

267 
	mUSB_LANGID_ENGLISH_US
 = 0x409,

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~2\core_cm3.h

10 #i‚de‡
OPENCMSIS_CORECM3_H


11 
	#OPENCMSIS_CORECM3_H


	)

13 
	~<lib›ícm3/cm3/comm⁄.h
>

14 
	~<lib›ícm3/cm3/c‹ãx.h
>

15 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

16 
	~<lib›ícm3/cm3/sy°ick.h
>

17 
	~<lib›ícm3/cm3/nvic.h
>

18 
	~<lib›ícm3/cm3/scb.h
>

21 
	#__INLINE
 
ölöe


	)

23 
	#__STATIC_INLINE
 
ölöe


	)

27 
	#__IO
 vﬁ©ûe

	)

28 
	#__O
 vﬁ©ûe

	)

29 
	#__I
 vﬁ©ûe

	)

35 
	#SCB_SCR_SLEEPDEEP_Msk
 
SCB_SCR_SLEEPDEEP


	)

41 
__IO
 
uöt32_t
 
	mCPUID
;

42 
__IO
 
uöt32_t
 
	mICSR
;

43 
__IO
 
uöt32_t
 
	mVTOR
;

44 
__IO
 
uöt32_t
 
	mAIRCR
;

45 
__IO
 
uöt32_t
 
	mSCR
;

46 
__IO
 
uöt32_t
 
	mCCR
;

47 
__IO
 
uöt8_t
 
	mSHPR
[12];

48 
__IO
 
uöt32_t
 
	mSHCSR
;

49 } 
	tSCB_Ty≥Def
;

50 
	#SCB
 ((
SCB_Ty≥Def
 *Ë
SCB_BASE
)

	)

54 
	#__WFI
(Ë
	`__asm__
("wfi")

	)

57 
	#__CLZ
(
div
Ë
	`__buûtö_˛z
(div)

	)

62 
	#__REV
(
x
Ë
	`__buûtö_bsw≠32
(x)

	)

66 
uöt32_t
 
	mDHCSR
;

67 
uöt32_t
 
	mDEMCR
;

68 } 
	tC‹eDebug_Ty≥Def
;

70 
	#C‹eDebug
 ((
C‹eDebug_Ty≥Def
 *Ë0)

	)

71 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 0

	)

72 
	#C‹eDebug_DEMCR_TRCENA_Msk
 0

	)

76 
ölöe
 
	$NVIC_CÀ¨PídögIRQ
(
uöt8_t
 
úqn
)

78 
	`nvic_˛ór_≥ndög_úq
(
úqn
);

79 
	}
}

80 
ölöe
 
	$NVIC_E«bÀIRQ
(
uöt8_t
 
úqn
)

82 
	`nvic_íabÀ_úq
(
úqn
);

83 
	}
}

84 
ölöe
 
	$NVIC_DißbÀIRQ
(
uöt8_t
 
úqn
)

86 
	`nvic_dißbÀ_úq
(
úqn
);

87 
	}
}

91 
ölöe
 
	$__íabÀ_úq
()

93 
	`cm_íabÀ_öãºu±s
();

94 
	}
}

95 
ölöe
 
	$__dißbÀ_úq
()

97 
	`cm_dißbÀ_öãºu±s
();

98 
	}
}

102 
	#SCB_SHCSR_MEMFAULTENA_Msk
 0

	)

105 
uöt32_t
 
	mCTRL
;

106 
uöt32_t
 
	mRNR
;

107 
uöt32_t
 
	mRBAR
;

108 
uöt32_t
 
	mRASR
;

109 } 
	tMPU_Ty≥Def
;

111 
	#MPU
 ((
MPU_Ty≥Def
 *Ë0)

	)

112 
	#MPU_CTRL_ENABLE_Msk
 0

	)

113 
	#MPU_RASR_XN_Pos
 0

	)

114 
	#MPU_RASR_AP_Pos
 0

	)

115 
	#MPU_RASR_TEX_Pos
 0

	)

116 
	#MPU_RASR_S_Pos
 0

	)

117 
	#MPU_RASR_C_Pos
 0

	)

118 
	#MPU_RASR_B_Pos
 0

	)

119 
	#MPU_RASR_SRD_Pos
 0

	)

120 
	#MPU_RASR_SIZE_Pos
 0

	)

121 
	#MPU_RASR_ENABLE_Pos
 0

	)

143 
uöt32_t
 
	mCTRL
;

144 
uöt32_t
 
	mLOAD
;

145 
uöt32_t
 
	mVAL
;

146 
uöt32_t
 
	mCALIB
;

147 } 
	tSysTick_Ty≥Def
;

148 
	#SysTick
 ((
SysTick_Ty≥Def
 *Ë
SYS_TICK_BASE
)

	)

150 
ölöe
 
uöt32_t
 
	$SysTick_C⁄fig
(
uöt32_t
 
n_ticks
)

154 i‡(
n_ticks
 & ~0x00FFFFFF) {

158 
	`sy°ick_£t_ªlﬂd
(
n_ticks
);

159 
	`sy°ick_£t_˛ocksour˚
(
åue
);

160 
	`sy°ick_öãºu±_íabÀ
();

161 
	`sy°ick_cou¡î_íabÀ
();

164 
	}
}

168 
uöt32_t
 
	mLAR
;

169 
uöt32_t
 
	mTCR
;

170 } 
	tITM_Ty≥Def
;

172 
	#ITM
 ((
ITM_Ty≥Def
 *Ë0)

	)

178 
	#SysTick_H™dÀr
 
sys_tick_h™dÀr


	)

181 
	~<lib›ícmsis/di•©ch/úqh™dÀrs.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~2\dispatch\IRQHAN~1.H

1 #i‡
deföed
(
STM32F0
)

2 
	~<lib›ícmsis/°m32/f0/úqh™dÀrs.h
>

3 #ñi‡
deföed
(
STM32F1
)

4 
	~<lib›ícmsis/°m32/f1/úqh™dÀrs.h
>

5 #ñi‡
deföed
(
STM32F2
)

6 
	~<lib›ícmsis/°m32/f2/úqh™dÀrs.h
>

7 #ñi‡
deföed
(
STM32F3
)

8 
	~<lib›ícmsis/°m32/f3/úqh™dÀrs.h
>

9 #ñi‡
deföed
(
STM32F4
)

10 
	~<lib›ícmsis/°m32/f4/úqh™dÀrs.h
>

11 #ñi‡
deföed
(
STM32L1
)

12 
	~<lib›ícmsis/°m32/l1/úqh™dÀrs.h
>

14 #ñi‡
deföed
(
EFM32TG
)

15 
	~<lib›ícmsis/efm32/efm32tg/úqh™dÀrs.h
>

16 #ñi‡
deföed
(
EFM32G
)

17 
	~<lib›ícmsis/efm32/efm32g/úqh™dÀrs.h
>

18 #ñi‡
deföed
(
EFM32LG
)

19 
	~<lib›ícmsis/efm32/efm32lg/úqh™dÀrs.h
>

20 #ñi‡
deföed
(
EFM32GG
)

21 
	~<lib›ícmsis/efm32/efm32gg/úqh™dÀrs.h
>

23 #ñi‡
deföed
(
LPC13XX
)

24 
	~<lib›ícmsis/Õc13xx/úqh™dÀrs.h
>

25 #ñi‡
deföed
(
LPC17XX
)

26 
	~<lib›ícmsis/Õc17xx/úqh™dÀrs.h
>

27 #ñi‡
deföed
(
LPC43XX_M4
)

28 
	~<lib›ícmsis/Õc43xx/m4/úqh™dÀrs.h
>

29 #ñi‡
deföed
(
LPC43XX_M0
)

30 
	~<lib›ícmsis/Õc43xx/m0/úqh™dÀrs.h
>

32 #ñi‡
deföed
(
SAM3A
)

33 
	~<lib›ícmsis/ßm/3a/úqh™dÀrs.h
>

34 #ñi‡
deföed
(
SAM3N
)

35 
	~<lib›ícmsis/ßm/3n/úqh™dÀrs.h
>

36 #ñi‡
deföed
(
SAM3S
)

37 
	~<lib›ícmsis/ßm/3s/úqh™dÀrs.h
>

38 #ñi‡
deföed
(
SAM3U
)

39 
	~<lib›ícmsis/ßm/3u/úqh™dÀrs.h
>

40 #ñi‡
deföed
(
SAM3X
)

41 
	~<lib›ícmsis/ßm/3x/úqh™dÀrs.h
>

43 #ñi‡
deföed
(
LM3S
Ë|| deföed(
LM4F
)

45 
	~<lib›ícmsis/lm3s/úqh™dÀrs.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~2\stm32\f1\IRQHAN~1.H

9 
	#WWDG_IRQH™dÀr
 
wwdg_i§


	)

10 
	#PVD_IRQH™dÀr
 
pvd_i§


	)

11 
	#TAMPER_IRQH™dÀr
 
èm≥r_i§


	)

12 
	#RTC_IRQH™dÀr
 
πc_i§


	)

13 
	#FLASH_IRQH™dÀr
 
Êash_i§


	)

14 
	#RCC_IRQH™dÀr
 
rcc_i§


	)

15 
	#EXTI0_IRQH™dÀr
 
exti0_i§


	)

16 
	#EXTI1_IRQH™dÀr
 
exti1_i§


	)

17 
	#EXTI2_IRQH™dÀr
 
exti2_i§


	)

18 
	#EXTI3_IRQH™dÀr
 
exti3_i§


	)

19 
	#EXTI4_IRQH™dÀr
 
exti4_i§


	)

20 
	#DMA1_CHANNEL1_IRQH™dÀr
 
dma1_ch™√l1_i§


	)

21 
	#DMA1_CHANNEL2_IRQH™dÀr
 
dma1_ch™√l2_i§


	)

22 
	#DMA1_CHANNEL3_IRQH™dÀr
 
dma1_ch™√l3_i§


	)

23 
	#DMA1_CHANNEL4_IRQH™dÀr
 
dma1_ch™√l4_i§


	)

24 
	#DMA1_CHANNEL5_IRQH™dÀr
 
dma1_ch™√l5_i§


	)

25 
	#DMA1_CHANNEL6_IRQH™dÀr
 
dma1_ch™√l6_i§


	)

26 
	#DMA1_CHANNEL7_IRQH™dÀr
 
dma1_ch™√l7_i§


	)

27 
	#ADC1_2_IRQH™dÀr
 
adc1_2_i§


	)

28 
	#USB_HP_CAN_TX_IRQH™dÀr
 
usb_hp_ˇn_tx_i§


	)

29 
	#USB_LP_CAN_RX0_IRQH™dÀr
 
usb_Õ_ˇn_rx0_i§


	)

30 
	#CAN_RX1_IRQH™dÀr
 
ˇn_rx1_i§


	)

31 
	#CAN_SCE_IRQH™dÀr
 
ˇn_s˚_i§


	)

32 
	#EXTI9_5_IRQH™dÀr
 
exti9_5_i§


	)

33 
	#TIM1_BRK_IRQH™dÀr
 
tim1_brk_i§


	)

34 
	#TIM1_UP_IRQH™dÀr
 
tim1_up_i§


	)

35 
	#TIM1_TRG_COM_IRQH™dÀr
 
tim1_åg_com_i§


	)

36 
	#TIM1_CC_IRQH™dÀr
 
tim1_cc_i§


	)

37 
	#TIM2_IRQH™dÀr
 
tim2_i§


	)

38 
	#TIM3_IRQH™dÀr
 
tim3_i§


	)

39 
	#TIM4_IRQH™dÀr
 
tim4_i§


	)

40 
	#I2C1_EV_IRQH™dÀr
 
i2c1_ev_i§


	)

41 
	#I2C1_ER_IRQH™dÀr
 
i2c1_î_i§


	)

42 
	#I2C2_EV_IRQH™dÀr
 
i2c2_ev_i§


	)

43 
	#I2C2_ER_IRQH™dÀr
 
i2c2_î_i§


	)

44 
	#SPI1_IRQH™dÀr
 
•i1_i§


	)

45 
	#SPI2_IRQH™dÀr
 
•i2_i§


	)

46 
	#USART1_IRQH™dÀr
 
ußπ1_i§


	)

47 
	#USART2_IRQH™dÀr
 
ußπ2_i§


	)

48 
	#USART3_IRQH™dÀr
 
ußπ3_i§


	)

49 
	#EXTI15_10_IRQH™dÀr
 
exti15_10_i§


	)

50 
	#RTC_ALARM_IRQH™dÀr
 
πc_Æ¨m_i§


	)

51 
	#USB_WAKEUP_IRQH™dÀr
 
usb_wakeup_i§


	)

52 
	#TIM8_BRK_IRQH™dÀr
 
tim8_brk_i§


	)

53 
	#TIM8_UP_IRQH™dÀr
 
tim8_up_i§


	)

54 
	#TIM8_TRG_COM_IRQH™dÀr
 
tim8_åg_com_i§


	)

55 
	#TIM8_CC_IRQH™dÀr
 
tim8_cc_i§


	)

56 
	#ADC3_IRQH™dÀr
 
adc3_i§


	)

57 
	#FSMC_IRQH™dÀr
 
fsmc_i§


	)

58 
	#SDIO_IRQH™dÀr
 
sdio_i§


	)

59 
	#TIM5_IRQH™dÀr
 
tim5_i§


	)

60 
	#SPI3_IRQH™dÀr
 
•i3_i§


	)

61 
	#UART4_IRQH™dÀr
 
u¨t4_i§


	)

62 
	#UART5_IRQH™dÀr
 
u¨t5_i§


	)

63 
	#TIM6_IRQH™dÀr
 
tim6_i§


	)

64 
	#TIM7_IRQH™dÀr
 
tim7_i§


	)

65 
	#DMA2_CHANNEL1_IRQH™dÀr
 
dma2_ch™√l1_i§


	)

66 
	#DMA2_CHANNEL2_IRQH™dÀr
 
dma2_ch™√l2_i§


	)

67 
	#DMA2_CHANNEL3_IRQH™dÀr
 
dma2_ch™√l3_i§


	)

68 
	#DMA2_CHANNEL4_5_IRQH™dÀr
 
dma2_ch™√l4_5_i§


	)

69 
	#DMA2_CHANNEL5_IRQH™dÀr
 
dma2_ch™√l5_i§


	)

70 
	#ETH_IRQH™dÀr
 
ëh_i§


	)

71 
	#ETH_WKUP_IRQH™dÀr
 
ëh_wkup_i§


	)

72 
	#CAN2_TX_IRQH™dÀr
 
ˇn2_tx_i§


	)

73 
	#CAN2_RX0_IRQH™dÀr
 
ˇn2_rx0_i§


	)

74 
	#CAN2_RX1_IRQH™dÀr
 
ˇn2_rx1_i§


	)

75 
	#CAN2_SCE_IRQH™dÀr
 
ˇn2_s˚_i§


	)

76 
	#OTG_FS_IRQH™dÀr
 
Ÿg_fs_i§


	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\LIBOPE~1.LD

25 
	$EXTERN
 (
ve˘‹_èbÀ
)

28 
	$ENTRY
(
ª£t_h™dÀr
)

31 
SECTIONS


33 .
ãxt
 : {

34 *(.
ve˘‹s
)

35 *(.
ãxt
*)

36 . = 
	`ALIGN
(4);

37 *(.
rod©a
*)

38 . = 
	`ALIGN
(4);

39 } >
rom


43 .
¥eöô_¨øy
 : {

44 . = 
	`ALIGN
(4);

45 
__¥eöô_¨øy_°¨t
 = .;

46 
	`KEEP
 (*(.
¥eöô_¨øy
))

47 
__¥eöô_¨øy_íd
 = .;

48 } >
rom


49 .
öô_¨øy
 : {

50 . = 
	`ALIGN
(4);

51 
__öô_¨øy_°¨t
 = .;

52 
	`KEEP
 (*(
	`SORT
(.
öô_¨øy
.*)))

53 
	`KEEP
 (*(.
öô_¨øy
))

54 
__öô_¨øy_íd
 = .;

55 } >
rom


56 .
föi_¨øy
 : {

57 . = 
	`ALIGN
(4);

58 
__föi_¨øy_°¨t
 = .;

59 
	`KEEP
 (*(.
föi_¨øy
))

60 
	`KEEP
 (*(
	`SORT
(.
föi_¨øy
.*)))

61 
__föi_¨øy_íd
 = .;

62 } >
rom


68 .
ARM
.
exèb
 : {

69 *(.
ARM
.
exèb
*)

70 } >
rom


71 .
ARM
.
exidx
 : {

72 
__exidx_°¨t
 = .;

73 *(.
ARM
.
exidx
*)

74 
__exidx_íd
 = .;

75 } >
rom


77 . = 
	`ALIGN
(4);

78 
_ëext
 = .;

80 .
d©a
 : {

81 
_d©a
 = .;

82 *(.
d©a
*)

83 . = 
	`ALIGN
(4);

84 
_ed©a
 = .;

85 } >
øm
 
AT
 >
rom


86 
_d©a_lﬂdaddr
 = 
	`LOADADDR
(.
d©a
);

88 .
bss
 : {

89 *(.
bss
*)

90 *(
COMMON
)

91 . = 
	`ALIGN
(4);

92 
_ebss
 = .;

93 } >
øm


99 /
DISCARD
/ : { *(.
eh_‰ame
) }

101 . = 
	`ALIGN
(4);

102 
íd
 = .;

103 
	}
}

105 
PROVIDE
(
_°ack
 = 
ORIGIN
(
øm
Ë+ 
LENGTH
(ram));

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\cm3\assert.c

20 
	~<lib›ícm3/cm3/as£π.h
>

22 
__©åibuã__
((
wók
)Ë
	$cm3_as£π_Áûed
()

25 
	}
}

27 
__©åibuã__
((
wók
)Ë
cm3_as£π_Áûed_vîbo£
(

28 c⁄° *
fûe
 
__©åibuã__
((
unu£d
)),

29 
löe
 
__©åibuã__
((
unu£d
)),

30 c⁄° *
func
 
__©åibuã__
((
unu£d
)),

31 c⁄° *
as£π_ex¥
 
__©åibuã__
((
unu£d
)))

33 
cm3_as£π_Áûed
();

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\cm3\dwt.c

20 
	~<lib›ícm3/cm3/scs.h
>

21 
	~<lib›ícm3/cm3/dwt.h
>

32 
boﬁ
 
	$dwt_íabÀ_cy˛e_cou¡î
()

34 #i‡
	`deföed
(
__ARM_ARCH_6M__
)

35  
Ál£
;

38 #i‡
	`deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

40 
SCS_DEMCR
 |
SCS_DEMCR_TRCENA
;

41 i‡(
DWT_CTRL
 & 
DWT_CTRL_NOCYCCNT
) {

42  
Ál£
;

45 
DWT_CYCCNT
 = 0;

46 
DWT_CTRL
 |
DWT_CTRL_CYCCNTENA
;

47  
åue
;

51  
Ál£
;

52 
	}
}

64 
uöt32_t
 
	$dwt_ªad_cy˛e_cou¡î
()

66 #i‡
	`deföed
(
__ARM_ARCH_6M__
)

70 #i‡
	`deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

71 i‡(
DWT_CTRL
 & 
DWT_CTRL_CYCCNTENA
) {

72  
DWT_CYCCNT
;

77 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\cm3\nvic.c

46 
	~<lib›ícm3/cm3/nvic.h
>

47 
	~<lib›ícm3/cm3/scs.h
>

57 
	$nvic_íabÀ_úq
(
uöt8_t
 
úqn
)

59 
	`NVIC_ISER
(
úqn
 / 32) = (1 << (irqn % 32));

60 
	}
}

70 
	$nvic_dißbÀ_úq
(
uöt8_t
 
úqn
)

72 
	`NVIC_ICER
(
úqn
 / 32) = (1 << (irqn % 32));

73 
	}
}

84 
uöt8_t
 
	$nvic_gë_≥ndög_úq
(
uöt8_t
 
úqn
)

86  
	`NVIC_ISPR
(
úqn
 / 32) & (1 << (irqn % 32)) ? 1 : 0;

87 
	}
}

98 
	$nvic_£t_≥ndög_úq
(
uöt8_t
 
úqn
)

100 
	`NVIC_ISPR
(
úqn
 / 32) = (1 << (irqn % 32));

101 
	}
}

112 
	$nvic_˛ór_≥ndög_úq
(
uöt8_t
 
úqn
)

114 
	`NVIC_ICPR
(
úqn
 / 32) = (1 << (irqn % 32));

115 
	}
}

126 
uöt8_t
 
	$nvic_gë_úq_íabÀd
(
uöt8_t
 
úqn
)

128  
	`NVIC_ISER
(
úqn
 / 32) & (1 << (irqn % 32)) ? 1 : 0;

129 
	}
}

152 
	$nvic_£t_¥i‹ôy
(
uöt8_t
 
úqn
, uöt8_à
¥i‹ôy
)

157 i‡(
úqn
 >
NVIC_IRQ_COUNT
) {

159 
	`SCS_SHPR
((
úqn
 & 0xFË- 4Ë
¥i‹ôy
;

162 
	`NVIC_IPR
(
úqn
Ë
¥i‹ôy
;

164 
	}
}

167 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

177 
uöt8_t
 
	$nvic_gë_a˘ive_úq
(
uöt8_t
 
úqn
)

179  
	`NVIC_IABR
(
úqn
 / 32) & (1 << (irqn % 32)) ? 1 : 0;

180 
	}
}

192 
	$nvic_gíî©e_so·w¨e_öãºu±
(
uöt16_t
 
úqn
)

194 i‡(
úqn
 <= 239) {

195 
NVIC_STIR
 |
úqn
;

197 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\cm3\scb.c

20 
	~<°dlib.h
>

22 
	~<lib›ícm3/cm3/scb.h
>

25 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

26 
	$scb_ª£t_c‹e
()

28 
SCB_AIRCR
 = 
SCB_AIRCR_VECTKEY
 | 
SCB_AIRCR_VECTRESET
;

31 
	}
}

34 
	$scb_ª£t_sy°em
()

36 
SCB_AIRCR
 = 
SCB_AIRCR_VECTKEY
 | 
SCB_AIRCR_SYSRESETREQ
;

39 
	}
}

42 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

43 
	$scb_£t_¥i‹ôy_groupög
(
uöt32_t
 
¥igroup
)

45 
SCB_AIRCR
 = 
SCB_AIRCR_VECTKEY
 | 
¥igroup
;

46 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\cm3\sync.c

20 
	~<lib›ícm3/cm3/sync.h
>

23 
	$__dmb
()

25 
__asm__
 volatile ("dmb");

26 
	}
}

29 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

31 
uöt32_t
 
	$__ldªx
(vﬁ©ûê
uöt32_t
 *
addr
)

33 
uöt32_t
 
ªs
;

34 
__asm__
 vﬁ©ûê("ldªx %0, [%1]" : "Ù" (
ªs
Ë: "r" (
addr
));

35  
ªs
;

36 
	}
}

38 
uöt32_t
 
	$__°ªx
(
uöt32_t
 
vÆ
, vﬁ©ûêuöt32_à*
addr
)

40 
uöt32_t
 
ªs
;

41 
__asm__
 volatile ("strex %0, %2, [%1]"

42 : "=&r" (
ªs
Ë: "r" (
addr
), "r" (
vÆ
));

43  
ªs
;

44 
	}
}

46 
	$muãx_lock
(
muãx_t
 *
m
)

48 !
	`muãx_åylock
(
m
));

49 
	}
}

52 
uöt32_t
 
	$muãx_åylock
(
muãx_t
 *
m
)

54 
uöt32_t
 
°©us
 = 1;

57 i‡(
	`__ldªx
(
m
Ë=
MUTEX_UNLOCKED
) {

59 
°©us
 = 
	`__°ªx
(
MUTEX_LOCKED
, 
m
);

63 
	`__dmb
();

67  
°©us
 == 0;

68 
	}
}

70 
	$muãx_u∆ock
(
muãx_t
 *
m
)

73 
	`__dmb
();

76 *
m
 = 
MUTEX_UNLOCKED
;

77 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\cm3\systick.c

41 
	~<lib›ícm3/cm3/sy°ick.h
>

56 
	$sy°ick_£t_ªlﬂd
(
uöt32_t
 
vÆue
)

58 
STK_RVR
 = (
vÆue
 & 
STK_RVR_RELOAD
);

59 
	}
}

67 
uöt32_t
 
	$sy°ick_gë_ªlﬂd
()

69  
STK_RVR
 & 
STK_RVR_RELOAD
;

70 
	}
}

82 
boﬁ
 
	$sy°ick_£t_‰equícy
(
uöt32_t
 
‰eq
, uöt32_à
ahb
)

84 
uöt32_t
 
øtio
 = 
ahb
 / 
‰eq
;

86 #i‡
	`deföed
(
__ARM_ARCH_6M__
)

87 
	`sy°ick_£t_˛ocksour˚
(
STK_CSR_CLKSOURCE_AHB
);

89 i‡(
øtio
 >(
STK_RVR_RELOAD
 * 8)) {

91  
Ál£
;

92 } i‡(
øtio
 >
STK_RVR_RELOAD
) {

93 
øtio
 /= 8;

94 
	`sy°ick_£t_˛ocksour˚
(
STK_CSR_CLKSOURCE_AHB_DIV8
);

96 
	`sy°ick_£t_˛ocksour˚
(
STK_CSR_CLKSOURCE_AHB
);

99 
	`sy°ick_£t_ªlﬂd
(
øtio
 - 1);

100  
åue
;

101 
	}
}

109 
uöt32_t
 
	$sy°ick_gë_vÆue
()

111  
STK_CVR
 & 
STK_CVR_CURRENT
;

112 
	}
}

122 
	$sy°ick_£t_˛ocksour˚
(
uöt8_t
 
˛ocksour˚
)

124 
STK_CSR
 = (STK_CSR & ~
STK_CSR_CLKSOURCE
) |

125 (
˛ocksour˚
 & 
STK_CSR_CLKSOURCE
);

126 
	}
}

133 
	$sy°ick_öãºu±_íabÀ
()

135 
STK_CSR
 |
STK_CSR_TICKINT
;

136 
	}
}

143 
	$sy°ick_öãºu±_dißbÀ
()

145 
STK_CSR
 &~
STK_CSR_TICKINT
;

146 
	}
}

153 
	$sy°ick_cou¡î_íabÀ
()

155 
STK_CSR
 |
STK_CSR_ENABLE
;

156 
	}
}

163 
	$sy°ick_cou¡î_dißbÀ
()

165 
STK_CSR
 &~
STK_CSR_ENABLE
;

166 
	}
}

177 
uöt8_t
 
	$sy°ick_gë_cou¡Êag
()

179  (
STK_CSR
 & 
STK_CSR_COUNTFLAG
) ? 1 : 0;

180 
	}
}

188 
	$sy°ick_˛ór
()

190 
STK_CVR
 = 0;

191 
	}
}

198 
uöt32_t
 
	$sy°ick_gë_ˇlib
()

200  
STK_CALIB
 & 
STK_CALIB_TENMS
;

201 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\cm3\vector.c

21 
	~<lib›ícm3/cm3/scb.h
>

22 
	~<lib›ícm3/cm3/ve˘‹.h
>

25 
	~"../di•©ch/ve˘‹_chù£t.c
"

27 
	~"../di•©ch/ve˘‹_nvic.c
"

30 
_d©a_lﬂdaddr
, 
_d©a
, 
_ed©a
, 
_ebss
, 
_°ack
;

31 (*
	tfun˝_t
) ();

32 
fun˝_t
 
__¥eöô_¨øy_°¨t
, 
__¥eöô_¨øy_íd
;

33 
fun˝_t
 
__öô_¨øy_°¨t
, 
__öô_¨øy_íd
;

34 
fun˝_t
 
__föi_¨øy_°¨t
, 
__föi_¨øy_íd
;

36 
	`maö
();

37 
	`blockög_h™dÀr
();

38 
	`nuŒ_h™dÀr
();

40 
	`__©åibuã__
 ((
	`£˘i⁄
(".vectors")))

41 
ve˘‹_èbÀ_t
 
ve˘‹_èbÀ
 = {

42 .
öôül_•_vÆue
 = &
_°ack
,

43 .
ª£t
 = 
ª£t_h™dÀr
,

44 .
nmi
 = 
nmi_h™dÀr
,

45 .
h¨d_Áu…
 = 
h¨d_Áu…_h™dÀr
,

48 #i‡
	`deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

49 .
mem‹y_m™age_Áu…
 = 
mem_m™age_h™dÀr
,

50 .
bus_Áu…
 = 
bus_Áu…_h™dÀr
,

51 .
ußge_Áu…
 = 
ußge_Áu…_h™dÀr
,

52 .
debug_m⁄ô‹
 = 
debug_m⁄ô‹_h™dÀr
,

55 .
sv_ˇŒ
 = 
sv_ˇŒ_h™dÀr
,

56 .
≥nd_sv
 = 
≥nd_sv_h™dÀr
,

57 .
sy°ick
 = 
sys_tick_h™dÀr
,

58 .
úq
 = {

59 
IRQ_HANDLERS


61 
	}
};

63 
__©åibuã__
 ((
wók
, 
«ked
)Ë
	$ª£t_h™dÀr
()

65 vﬁ©ûê*
§c
, *
de°
;

66 
fun˝_t
 *
Â
;

68 
§c
 = &
_d©a_lﬂdaddr
, 
de°
 = &
_d©a
;

69 
de°
 < &
_ed©a
;

70 
§c
++, 
de°
++) {

71 *
de°
 = *
§c
;

74 
de°
 < &
_ebss
) {

75 *
de°
++ = 0;

80 
SCB_CCR
 |
SCB_CCR_STKALIGN
;

83 
	`¥e_maö
();

86 
Â
 = &
__¥eöô_¨øy_°¨t
; f∞< &
__¥eöô_¨øy_íd
; fp++) {

87 (*
Â
)();

89 
Â
 = &
__öô_¨øy_°¨t
; f∞< &
__öô_¨øy_íd
; fp++) {

90 (*
Â
)();

94 
	`maö
();

97 
Â
 = &
__föi_¨øy_°¨t
; f∞< &
__föi_¨øy_íd
; fp++) {

98 (*
Â
)();

101 
	}
}

103 
	$blockög_h™dÀr
()

106 
	}
}

108 
	$nuŒ_h™dÀr
()

111 
	}
}

113 #¥agm®
wók
 
nmi_h™dÀr
 = 
nuŒ_h™dÀr


114 #¥agm®
wók
 
h¨d_Áu…_h™dÀr
 = 
blockög_h™dÀr


115 #¥agm®
wók
 
sv_ˇŒ_h™dÀr
 = 
nuŒ_h™dÀr


116 #¥agm®
wók
 
≥nd_sv_h™dÀr
 = 
nuŒ_h™dÀr


117 #¥agm®
wók
 
sys_tick_h™dÀr
 = 
nuŒ_h™dÀr


120 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

121 #¥agm®
wók
 
mem_m™age_h™dÀr
 = 
blockög_h™dÀr


122 #¥agm®
wók
 
bus_Áu…_h™dÀr
 = 
blockög_h™dÀr


123 #¥agm®
wók
 
ußge_Áu…_h™dÀr
 = 
blockög_h™dÀr


124 #¥agm®
wók
 
debug_m⁄ô‹_h™dÀr
 = 
nuŒ_h™dÀr


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\dispatch\VECTOR~1.C

1 #i‡
deföed
(
STM32F3
)

2 
	~"../°m32/f3/ve˘‹_chù£t.c
"

3 #ñi‡
deföed
(
STM32F4
)

4 
	~"../°m32/f4/ve˘‹_chù£t.c
"

5 #ñi‡
deföed
(
STM32F7
)

6 
	~"../°m32/f7/ve˘‹_chù£t.c
"

7 #ñi‡
deföed
(
STM32L4
)

8 
	~"../°m32/l4/ve˘‹_chù£t.c
"

9 #ñi‡
deföed
(
LPC43XX_M4
)

10 
	~"../Õc43xx/m4/ve˘‹_chù£t.c
"

11 #ñi‡
deföed
(
VF6XX
)

12 
	~"../vf6xx/ve˘‹_chù£t.c
"

16 
__©åibuã__
 ((
unu£d
)Ë
	$¥e_maö
(Ë{
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\dispatch\VECTOR~2.C

1 #i‡
deföed
(
STM32F0
)

2 
	~"../°m32/f0/ve˘‹_nvic.c
"

3 #ñi‡
deföed
(
STM32F1
)

4 
	~"../°m32/f1/ve˘‹_nvic.c
"

5 #ñi‡
deföed
(
STM32F2
)

6 
	~"../°m32/f2/ve˘‹_nvic.c
"

7 #ñi‡
deföed
(
STM32F3
)

8 
	~"../°m32/f3/ve˘‹_nvic.c
"

9 #ñi‡
deföed
(
STM32F4
)

10 
	~"../°m32/f4/ve˘‹_nvic.c
"

11 #ñi‡
deföed
(
STM32F7
)

12 
	~"../°m32/f7/ve˘‹_nvic.c
"

13 #ñi‡
deföed
(
STM32L0
)

14 
	~"../°m32/l0/ve˘‹_nvic.c
"

15 #ñi‡
deföed
(
STM32L1
)

16 
	~"../°m32/l1/ve˘‹_nvic.c
"

17 #ñi‡
deföed
(
STM32L4
)

18 
	~"../°m32/l4/ve˘‹_nvic.c
"

20 #ñi‡
deföed
(
EFM32TG
)

21 
	~"../efm32/tg/ve˘‹_nvic.c
"

22 #ñi‡
deföed
(
EFM32G
)

23 
	~"../efm32/g/ve˘‹_nvic.c
"

24 #ñi‡
deföed
(
EFM32LG
)

25 
	~"../efm32/lg/ve˘‹_nvic.c
"

26 #ñi‡
deföed
(
EFM32GG
)

27 
	~"../efm32/gg/ve˘‹_nvic.c
"

29 #ñi‡
deföed
(
LPC13XX
)

30 
	~"../Õc13xx/ve˘‹_nvic.c
"

31 #ñi‡
deföed
(
LPC17XX
)

32 
	~"../Õc17xx/ve˘‹_nvic.c
"

33 #ñi‡
deföed
(
LPC43XX_M4
)

34 
	~"../Õc43xx/m4/ve˘‹_nvic.c
"

35 #ñi‡
deföed
(
LPC43XX_M0
)

36 
	~"../Õc43xx/m0/ve˘‹_nvic.c
"

38 #ñi‡
deföed
(
SAM3A
)

39 
	~"../ßm/3a/ve˘‹_nvic.c
"

40 #ñi‡
deföed
(
SAM3N
)

41 
	~"../ßm/3n/ve˘‹_nvic.c
"

42 #ñi‡
deföed
(
SAM3S
)

43 
	~"../ßm/3s/ve˘‹_nvic.c
"

44 #ñi‡
deföed
(
SAM3U
)

45 
	~"../ßm/3u/ve˘‹_nvic.c
"

46 #ñi‡
deföed
(
SAM3X
)

47 
	~"../ßm/3x/ve˘‹_nvic.c
"

49 #ñi‡
deföed
(
VF6XX
)

50 
	~"../vf6xx/ve˘‹_nvic.c
"

52 #ñi‡
deföed
(
LM3S
Ë|| deföed(
LM4F
)

54 
	~"../lm3s/ve˘‹_nvic.c
"

60 
	#IRQ_HANDLERS


	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\ST_USB~1.C

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/rcc.h
>

22 
	~<lib›ícm3/°m32/toﬁs.h
>

23 
	~<lib›ícm3/°m32/°_usbfs.h
>

24 
	~<lib›ícm3/usb/usbd.h
>

25 
	~"../usb/usb_¥iv©e.h
"

26 
	~"comm⁄/°_usbfs_c‹e.h
"

28 
usbd_devi˚
 *
°_usbfs_v1_usbd_öô
();

30 c⁄° 
_usbd_drivî
 
	g°_usbfs_v1_usb_drivî
 = {

31 .
öô
 = 
°_usbfs_v1_usbd_öô
,

32 .
	g£t_addªss
 = 
°_usbfs_£t_addªss
,

33 .
	gï_£tup
 = 
°_usbfs_ï_£tup
,

34 .
	gï_ª£t
 = 
°_usbfs_ídpoöts_ª£t
,

35 .
	gï_°Æl_£t
 = 
°_usbfs_ï_°Æl_£t
,

36 .
	gï_°Æl_gë
 = 
°_usbfs_ï_°Æl_gë
,

37 .
	gï_«k_£t
 = 
°_usbfs_ï_«k_£t
,

38 .
	gï_wrôe_∑ckë
 = 
°_usbfs_ï_wrôe_∑ckë
,

39 .
	gï_ªad_∑ckë
 = 
°_usbfs_ï_ªad_∑ckë
,

40 .
	gpﬁl
 = 
°_usbfs_pﬁl
,

44 
usbd_devi˚
 *
	$°_usbfs_v1_usbd_öô
()

46 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_USB
);

47 
	`SET_REG
(
USB_CNTR_REG
, 0);

48 
	`SET_REG
(
USB_BTABLE_REG
, 0);

49 
	`SET_REG
(
USB_ISTR_REG
, 0);

52 
	`SET_REG
(
USB_CNTR_REG
, 
USB_CNTR_RESETM
 | 
USB_CNTR_CTRM
 |

53 
USB_CNTR_SUSPM
 | 
USB_CNTR_WKUPM
);

54  &
°_usbfs_dev
;

55 
	}
}

57 
	$°_usbfs_c›y_to_pm
(vﬁ©ûê*
vPM
, c⁄° *
buf
, 
uöt16_t
 
Àn
)

59 c⁄° 
uöt16_t
 *
lbuf
 = 
buf
;

60 vﬁ©ûê
uöt32_t
 *
PM
 = 
vPM
;

61 
Àn
 = (len + 1) >> 1;Üen;Üen--) {

62 *
PM
++ = *
lbuf
++;

64 
	}
}

73 
	$°_usbfs_c›y_‰om_pm
(*
buf
, c⁄° vﬁ©ûê*
vPM
, 
uöt16_t
 
Àn
)

75 
uöt16_t
 *
lbuf
 = 
buf
;

76 c⁄° vﬁ©ûê
uöt16_t
 *
PM
 = 
vPM
;

77 
uöt8_t
 
odd
 = 
Àn
 & 1;

79 
Àn
 >>1;Üí; 
PM
 +2, 
lbuf
++,Üen--) {

80 *
lbuf
 = *
PM
;

83 i‡(
odd
) {

84 *(
uöt8_t
 *Ë
lbuf
 = *(uöt8_à*Ë
PM
;

86 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\can.c

38 
	~<lib›ícm3/°m32/ˇn.h
>

40 #i‡
deföed
(
STM32F1
)

41 
	~<lib›ícm3/°m32/f1/rcc.h
>

42 #ñi‡
deföed
(
STM32F2
)

43 
	~<lib›ícm3/°m32/f2/rcc.h
>

44 #ñi‡
deföed
(
STM32F4
)

45 
	~<lib›ícm3/°m32/f4/rcc.h
>

60 
	#CAN_MSR_INAK_TIMEOUT
 0x0000FFFF

	)

72 
	$ˇn_ª£t
(
uöt32_t
 
ˇ≈‹t
)

74 i‡(
ˇ≈‹t
 =
CAN1
) {

75 
	`rcc_≥rùhîÆ_ª£t
(&
RCC_APB1RSTR
, 
RCC_APB1RSTR_CAN1RST
);

76 
	`rcc_≥rùhîÆ_˛ór_ª£t
(&
RCC_APB1RSTR
, 
RCC_APB1RSTR_CAN1RST
);

78 
	`rcc_≥rùhîÆ_ª£t
(&
RCC_APB1RSTR
, 
RCC_APB1RSTR_CAN2RST
);

79 
	`rcc_≥rùhîÆ_˛ór_ª£t
(&
RCC_APB1RSTR
, 
RCC_APB1RSTR_CAN2RST
);

81 
	}
}

101 
	$ˇn_öô
(
uöt32_t
 
ˇ≈‹t
, 
boﬁ
 
âcm
, boﬁ 
abom
, boﬁ 
awum
, boﬁ 
«π
,

102 
boﬁ
 
rÊm
, boﬁ 
txÂ
, 
uöt32_t
 
sjw
, uöt32_à
ts1
, uöt32_à
ts2
,

103 
uöt32_t
 
bΩ
, 
boﬁ
 
lo›back
, boﬁ 
sûít
)

105 vﬁ©ûê
uöt32_t
 
waô_ack
;

106 
ªt
 = 0;

109 
	`CAN_MCR
(
ˇ≈‹t
Ë&~
CAN_MCR_SLEEP
;

112 
	`CAN_MCR
(
ˇ≈‹t
Ë|
CAN_MCR_INRQ
;

115 
waô_ack
 = 
CAN_MSR_INAK_TIMEOUT
;

116 (--
waô_ack
) &&

117 ((
	`CAN_MSR
(
ˇ≈‹t
Ë& 
CAN_MSR_INAK
) != CAN_MSR_INAK));

120 i‡((
	`CAN_MSR
(
ˇ≈‹t
Ë& 
CAN_MSR_INAK
) != CAN_MSR_INAK) {

125 
	`CAN_BTR
(
ˇ≈‹t
) = 0;

128 i‡(
âcm
) {

129 
	`CAN_MCR
(
ˇ≈‹t
Ë|
CAN_MCR_TTCM
;

131 
	`CAN_MCR
(
ˇ≈‹t
Ë&~
CAN_MCR_TTCM
;

134 i‡(
abom
) {

135 
	`CAN_MCR
(
ˇ≈‹t
Ë|
CAN_MCR_ABOM
;

137 
	`CAN_MCR
(
ˇ≈‹t
Ë&~
CAN_MCR_ABOM
;

140 i‡(
awum
) {

141 
	`CAN_MCR
(
ˇ≈‹t
Ë|
CAN_MCR_AWUM
;

143 
	`CAN_MCR
(
ˇ≈‹t
Ë&~
CAN_MCR_AWUM
;

146 i‡(
«π
) {

147 
	`CAN_MCR
(
ˇ≈‹t
Ë|
CAN_MCR_NART
;

149 
	`CAN_MCR
(
ˇ≈‹t
Ë&~
CAN_MCR_NART
;

152 i‡(
rÊm
) {

153 
	`CAN_MCR
(
ˇ≈‹t
Ë|
CAN_MCR_RFLM
;

155 
	`CAN_MCR
(
ˇ≈‹t
Ë&~
CAN_MCR_RFLM
;

158 i‡(
txÂ
) {

159 
	`CAN_MCR
(
ˇ≈‹t
Ë|
CAN_MCR_TXFP
;

161 
	`CAN_MCR
(
ˇ≈‹t
Ë&~
CAN_MCR_TXFP
;

164 i‡(
sûít
) {

165 
	`CAN_BTR
(
ˇ≈‹t
Ë|
CAN_BTR_SILM
;

167 
	`CAN_BTR
(
ˇ≈‹t
Ë&~
CAN_BTR_SILM
;

170 i‡(
lo›back
) {

171 
	`CAN_BTR
(
ˇ≈‹t
Ë|
CAN_BTR_LBKM
;

173 
	`CAN_BTR
(
ˇ≈‹t
Ë&~
CAN_BTR_LBKM
;

177 
	`CAN_BTR
(
ˇ≈‹t
Ë|
sjw
 | 
ts2
 | 
ts1
 |

178 ((
bΩ
 - 1ulË& 
CAN_BTR_BRP_MASK
);

181 
	`CAN_MCR
(
ˇ≈‹t
Ë&~
CAN_MCR_INRQ
;

184 
waô_ack
 = 
CAN_MSR_INAK_TIMEOUT
;

185 (--
waô_ack
) &&

186 ((
	`CAN_MSR
(
ˇ≈‹t
Ë& 
CAN_MSR_INAK
) == CAN_MSR_INAK));

188 i‡((
	`CAN_MSR
(
ˇ≈‹t
Ë& 
CAN_MSR_INAK
) == CAN_MSR_INAK) {

189 
ªt
 = 1;

192  
ªt
;

193 
	}
}

209 
	$ˇn_fûãr_öô
(
uöt32_t
 
ˇ≈‹t
, uöt32_à
ƒ
, 
boﬁ
 
sˇÀ_32bô
,

210 
boﬁ
 
id_li°_mode
, 
uöt32_t
 
‰1
, uöt32_à
‰2
,

211 
uöt32_t
 
fifo
, 
boﬁ
 
íabÀ
)

213 
uöt32_t
 
fûãr_£À˘_bô
 = 0x00000001 << 
ƒ
;

216 
	`CAN_FMR
(
ˇ≈‹t
Ë|
CAN_FMR_FINIT
;

219 
	`CAN_FA1R
(
ˇ≈‹t
Ë&~
fûãr_£À˘_bô
;

221 i‡(
sˇÀ_32bô
) {

223 
	`CAN_FS1R
(
ˇ≈‹t
Ë|
fûãr_£À˘_bô
;

226 
	`CAN_FS1R
(
ˇ≈‹t
Ë&~
fûãr_£À˘_bô
;

229 i‡(
id_li°_mode
) {

231 
	`CAN_FM1R
(
ˇ≈‹t
Ë|
fûãr_£À˘_bô
;

234 
	`CAN_FM1R
(
ˇ≈‹t
Ë&~
fûãr_£À˘_bô
;

238 
	`CAN_FiR1
(
ˇ≈‹t
, 
ƒ
Ë
‰1
;

241 
	`CAN_FiR2
(
ˇ≈‹t
, 
ƒ
Ë
‰2
;

244 i‡(
fifo
) {

245 
	`CAN_FFA1R
(
ˇ≈‹t
Ë|
fûãr_£À˘_bô
;

247 
	`CAN_FFA1R
(
ˇ≈‹t
Ë&~
fûãr_£À˘_bô
;

250 i‡(
íabÀ
) {

251 
	`CAN_FA1R
(
ˇ≈‹t
Ë|
fûãr_£À˘_bô
;

255 
	`CAN_FMR
(
ˇ≈‹t
Ë&~
CAN_FMR_FINIT
;

256 
	}
}

270 
	$ˇn_fûãr_id_mask_16bô_öô
(
uöt32_t
 
ˇ≈‹t
, uöt32_à
ƒ
, 
uöt16_t
 
id1
,

271 
uöt16_t
 
mask1
, uöt16_à
id2
,

272 
uöt16_t
 
mask2
, 
uöt32_t
 
fifo
, 
boﬁ
 
íabÀ
)

274 
	`ˇn_fûãr_öô
(
ˇ≈‹t
, 
ƒ
, 
Ál£
, false,

275 ((
uöt32_t
)
id1
 << 16Ë| (uöt32_t)
mask1
,

276 ((
uöt32_t
)
id2
 << 16Ë| (uöt32_t)
mask2
, 
fifo
, 
íabÀ
);

277 
	}
}

289 
	$ˇn_fûãr_id_mask_32bô_öô
(
uöt32_t
 
ˇ≈‹t
, uöt32_à
ƒ
, uöt32_à
id
,

290 
uöt32_t
 
mask
, uöt32_à
fifo
, 
boﬁ
 
íabÀ
)

292 
	`ˇn_fûãr_öô
(
ˇ≈‹t
, 
ƒ
, 
åue
, 
Ál£
, 
id
, 
mask
, 
fifo
, 
íabÀ
);

293 
	}
}

307 
	$ˇn_fûãr_id_li°_16bô_öô
(
uöt32_t
 
ˇ≈‹t
, uöt32_à
ƒ
,

308 
uöt16_t
 
id1
, uöt16_à
id2
,

309 
uöt16_t
 
id3
, uöt16_à
id4
,

310 
uöt32_t
 
fifo
, 
boﬁ
 
íabÀ
)

312 
	`ˇn_fûãr_öô
(
ˇ≈‹t
, 
ƒ
, 
Ál£
, 
åue
,

313 ((
uöt32_t
)
id1
 << 16Ë| (uöt32_t)
id2
,

314 ((
uöt32_t
)
id3
 << 16Ë| (uöt32_t)
id4
, 
fifo
, 
íabÀ
);

315 
	}
}

327 
	$ˇn_fûãr_id_li°_32bô_öô
(
uöt32_t
 
ˇ≈‹t
, uöt32_à
ƒ
,

328 
uöt32_t
 
id1
, uöt32_à
id2
,

329 
uöt32_t
 
fifo
, 
boﬁ
 
íabÀ
)

331 
	`ˇn_fûãr_öô
(
ˇ≈‹t
, 
ƒ
, 
åue
,Årue, 
id1
, 
id2
, 
fifo
, 
íabÀ
);

332 
	}
}

340 
	$ˇn_íabÀ_úq
(
uöt32_t
 
ˇ≈‹t
, uöt32_à
úq
)

342 
	`CAN_IER
(
ˇ≈‹t
Ë|
úq
;

343 
	}
}

351 
	$ˇn_dißbÀ_úq
(
uöt32_t
 
ˇ≈‹t
, uöt32_à
úq
)

353 
	`CAN_IER
(
ˇ≈‹t
Ë&~
úq
;

354 
	}
}

368 
	$ˇn_å™smô
(
uöt32_t
 
ˇ≈‹t
, uöt32_à
id
, 
boﬁ
 
ext
, boﬁ 
πr
,

369 
uöt8_t
 
Àngth
, uöt8_à*
d©a
)

371 
ªt
 = 0;

372 
uöt32_t
 
maûbox
 = 0;

374 
uöt8_t
 
d©a8
[4];

375 
uöt32_t
 
d©a32
;

376 } 
tdlxr
, 
tdhxr
;

379 i‡((
	`CAN_TSR
(
ˇ≈‹t
Ë& 
CAN_TSR_TME0
) == CAN_TSR_TME0) {

380 
ªt
 = 0;

381 
maûbox
 = 
CAN_MBOX0
;

382 } i‡((
	`CAN_TSR
(
ˇ≈‹t
Ë& 
CAN_TSR_TME1
) == CAN_TSR_TME1) {

383 
ªt
 = 1;

384 
maûbox
 = 
CAN_MBOX1
;

385 } i‡((
	`CAN_TSR
(
ˇ≈‹t
Ë& 
CAN_TSR_TME2
) == CAN_TSR_TME2) {

386 
ªt
 = 2;

387 
maûbox
 = 
CAN_MBOX2
;

389 
ªt
 = -1;

393 i‡(
ªt
 == -1) {

394  
ªt
;

397 i‡(
ext
) {

399 
	`CAN_TIxR
(
ˇ≈‹t
, 
maûbox
Ë(
id
 << 
CAN_TIxR_EXID_SHIFT
) |

400 
CAN_TIxR_IDE
;

403 
	`CAN_TIxR
(
ˇ≈‹t
, 
maûbox
Ë
id
 << 
CAN_TIxR_STID_SHIFT
;

407 i‡(
πr
) {

408 
	`CAN_TIxR
(
ˇ≈‹t
, 
maûbox
Ë|
CAN_TIxR_RTR
;

412 
	`CAN_TDTxR
(
ˇ≈‹t
, 
maûbox
Ë&~
CAN_TDTxR_DLC_MASK
;

413 
	`CAN_TDTxR
(
ˇ≈‹t
, 
maûbox
Ë|(
Àngth
 & 
CAN_TDTxR_DLC_MASK
);

415 
Àngth
) {

417 
tdhxr
.
d©a8
[3] = 
d©a
[7];

420 
tdhxr
.
d©a8
[2] = 
d©a
[6];

423 
tdhxr
.
d©a8
[1] = 
d©a
[5];

426 
tdhxr
.
d©a8
[0] = 
d©a
[4];

429 
tdlxr
.
d©a8
[3] = 
d©a
[3];

432 
tdlxr
.
d©a8
[2] = 
d©a
[2];

435 
tdlxr
.
d©a8
[1] = 
d©a
[1];

438 
tdlxr
.
d©a8
[0] = 
d©a
[0];

445 
	`CAN_TDLxR
(
ˇ≈‹t
, 
maûbox
Ë
tdlxr
.
d©a32
;

446 
	`CAN_TDHxR
(
ˇ≈‹t
, 
maûbox
Ë
tdhxr
.
d©a32
;

449 
	`CAN_TIxR
(
ˇ≈‹t
, 
maûbox
Ë|
CAN_TIxR_TXRQ
;

451  
ªt
;

452 
	}
}

460 
	$ˇn_fifo_ªÀa£
(
uöt32_t
 
ˇ≈‹t
, 
uöt8_t
 
fifo
)

462 i‡(
fifo
 == 0) {

463 
	`CAN_RF0R
(
ˇ≈‹t
Ë|
CAN_RF1R_RFOM1
;

465 
	`CAN_RF1R
(
ˇ≈‹t
Ë|
CAN_RF1R_RFOM1
;

467 
	}
}

482 
	$ˇn_ª˚ive
(
uöt32_t
 
ˇ≈‹t
, 
uöt8_t
 
fifo
, 
boﬁ
 
ªÀa£
, uöt32_à*
id
,

483 
boﬁ
 *
ext
, boﬁ *
πr
, 
uöt32_t
 *
fmi
, 
uöt8_t
 *
Àngth
,

484 
uöt8_t
 *
d©a
)

486 
uöt32_t
 
fifo_id
 = 0;

488 
uöt8_t
 
d©a8
[4];

489 
uöt32_t
 
d©a32
;

490 } 
rdlxr
, 
rdhxr
;

491 c⁄° 
uöt32_t
 
fifoid_¨øy
[2] = {
CAN_FIFO0
, 
CAN_FIFO1
};

493 
fifo_id
 = 
fifoid_¨øy
[
fifo
];

496 i‡(
	`CAN_RIxR
(
ˇ≈‹t
, 
fifo_id
Ë& 
CAN_RIxR_IDE
) {

497 *
ext
 = 
åue
;

499 *
id
 = (
	`CAN_RIxR
(
ˇ≈‹t
, 
fifo_id
Ë>> 
CAN_RIxR_EXID_SHIFT
) &

500 
CAN_RIxR_EXID_MASK
;

502 *
ext
 = 
Ál£
;

504 *
id
 = (
	`CAN_RIxR
(
ˇ≈‹t
, 
fifo_id
Ë>> 
CAN_RIxR_STID_SHIFT
) &

505 
CAN_RIxR_STID_MASK
;

509 i‡(
	`CAN_RIxR
(
ˇ≈‹t
, 
fifo_id
Ë& 
CAN_RIxR_RTR
) {

510 *
πr
 = 
åue
;

512 *
πr
 = 
Ál£
;

516 *
fmi
 = ((
	`CAN_RDTxR
(
ˇ≈‹t
, 
fifo_id
Ë& 
CAN_RDTxR_FMI_MASK
) >>

517 
CAN_RDTxR_FMI_SHIFT
);

520 *
Àngth
 = 
	`CAN_RDTxR
(
ˇ≈‹t
, 
fifo_id
Ë& 
CAN_RDTxR_DLC_MASK
;

525 
rdlxr
.
d©a32
 = 
	`CAN_RDLxR
(
ˇ≈‹t
, 
fifo_id
);

526 
rdhxr
.
d©a32
 = 
	`CAN_RDHxR
(
ˇ≈‹t
, 
fifo_id
);

539 
d©a
[0] = 
rdlxr
.
d©a8
[0];

540 
d©a
[1] = 
rdlxr
.
d©a8
[1];

541 
d©a
[2] = 
rdlxr
.
d©a8
[2];

542 
d©a
[3] = 
rdlxr
.
d©a8
[3];

543 
d©a
[4] = 
rdhxr
.
d©a8
[0];

544 
d©a
[5] = 
rdhxr
.
d©a8
[1];

545 
d©a
[6] = 
rdhxr
.
d©a8
[2];

546 
d©a
[7] = 
rdhxr
.
d©a8
[3];

549 i‡(
ªÀa£
) {

550 
	`ˇn_fifo_ªÀa£
(
ˇ≈‹t
, 
fifo
);

552 
	}
}

554 
boﬁ
 
	$ˇn_avaûabÀ_maûbox
(
uöt32_t
 
ˇ≈‹t
)

556  
	`CAN_TSR
(
ˇ≈‹t
Ë& (
CAN_TSR_TME0
 | 
CAN_TSR_TME1
 | 
CAN_TSR_TME2
);

557 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\ADC_CO~1.C

96 
	~<lib›ícm3/°m32/adc.h
>

107 
	$adc_powî_off
(
uöt32_t
 
adc
)

109 
	`ADC_CR2
(
adc
Ë&~
ADC_CR2_ADON
;

110 
	}
}

123 
	$adc_íabÀ_™Æog_w©chdog_ªguœr
(
uöt32_t
 
adc
)

125 
	`ADC_CR1
(
adc
Ë|
ADC_CR1_AWDEN
;

126 
	}
}

135 
	$adc_dißbÀ_™Æog_w©chdog_ªguœr
(
uöt32_t
 
adc
)

137 
	`ADC_CR1
(
adc
Ë&~
ADC_CR1_AWDEN
;

138 
	}
}

150 
	$adc_íabÀ_™Æog_w©chdog_öje˘ed
(
uöt32_t
 
adc
)

152 
	`ADC_CR1
(
adc
Ë|
ADC_CR1_JAWDEN
;

153 
	}
}

161 
	$adc_dißbÀ_™Æog_w©chdog_öje˘ed
(
uöt32_t
 
adc
)

163 
	`ADC_CR1
(
adc
Ë&~
ADC_CR1_JAWDEN
;

164 
	}
}

182 
	$adc_íabÀ_disc⁄töuous_mode_ªguœr
(
uöt32_t
 
adc
, 
uöt8_t
 
Àngth
)

184 i‡((
Àngth
-1) > 7) {

187 
	`ADC_CR1
(
adc
Ë|
ADC_CR1_DISCEN
;

188 
	`ADC_CR1
(
adc
Ë|((
Àngth
-1Ë<< 
ADC_CR1_DISCNUM_SHIFT
);

189 
	}
}

197 
	$adc_dißbÀ_disc⁄töuous_mode_ªguœr
(
uöt32_t
 
adc
)

199 
	`ADC_CR1
(
adc
Ë&~
ADC_CR1_DISCEN
;

200 
	}
}

212 
	$adc_íabÀ_disc⁄töuous_mode_öje˘ed
(
uöt32_t
 
adc
)

214 
	`ADC_CR1
(
adc
Ë|
ADC_CR1_JDISCEN
;

215 
	}
}

223 
	$adc_dißbÀ_disc⁄töuous_mode_öje˘ed
(
uöt32_t
 
adc
)

225 
	`ADC_CR1
(
adc
Ë&~
ADC_CR1_JDISCEN
;

226 
	}
}

239 
	$adc_íabÀ_autom©ic_öje˘ed_group_c⁄vîsi⁄
(
uöt32_t
 
adc
)

241 
	`adc_dißbÀ_exã∫Æ_åiggî_öje˘ed
(
adc
);

242 
	`ADC_CR1
(
adc
Ë|
ADC_CR1_JAUTO
;

243 
	}
}

251 
	$adc_dißbÀ_autom©ic_öje˘ed_group_c⁄vîsi⁄
(
uöt32_t
 
adc
)

253 
	`ADC_CR1
(
adc
Ë&~
ADC_CR1_JAUTO
;

254 
	}
}

272 
	$adc_íabÀ_™Æog_w©chdog_⁄_Æl_ch™√ls
(
uöt32_t
 
adc
)

274 
	`ADC_CR1
(
adc
Ë&~
ADC_CR1_AWDSGL
;

275 
	}
}

294 
	$adc_íabÀ_™Æog_w©chdog_⁄_£À˘ed_ch™√l
(
uöt32_t
 
adc
,

295 
uöt8_t
 
ch™√l
)

297 
uöt32_t
 
ªg32
;

299 
ªg32
 = (
	`ADC_CR1
(
adc
Ë& ~
ADC_CR1_AWDCH_MASK
);

300 i‡(
ch™√l
 <
ADC_CR1_AWDCH_MAX
) {

301 
ªg32
 |
ch™√l
;

303 
	`ADC_CR1
(
adc
Ë
ªg32
;

304 
	`ADC_CR1
(
adc
Ë|
ADC_CR1_AWDSGL
;

305 
	}
}

317 
	$adc_íabÀ_sˇn_mode
(
uöt32_t
 
adc
)

319 
	`ADC_CR1
(
adc
Ë|
ADC_CR1_SCAN
;

320 
	}
}

328 
	$adc_dißbÀ_sˇn_mode
(
uöt32_t
 
adc
)

330 
	`ADC_CR1
(
adc
Ë&~
ADC_CR1_SCAN
;

331 
	}
}

339 
	$adc_íabÀ_eoc_öãºu±_öje˘ed
(
uöt32_t
 
adc
)

341 
	`ADC_CR1
(
adc
Ë|
ADC_CR1_JEOCIE
;

342 
	}
}

350 
	$adc_dißbÀ_eoc_öãºu±_öje˘ed
(
uöt32_t
 
adc
)

352 
	`ADC_CR1
(
adc
Ë&~
ADC_CR1_JEOCIE
;

353 
	}
}

361 
	$adc_íabÀ_awd_öãºu±
(
uöt32_t
 
adc
)

363 
	`ADC_CR1
(
adc
Ë|
ADC_CR1_AWDIE
;

364 
	}
}

372 
	$adc_dißbÀ_awd_öãºu±
(
uöt32_t
 
adc
)

374 
	`ADC_CR1
(
adc
Ë&~
ADC_CR1_AWDIE
;

375 
	}
}

384 
	$adc_íabÀ_eoc_öãºu±
(
uöt32_t
 
adc
)

386 
	`ADC_CR1
(
adc
Ë|
ADC_CR1_EOCIE
;

387 
	}
}

395 
	$adc_dißbÀ_eoc_öãºu±
(
uöt32_t
 
adc
)

397 
	`ADC_CR1
(
adc
Ë&~
ADC_CR1_EOCIE
;

398 
	}
}

408 
	$adc_£t_À·_Æig√d
(
uöt32_t
 
adc
)

410 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_ALIGN
;

411 
	}
}

420 
	$adc_£t_right_Æig√d
(
uöt32_t
 
adc
)

422 
	`ADC_CR2
(
adc
Ë&~
ADC_CR2_ALIGN
;

423 
	}
}

435 
boﬁ
 
	$adc_eoc
(
uöt32_t
 
adc
)

437  (
	`ADC_SR
(
adc
Ë& 
ADC_SR_EOC
) != 0;

438 
	}
}

449 
boﬁ
 
	$adc_eoc_öje˘ed
(
uöt32_t
 
adc
)

451  (
	`ADC_SR
(
adc
Ë& 
ADC_SR_JEOC
) != 0;

452 
	}
}

465 
uöt32_t
 
	$adc_ªad_ªguœr
(
uöt32_t
 
adc
)

467  
	`ADC_DR
(
adc
);

468 
	}
}

483 
uöt32_t
 
	$adc_ªad_öje˘ed
(
uöt32_t
 
adc
, 
uöt8_t
 
ªg
)

485 
ªg
) {

487  
	`ADC_JDR1
(
adc
);

489  
	`ADC_JDR2
(
adc
);

491  
	`ADC_JDR3
(
adc
);

493  
	`ADC_JDR4
(
adc
);

496 
	}
}

507 
	$adc_£t_c⁄töuous_c⁄vîsi⁄_mode
(
uöt32_t
 
adc
)

509 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_CONT
;

510 
	}
}

523 
	$adc_£t_sögÀ_c⁄vîsi⁄_mode
(
uöt32_t
 
adc
)

525 
	`ADC_CR2
(
adc
Ë&~
ADC_CR2_CONT
;

526 
	}
}

535 
	$adc_£t_w©chdog_high_thªshﬁd
(
uöt32_t
 
adc
, 
uöt16_t
 
thªshﬁd
)

537 
uöt32_t
 
ªg32
 = 0;

539 
ªg32
 = (
uöt32_t
)
thªshﬁd
;

540 
ªg32
 &
ADC_HT_MSK
;

541 
	`ADC_HTR
(
adc
Ë
ªg32
;

542 
	}
}

551 
	$adc_£t_w©chdog_low_thªshﬁd
(
uöt32_t
 
adc
, 
uöt16_t
 
thªshﬁd
)

553 
uöt32_t
 
ªg32
 = 0;

555 
ªg32
 = (
uöt32_t
)
thªshﬁd
;

556 
ªg32
 &
ADC_LT_MSK
;

557 
	`ADC_LTR
(
adc
Ë
ªg32
;

558 
	}
}

574 
	$adc_£t_ªguœr_£quí˚
(
uöt32_t
 
adc
, 
uöt8_t
 
Àngth
, uöt8_à
ch™√l
[])

576 
uöt32_t
 
fi·h6
 = 0;

577 
uöt32_t
 
fouπh6
 = 0;

578 
uöt32_t
 
thúd6
 = 0;

579 
uöt32_t
 
£c⁄d6
 = 0;

580 
uöt32_t
 
fú°6
 = 0;

581 
uöt8_t
 
i
 = 0;

583 i‡(
Àngth
 > 
ADC_SQR_MAX_CHANNELS_REGULAR
) {

587 
i
 = 1; i <
Àngth
; i++) {

588 i‡(
i
 <= 6) {

589 
fú°6
 |(
ch™√l
[
i
 - 1] << ((i - 1) * 5));

591 i‡((
i
 > 6) & (i <= 12)) {

592 
£c⁄d6
 |(
ch™√l
[
i
 - 1] << ((i - 6 - 1) * 5));

594 i‡((
i
 > 12) & (i <= 18)) {

595 
thúd6
 |(
ch™√l
[
i
 - 1] << ((i - 12 - 1) * 5));

597 i‡((
i
 > 18) & (i <= 24)) {

598 
fouπh6
 |(
ch™√l
[
i
 - 1] << ((i - 18 - 1) * 5));

600 i‡((
i
 > 24) & (i <= 28)) {

601 
fi·h6
 |(
ch™√l
[
i
 - 1] << ((i - 24 - 1) * 5));

604 #i‡
	`deföed
(
ADC_SQR5
)

605 
	`ADC_SQR1
(
adc
Ë
fi·h6
 | ((
Àngth
 - 1Ë<< 
ADC_SQR1_L_LSB
);

606 
	`ADC_SQR2
(
adc
Ë
fouπh6
;

607 
	`ADC_SQR3
(
adc
Ë
thúd6
;

608 
	`ADC_SQR4
(
adc
Ë
£c⁄d6
;

609 
	`ADC_SQR5
(
adc
Ë
fú°6
;

611 
	`ADC_SQR1
(
adc
Ë
thúd6
 | ((
Àngth
 - 1Ë<< 
ADC_SQR1_L_LSB
);

612 
	`ADC_SQR2
(
adc
Ë
£c⁄d6
;

613 
	`ADC_SQR3
(
adc
Ë
fú°6
;

615 
	}
}

630 
	$adc_£t_öje˘ed_£quí˚
(
uöt32_t
 
adc
, 
uöt8_t
 
Àngth
, uöt8_à
ch™√l
[])

632 
uöt32_t
 
ªg32
 = 0;

633 
uöt8_t
 
i
 = 0;

636 i‡((
Àngth
 - 1) > 3) {

640 
i
 = 0; i < 
Àngth
; i++) {

641 
ªg32
 |
	`ADC_JSQR_JSQ_VAL
(4 - 
i
, 
ch™√l
[
Àngth
 - i - 1]);

644 
ªg32
 |
	`ADC_JSQR_JL_VAL
(
Àngth
);

646 
	`ADC_JSQR
(
adc
Ë
ªg32
;

647 
	}
}

662 
	$adc_£t_öje˘ed_off£t
(
uöt32_t
 
adc
, 
uöt8_t
 
ªg
, uöt32_à
off£t
)

664 
ªg
) {

666 
	`ADC_JOFR1
(
adc
Ë
off£t
;

669 
	`ADC_JOFR2
(
adc
Ë
off£t
;

672 
	`ADC_JOFR3
(
adc
Ë
off£t
;

675 
	`ADC_JOFR4
(
adc
Ë
off£t
;

678 
	}
}

695 
	$adc_°¨t_c⁄vîsi⁄_ªguœr
(
uöt32_t
 
adc
)

698 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_SWSTART
;

701 
	`ADC_CR2
(
adc
Ë& 
ADC_CR2_SWSTART
);

702 
	}
}

719 
	$adc_°¨t_c⁄vîsi⁄_öje˘ed
(
uöt32_t
 
adc
)

722 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_JSWSTART
;

725 
	`ADC_CR2
(
adc
Ë& 
ADC_CR2_JSWSTART
);

726 
	}
}

735 
	$adc_íabÀ_dma
(
uöt32_t
 
adc
)

737 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_DMA
;

738 
	}
}

746 
	$adc_dißbÀ_dma
(
uöt32_t
 
adc
)

748 
	`ADC_CR2
(
adc
Ë&~
ADC_CR2_DMA
;

749 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\CRC_CO~1.C

26 
	~<lib›ícm3/°m32/¸c.h
>

37 
	$¸c_ª£t
()

39 
CRC_CR
 |
CRC_CR_RESET
;

40 
	}
}

52 
uöt32_t
 
	$¸c_ˇlcuœã
(
uöt32_t
 
d©a
)

54 
CRC_DR
 = 
d©a
;

56  
CRC_DR
;

57 
	}
}

70 
uöt32_t
 
	$¸c_ˇlcuœã_block
(
uöt32_t
 *
d©≠
, 
size
)

72 
i
;

74 
i
 = 0; i < 
size
; i++) {

75 
CRC_DR
 = 
d©≠
[
i
];

78  
CRC_DR
;

79 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\DAC_CO~1.C

121 
	~<lib›ícm3/°m32/dac.h
>

123 
	#MASK8
 0xFF

	)

124 
	#MASK12
 0xFFF

	)

136 
	$dac_íabÀ
(
d©a_ch™√l
 
dac_ch™√l
)

138 
dac_ch™√l
) {

139 
CHANNEL_1
:

140 
DAC_CR
 |
DAC_CR_EN1
;

142 
CHANNEL_2
:

143 
DAC_CR
 |
DAC_CR_EN2
;

145 
CHANNEL_D
:

146 
DAC_CR
 |(
DAC_CR_EN1
 | 
DAC_CR_EN2
);

149 
	}
}

159 
	$dac_dißbÀ
(
d©a_ch™√l
 
dac_ch™√l
)

161 
dac_ch™√l
) {

162 
CHANNEL_1
:

163 
DAC_CR
 &~
DAC_CR_EN1
;

165 
CHANNEL_2
:

166 
DAC_CR
 &~
DAC_CR_EN2
;

168 
CHANNEL_D
:

169 
DAC_CR
 &~(
DAC_CR_EN1
 | 
DAC_CR_EN2
);

172 
	}
}

185 
	$dac_buf„r_íabÀ
(
d©a_ch™√l
 
dac_ch™√l
)

187 
dac_ch™√l
) {

188 
CHANNEL_1
:

189 
DAC_CR
 &~
DAC_CR_BOFF1
;

191 
CHANNEL_2
:

192 
DAC_CR
 &~
DAC_CR_BOFF2
;

194 
CHANNEL_D
:

195 
DAC_CR
 &~(
DAC_CR_BOFF1
 | 
DAC_CR_BOFF2
);

198 
	}
}

209 
	$dac_buf„r_dißbÀ
(
d©a_ch™√l
 
dac_ch™√l
)

211 
dac_ch™√l
) {

212 
CHANNEL_1
:

213 
DAC_CR
 |
DAC_CR_BOFF1
;

215 
CHANNEL_2
:

216 
DAC_CR
 |
DAC_CR_BOFF2
;

218 
CHANNEL_D
:

219 
DAC_CR
 |(
DAC_CR_BOFF1
 | 
DAC_CR_BOFF2
);

222 
	}
}

233 
	$dac_dma_íabÀ
(
d©a_ch™√l
 
dac_ch™√l
)

235 
dac_ch™√l
) {

236 
CHANNEL_1
:

237 
DAC_CR
 |
DAC_CR_DMAEN1
;

239 
CHANNEL_2
:

240 
DAC_CR
 |
DAC_CR_DMAEN2
;

242 
CHANNEL_D
:

243 
DAC_CR
 |(
DAC_CR_DMAEN1
 | 
DAC_CR_DMAEN2
);

246 
	}
}

256 
	$dac_dma_dißbÀ
(
d©a_ch™√l
 
dac_ch™√l
)

258 
dac_ch™√l
) {

259 
CHANNEL_1
:

260 
DAC_CR
 &~
DAC_CR_DMAEN1
;

262 
CHANNEL_2
:

263 
DAC_CR
 &~
DAC_CR_DMAEN2
;

265 
CHANNEL_D
:

266 
DAC_CR
 &~(
DAC_CR_DMAEN1
 | 
DAC_CR_DMAEN2
);

269 
	}
}

282 
	$dac_åiggî_íabÀ
(
d©a_ch™√l
 
dac_ch™√l
)

284 
dac_ch™√l
) {

285 
CHANNEL_1
:

286 
DAC_CR
 |
DAC_CR_TEN1
;

288 
CHANNEL_2
:

289 
DAC_CR
 |
DAC_CR_TEN2
;

291 
CHANNEL_D
:

292 
DAC_CR
 |(
DAC_CR_TEN1
 | 
DAC_CR_TEN2
);

295 
	}
}

305 
	$dac_åiggî_dißbÀ
(
d©a_ch™√l
 
dac_ch™√l
)

307 
dac_ch™√l
) {

308 
CHANNEL_1
:

309 
DAC_CR
 &~
DAC_CR_TEN1
;

311 
CHANNEL_2
:

312 
DAC_CR
 &~
DAC_CR_TEN2
;

314 
CHANNEL_D
:

315 
DAC_CR
 &~(
DAC_CR_TEN1
 | 
DAC_CR_TEN2
);

318 
	}
}

331 
	$dac_£t_åiggî_sour˚
(
uöt32_t
 
dac_åig_§c
)

333 
DAC_CR
 |
dac_åig_§c
;

334 
	}
}

350 
	$dac_£t_wavef‹m_gíî©i⁄
(
uöt32_t
 
dac_wave_ís
)

352 
DAC_CR
 |
dac_wave_ís
;

353 
	}
}

363 
	$dac_dißbÀ_wavef‹m_gíî©i⁄
(
d©a_ch™√l
 
dac_ch™√l
)

365 
dac_ch™√l
) {

366 
CHANNEL_1
:

367 
DAC_CR
 &~
DAC_CR_WAVE1_DIS
;

369 
CHANNEL_2
:

370 
DAC_CR
 &~
DAC_CR_WAVE2_DIS
;

372 
CHANNEL_D
:

373 
DAC_CR
 &~(
DAC_CR_WAVE1_DIS
 | 
DAC_CR_WAVE2_DIS
);

376 
	}
}

398 
	$dac_£t_wavef‹m_ch¨a˘îi°ics
(
uöt32_t
 
dac_mamp
)

400 
DAC_CR
 |
dac_mamp
;

401 
	}
}

417 
	$dac_lﬂd_d©a_buf„r_sögÀ
(
uöt16_t
 
dac_d©a
, 
d©a_Æign
 
dac_d©a_f‹m©
,

418 
d©a_ch™√l
 
dac_ch™√l
)

420 i‡(
dac_ch™√l
 =
CHANNEL_1
) {

421 
dac_d©a_f‹m©
) {

422 
RIGHT8
:

423 
DAC_DHR8R1
 = 
dac_d©a
;

425 
RIGHT12
:

426 
DAC_DHR12R1
 = 
dac_d©a
;

428 
LEFT12
:

429 
DAC_DHR12L1
 = 
dac_d©a
;

432 } i‡(
dac_ch™√l
 =
CHANNEL_2
) {

433 
dac_d©a_f‹m©
) {

434 
RIGHT8
:

435 
DAC_DHR8R2
 = 
dac_d©a
;

437 
RIGHT12
:

438 
DAC_DHR12R2
 = 
dac_d©a
;

440 
LEFT12
:

441 
DAC_DHR12L2
 = 
dac_d©a
;

445 
	}
}

461 
	$dac_lﬂd_d©a_buf„r_duÆ
(
uöt16_t
 
dac_d©a1
, uöt16_à
dac_d©a2
,

462 
d©a_Æign
 
dac_d©a_f‹m©
)

464 
dac_d©a_f‹m©
) {

465 
RIGHT8
:

466 
DAC_DHR8RD
 = ((
dac_d©a1
 & 
MASK8
Ë| ((
dac_d©a2
 & MASK8) << 8));

468 
RIGHT12
:

469 
DAC_DHR12RD
 = ((
dac_d©a1
 & 
MASK12
) |

470 ((
dac_d©a2
 & 
MASK12
) << 16));

472 
LEFT12
:

473 
DAC_DHR12LD
 = ((
dac_d©a1
 & 
MASK12
) |

474 ((
dac_d©a2
 & 
MASK12
) << 16));

477 
	}
}

488 
	$dac_so·w¨e_åiggî
(
d©a_ch™√l
 
dac_ch™√l
)

490 
dac_ch™√l
) {

491 
CHANNEL_1
:

492 
DAC_SWTRIGR
 |
DAC_SWTRIGR_SWTRIG1
;

494 
CHANNEL_2
:

495 
DAC_SWTRIGR
 |
DAC_SWTRIGR_SWTRIG2
;

497 
CHANNEL_D
:

498 
DAC_SWTRIGR
 |(
DAC_SWTRIGR_SWTRIG1
 | 
DAC_SWTRIGR_SWTRIG2
);

501 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\DMA_CO~1.C

41 
	~<lib›ícm3/°m32/dma.h
>

52 
	$dma_ch™√l_ª£t
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

55 
	`DMA_CCR
(
dma
, 
ch™√l
) = 0;

57 
	`DMA_CNDTR
(
dma
, 
ch™√l
) = 0;

59 
	`DMA_CPAR
(
dma
, 
ch™√l
) = 0;

61 
	`DMA_CMAR
(
dma
, 
ch™√l
) = 0;

63 
	`DMA_IFCR
(
dma
Ë|
	`DMA_IFCR_CIF
(
ch™√l
);

64 
	}
}

78 
	$dma_˛ór_öãºu±_Êags
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
,

79 
uöt32_t
 
öãºu±s
)

82 
uöt32_t
 
Êags
 = (
öãºu±s
 << 
	`DMA_FLAG_OFFSET
(
ch™√l
));

83 
	`DMA_IFCR
(
dma
Ë
Êags
;

84 
	}
}

97 
boﬁ
 
	$dma_gë_öãºu±_Êag
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
, uöt32_à
öãºu±
)

100 
uöt32_t
 
Êag
 = (
öãºu±
 << 
	`DMA_FLAG_OFFSET
(
ch™√l
));

101  ((
	`DMA_ISR
(
dma
Ë& 
Êag
) > 0);

102 
	}
}

115 
	$dma_íabÀ_mem2mem_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

117 
	`DMA_CCR
(
dma
, 
ch™√l
Ë|
DMA_CCR_MEM2MEM
;

118 
	`DMA_CCR
(
dma
, 
ch™√l
Ë&~
DMA_CCR_CIRC
;

119 
	}
}

132 
	$dma_£t_¥i‹ôy
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
, uöt32_à
¥io
)

134 
	`DMA_CCR
(
dma
, 
ch™√l
Ë&~(
DMA_CCR_PL_MASK
);

135 
	`DMA_CCR
(
dma
, 
ch™√l
Ë|
¥io
;

136 
	}
}

149 
	$dma_£t_mem‹y_size
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
, uöt32_à
mem_size
)

152 
	`DMA_CCR
(
dma
, 
ch™√l
Ë&~(
DMA_CCR_MSIZE_MASK
);

153 
	`DMA_CCR
(
dma
, 
ch™√l
Ë|
mem_size
;

154 
	}
}

169 
	$dma_£t_≥rùhîÆ_size
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
,

170 
uöt32_t
 
≥rùhîÆ_size
)

172 
	`DMA_CCR
(
dma
, 
ch™√l
Ë&~(
DMA_CCR_PSIZE_MASK
);

173 
	`DMA_CCR
(
dma
, 
ch™√l
Ë|
≥rùhîÆ_size
;

174 
	}
}

187 
	$dma_íabÀ_mem‹y_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

189 
	`DMA_CCR
(
dma
, 
ch™√l
Ë|
DMA_CCR_MINC
;

190 
	}
}

199 
	$dma_dißbÀ_mem‹y_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

201 
	`DMA_CCR
(
dma
, 
ch™√l
Ë&~
DMA_CCR_MINC
;

202 
	}
}

215 
	$dma_íabÀ_≥rùhîÆ_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

217 
	`DMA_CCR
(
dma
, 
ch™√l
Ë|
DMA_CCR_PINC
;

218 
	}
}

227 
	$dma_dißbÀ_≥rùhîÆ_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

229 
	`DMA_CCR
(
dma
, 
ch™√l
Ë&~
DMA_CCR_PINC
;

230 
	}
}

246 
	$dma_íabÀ_cúcuœr_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

248 
	`DMA_CCR
(
dma
, 
ch™√l
Ë|
DMA_CCR_CIRC
;

249 
	`DMA_CCR
(
dma
, 
ch™√l
Ë&~
DMA_CCR_MEM2MEM
;

250 
	}
}

261 
	$dma_£t_ªad_‰om_≥rùhîÆ
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

263 
	`DMA_CCR
(
dma
, 
ch™√l
Ë&~
DMA_CCR_DIR
;

264 
	}
}

275 
	$dma_£t_ªad_‰om_mem‹y
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

277 
	`DMA_CCR
(
dma
, 
ch™√l
Ë|
DMA_CCR_DIR
;

278 
	}
}

287 
	$dma_íabÀ_å™s„r_îr‹_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

289 
	`DMA_CCR
(
dma
, 
ch™√l
Ë|
DMA_CCR_TEIE
;

290 
	}
}

299 
	$dma_dißbÀ_å™s„r_îr‹_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

301 
	`DMA_CCR
(
dma
, 
ch™√l
Ë&~
DMA_CCR_TEIE
;

302 
	}
}

311 
	$dma_íabÀ_hÆf_å™s„r_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

313 
	`DMA_CCR
(
dma
, 
ch™√l
Ë|
DMA_CCR_HTIE
;

314 
	}
}

323 
	$dma_dißbÀ_hÆf_å™s„r_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

325 
	`DMA_CCR
(
dma
, 
ch™√l
Ë&~
DMA_CCR_HTIE
;

326 
	}
}

335 
	$dma_íabÀ_å™s„r_com∂ëe_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

337 
	`DMA_CCR
(
dma
, 
ch™√l
Ë|
DMA_CCR_TCIE
;

338 
	}
}

347 
	$dma_dißbÀ_å™s„r_com∂ëe_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

349 
	`DMA_CCR
(
dma
, 
ch™√l
Ë&~
DMA_CCR_TCIE
;

350 
	}
}

359 
	$dma_íabÀ_ch™√l
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

361 
	`DMA_CCR
(
dma
, 
ch™√l
Ë|
DMA_CCR_EN
;

362 
	}
}

374 
	$dma_dißbÀ_ch™√l
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

376 
	`DMA_CCR
(
dma
, 
ch™√l
Ë&~
DMA_CCR_EN
;

377 
	}
}

393 
	$dma_£t_≥rùhîÆ_addªss
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
, uöt32_à
addªss
)

395 i‡(!(
	`DMA_CCR
(
dma
, 
ch™√l
Ë& 
DMA_CCR_EN
)) {

396 
	`DMA_CPAR
(
dma
, 
ch™√l
Ë(
uöt32_t
Ë
addªss
;

398 
	}
}

411 
	$dma_£t_mem‹y_addªss
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
, uöt32_à
addªss
)

413 i‡(!(
	`DMA_CCR
(
dma
, 
ch™√l
Ë& 
DMA_CCR_EN
)) {

414 
	`DMA_CMAR
(
dma
, 
ch™√l
Ë(
uöt32_t
Ë
addªss
;

416 
	}
}

430 
	$dma_£t_numbî_of_d©a
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
, 
uöt16_t
 
numbî
)

432 
	`DMA_CNDTR
(
dma
, 
ch™√l
Ë
numbî
;

433 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\EXTI_C~1.C

26 
	~<lib›ícm3/°m32/exti.h
>

27 
	~<lib›ícm3/°m32/gpio.h
>

28 #i‡!
deföed
(
AFIO_BASE
)

29 
	~<lib›ícm3/°m32/syscfg.h
>

32 
	$exti_£t_åiggî
(
uöt32_t
 
extis
, 
exti_åiggî_ty≥
 
åig
)

34 
åig
) {

35 
EXTI_TRIGGER_RISING
:

36 
EXTI_RTSR
 |
extis
;

37 
EXTI_FTSR
 &~
extis
;

39 
EXTI_TRIGGER_FALLING
:

40 
EXTI_RTSR
 &~
extis
;

41 
EXTI_FTSR
 |
extis
;

43 
EXTI_TRIGGER_BOTH
:

44 
EXTI_RTSR
 |
extis
;

45 
EXTI_FTSR
 |
extis
;

48 
	}
}

50 
	$exti_íabÀ_ªque°
(
uöt32_t
 
extis
)

53 
EXTI_IMR
 |
extis
;

56 
EXTI_EMR
 |
extis
;

57 
	}
}

59 
	$exti_dißbÀ_ªque°
(
uöt32_t
 
extis
)

62 
EXTI_IMR
 &~
extis
;

65 
EXTI_EMR
 &~
extis
;

66 
	}
}

72 
	$exti_ª£t_ªque°
(
uöt32_t
 
extis
)

74 
EXTI_PR
 = 
extis
;

75 
	}
}

80 
uöt32_t
 
	$exti_gë_Êag_°©us
(
uöt32_t
 
exti
)

82  
EXTI_PR
 & 
exti
;

83 
	}
}

91 
	$exti_£À˘_sour˚
(
uöt32_t
 
exti
, uöt32_à
gpi›‹t
)

93 
uöt32_t
 
löe
;

94 
löe
 = 0;Üine < 16;Üine++) {

95 i‡(!(
exti
 & (1 << 
löe
))) {

99 
uöt32_t
 
bôs
 = 0, 
mask
 = 0x0F;

101 
gpi›‹t
) {

102 
GPIOA
:

103 
bôs
 = 0;

105 
GPIOB
:

106 
bôs
 = 1;

108 
GPIOC
:

109 
bôs
 = 2;

111 
GPIOD
:

112 
bôs
 = 3;

114 #i‡
	`deföed
(
GPIOE
Ë&& deföed(
GPIO_PORT_E_BASE
)

115 
GPIOE
:

116 
bôs
 = 4;

119 #i‡
	`deföed
(
GPIOF
Ë&& deföed(
GPIO_PORT_F_BASE
)

120 
GPIOF
:

121 
bôs
 = 5;

124 #i‡
	`deföed
(
GPIOG
Ë&& deföed(
GPIO_PORT_G_BASE
)

125 
GPIOG
:

126 
bôs
 = 6;

129 #i‡
	`deföed
(
GPIOH
Ë&& deföed(
GPIO_PORT_H_BASE
)

130 
GPIOH
:

131 
bôs
 = 7;

134 #i‡
	`deföed
(
GPIOI
Ë&& deföed(
GPIO_PORT_I_BASE
)

135 
GPIOI
:

136 
bôs
 = 8;

139 #i‡
	`deföed
(
GPIOJ
Ë&& deföed(
GPIO_PORT_J_BASE
)

140 
GPIOJ
:

141 
bôs
 = 9;

144 #i‡
	`deföed
(
GPIOK
Ë&& deföed(
GPIO_PORT_K_BASE
)

145 
GPIOK
:

146 
bôs
 = 10;

151 
uöt8_t
 
shi·
 = (uöt8_t)(4 * (
löe
 % 4));

152 
uöt32_t
 
ªg
 = 
löe
 / 4;

153 
bôs
 <<
shi·
;

154 
mask
 <<
shi·
;

156 #i‡
	`deföed
(
AFIO_BASE
)

157 
	`AFIO_EXTICR
(
ªg
Ë(AFIO_EXTICR‘egË& ~
mask
Ë| 
bôs
;

159 
	`SYSCFG_EXTICR
(
ªg
Ë(SYSCFG_EXTICR‘egË& ~
mask
Ë| 
bôs
;

162 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\FLASH_~1.C

26 
	~<lib›ícm3/°m32/Êash.h
>

40 
	$Êash_¥e„tch_buf„r_íabÀ
()

42 
FLASH_ACR
 |
FLASH_ACR_PRFTBE
;

43 
	}
}

52 
	$Êash_¥e„tch_buf„r_dißbÀ
()

54 
FLASH_ACR
 &~
FLASH_ACR_PRFTBE
;

55 
	}
}

67 
	$Êash_£t_ws
(
uöt32_t
 
ws
)

69 
FLASH_ACR
 = (FLASH_ACR & ~
FLASH_ACR_LATENCY
Ë| 
ws
;

70 
	}
}

79 
	$Êash_u∆ock
()

82 
FLASH_CR
 |
FLASH_CR_LOCK
;

85 
FLASH_KEYR
 = 
FLASH_KEYR_KEY1
;

86 
FLASH_KEYR
 = 
FLASH_KEYR_KEY2
;

87 
	}
}

95 
	$Êash_lock
()

97 
FLASH_CR
 |
FLASH_CR_LOCK
;

98 
	}
}

105 
	$Êash_˛ór_pgîr_Êag
()

107 
FLASH_SR
 |
FLASH_SR_PGERR
;

108 
	}
}

115 
	$Êash_˛ór_e›_Êag
()

117 
FLASH_SR
 |
FLASH_SR_EOP
;

118 
	}
}

125 
	$Êash_˛ór_wΩπîr_Êag
()

127 
FLASH_SR
 |
FLASH_SR_WRPRTERR
;

128 
	}
}

135 
	$Êash_˛ór_bsy_Êag
()

137 
FLASH_SR
 &~
FLASH_SR_BSY
;

138 
	}
}

147 
	$Êash_waô_f‹_œ°_›î©i⁄
()

149 (
	`Êash_gë_°©us_Êags
(Ë& 
FLASH_SR_BSY
) == FLASH_SR_BSY);

150 
	}
}

165 
	$Êash_¥ogøm_w‹d
(
uöt32_t
 
addªss
, uöt32_à
d©a
)

167 
	`Êash_¥ogøm_hÆf_w‹d
(
addªss
, (
uöt16_t
)
d©a
);

168 
	`Êash_¥ogøm_hÆf_w‹d
(
addªss
+2, (
uöt16_t
)(
d©a
>>16));

169 
	}
}

178 
	$Êash_u∆ock_›ti⁄_byãs
()

181 
FLASH_OPTKEYR
 = 
FLASH_KEYR_KEY1
;

182 
FLASH_OPTKEYR
 = 
FLASH_KEYR_KEY2
;

183 
	}
}

193 
	$Êash_îa£_›ti⁄_byãs
()

195 
	`Êash_waô_f‹_œ°_›î©i⁄
();

197 i‡((
FLASH_CR
 & 
FLASH_CR_OPTWRE
) == 0) {

198 
	`Êash_u∆ock_›ti⁄_byãs
();

201 
FLASH_CR
 |
FLASH_CR_OPTER
;

202 
FLASH_CR
 |
FLASH_CR_STRT
;

203 
	`Êash_waô_f‹_œ°_›î©i⁄
();

204 
FLASH_CR
 &~
FLASH_CR_OPTER
;

205 
	}
}

220 
	$Êash_¥ogøm_›ti⁄_byãs
(
uöt32_t
 
addªss
, 
uöt16_t
 
d©a
)

222 
	`Êash_waô_f‹_œ°_›î©i⁄
();

224 i‡((
FLASH_CR
 & 
FLASH_CR_OPTWRE
) == 0) {

225 
	`Êash_u∆ock_›ti⁄_byãs
();

228 
FLASH_CR
 |
FLASH_CR_OPTPG
;

229 
	`MMIO16
(
addªss
Ë
d©a
;

230 
	`Êash_waô_f‹_œ°_›î©i⁄
();

231 
FLASH_CR
 &~
FLASH_CR_OPTPG
;

232 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\GPIO_C~1.C

26 
	~<lib›ícm3/°m32/gpio.h
>

40 
	$gpio_£t
(
uöt32_t
 
gpi›‹t
, 
uöt16_t
 
gpios
)

42 
	`GPIO_BSRR
(
gpi›‹t
Ë
gpios
;

43 
	}
}

55 
	$gpio_˛ór
(
uöt32_t
 
gpi›‹t
, 
uöt16_t
 
gpios
)

57 
	`GPIO_BSRR
(
gpi›‹t
Ë(
gpios
 << 16);

58 
	}
}

70 
uöt16_t
 
	$gpio_gë
(
uöt32_t
 
gpi›‹t
, 
uöt16_t
 
gpios
)

72  
	`gpio_p‹t_ªad
(
gpi›‹t
Ë& 
gpios
;

73 
	}
}

86 
	$gpio_toggÀ
(
uöt32_t
 
gpi›‹t
, 
uöt16_t
 
gpios
)

88 
uöt32_t
 
p‹t
 = 
	`GPIO_ODR
(
gpi›‹t
);

89 
	`GPIO_BSRR
(
gpi›‹t
Ë((
p‹t
 & 
gpios
) << 16) | (~port & gpios);

90 
	}
}

101 
uöt16_t
 
	$gpio_p‹t_ªad
(
uöt32_t
 
gpi›‹t
)

103  (
uöt16_t
)
	`GPIO_IDR
(
gpi›‹t
);

104 
	}
}

114 
	$gpio_p‹t_wrôe
(
uöt32_t
 
gpi›‹t
, 
uöt16_t
 
d©a
)

116 
	`GPIO_ODR
(
gpi›‹t
Ë
d©a
;

117 
	}
}

131 
	$gpio_p‹t_c⁄fig_lock
(
uöt32_t
 
gpi›‹t
, 
uöt16_t
 
gpios
)

133 
uöt32_t
 
ªg32
;

136 
	`GPIO_LCKR
(
gpi›‹t
Ë
GPIO_LCKK
 | 
gpios
;

137 
	`GPIO_LCKR
(
gpi›‹t
Ë~
GPIO_LCKK
 & 
gpios
;

138 
	`GPIO_LCKR
(
gpi›‹t
Ë
GPIO_LCKK
 | 
gpios
;

139 
ªg32
 = 
	`GPIO_LCKR
(
gpi›‹t
);

140 
ªg32
 = 
	`GPIO_LCKR
(
gpi›‹t
);

145 
ªg32
 =Ñeg32;

148 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\I2C_CO~1.C

38 
	~<lib›ícm3/°m32/i2c.h
>

39 
	~<lib›ícm3/°m32/rcc.h
>

52 
	$i2c_ª£t
(
uöt32_t
 
i2c
)

54 
i2c
) {

55 
I2C1
:

56 
	`rcc_≥rùh_ª£t_pul£
(
RST_I2C1
);

58 #i‡
	`deföed
(
I2C2_BASE
)

59 
I2C2
:

60 
	`rcc_≥rùh_ª£t_pul£
(
RST_I2C2
);

63 #i‡
	`deföed
(
I2C3_BASE
)

64 
I2C3
:

65 
	`rcc_≥rùh_ª£t_pul£
(
RST_I2C3
);

71 
	}
}

79 
	$i2c_≥rùhîÆ_íabÀ
(
uöt32_t
 
i2c
)

81 
	`I2C_CR1
(
i2c
Ë|
I2C_CR1_PE
;

82 
	}
}

93 
	$i2c_≥rùhîÆ_dißbÀ
(
uöt32_t
 
i2c
)

95 
	`I2C_CR1
(
i2c
Ë&~
I2C_CR1_PE
;

96 
	}
}

108 
	$i2c_£nd_°¨t
(
uöt32_t
 
i2c
)

110 
	`I2C_CR1
(
i2c
Ë|
I2C_CR1_START
;

111 
	}
}

122 
	$i2c_£nd_°›
(
uöt32_t
 
i2c
)

124 
	`I2C_CR1
(
i2c
Ë|
I2C_CR1_STOP
;

125 
	}
}

134 
	$i2c_˛ór_°›
(
uöt32_t
 
i2c
)

136 
	`I2C_CR1
(
i2c
Ë&~
I2C_CR1_STOP
;

137 
	}
}

148 
	$i2c_£t_own_7bô_¶ave_addªss
(
uöt32_t
 
i2c
, 
uöt8_t
 
¶ave
)

150 
uöt16_t
 
vÆ
 = (uöt16_t)(
¶ave
 << 1);

152 
vÆ
 |= (1 << 14);

153 
	`I2C_OAR1
(
i2c
Ë
vÆ
;

154 
	}
}

167 
	$i2c_£t_own_10bô_¶ave_addªss
(
uöt32_t
 
i2c
, 
uöt16_t
 
¶ave
)

169 
	`I2C_OAR1
(
i2c
Ë(
uöt16_t
)(
I2C_OAR1_ADDMODE
 | 
¶ave
);

170 
	}
}

182 
	$i2c_£t_own_7bô_¶ave_addªss_two
(
uöt32_t
 
i2c
, 
uöt8_t
 
¶ave
)

184 
uöt16_t
 
vÆ
 = (uöt16_t)(
¶ave
 << 1);

185 
	`I2C_OAR2
(
i2c
Ë
vÆ
;

186 
	}
}

196 
	$i2c_íabÀ_duÆ_addªssög_mode
(
uöt32_t
 
i2c
)

198 
	`I2C_OAR2
(
i2c
Ë|
I2C_OAR2_ENDUAL
;

199 
	}
}

209 
	$i2c_dißbÀ_duÆ_addªssög_mode
(
uöt32_t
 
i2c
)

211 
	`I2C_OAR2
(
i2c
Ë&~(
I2C_OAR2_ENDUAL
);

212 
	}
}

226 
	$i2c_£t_˛ock_‰equícy
(
uöt32_t
 
i2c
, 
uöt8_t
 
‰eq
)

228 
uöt16_t
 
ªg16
;

229 
ªg16
 = 
	`I2C_CR2
(
i2c
) & 0xffc0;

230 
ªg16
 |
‰eq
;

231 
	`I2C_CR2
(
i2c
Ë
ªg16
;

232 
	}
}

241 
	$i2c_£nd_d©a
(
uöt32_t
 
i2c
, 
uöt8_t
 
d©a
)

243 
	`I2C_DR
(
i2c
Ë
d©a
;

244 
	}
}

255 
	$i2c_£t_Á°_mode
(
uöt32_t
 
i2c
)

257 
	`I2C_CCR
(
i2c
Ë|
I2C_CCR_FS
;

258 
	}
}

269 
	$i2c_£t_°™d¨d_mode
(
uöt32_t
 
i2c
)

271 
	`I2C_CCR
(
i2c
Ë&~
I2C_CCR_FS
;

272 
	}
}

289 
	$i2c_£t_c¸
(
uöt32_t
 
i2c
, 
uöt16_t
 
‰eq
)

291 
uöt16_t
 
ªg16
;

292 
ªg16
 = 
	`I2C_CCR
(
i2c
) & 0xf000;

293 
ªg16
 |
‰eq
;

294 
	`I2C_CCR
(
i2c
Ë
ªg16
;

295 
	}
}

310 
	$i2c_£t_åi£
(
uöt32_t
 
i2c
, 
uöt16_t
 
åi£
)

312 
	`I2C_TRISE
(
i2c
Ë
åi£
;

313 
	}
}

324 
	$i2c_£nd_7bô_addªss
(
uöt32_t
 
i2c
, 
uöt8_t
 
¶ave
, uöt8_à
ªadwrôe
)

326 
	`I2C_DR
(
i2c
Ë(
uöt8_t
)((
¶ave
 << 1Ë| 
ªadwrôe
);

327 
	}
}

334 
uöt8_t
 
	$i2c_gë_d©a
(
uöt32_t
 
i2c
)

336  
	`I2C_DR
(
i2c
) & 0xff;

337 
	}
}

345 
	$i2c_íabÀ_öãºu±
(
uöt32_t
 
i2c
, uöt32_à
öãºu±
)

347 
	`I2C_CR2
(
i2c
Ë|
öãºu±
;

348 
	}
}

356 
	$i2c_dißbÀ_öãºu±
(
uöt32_t
 
i2c
, uöt32_à
öãºu±
)

358 
	`I2C_CR2
(
i2c
Ë&~
öãºu±
;

359 
	}
}

367 
	$i2c_íabÀ_ack
(
uöt32_t
 
i2c
)

369 
	`I2C_CR1
(
i2c
Ë|
I2C_CR1_ACK
;

370 
	}
}

378 
	$i2c_dißbÀ_ack
(
uöt32_t
 
i2c
)

380 
	`I2C_CR1
(
i2c
Ë&~
I2C_CR1_ACK
;

381 
	}
}

389 
	$i2c_«ck_√xt
(
uöt32_t
 
i2c
)

391 
	`I2C_CR1
(
i2c
Ë|
I2C_CR1_POS
;

392 
	}
}

401 
	$i2c_«ck_cuºít
(
uöt32_t
 
i2c
)

403 
	`I2C_CR1
(
i2c
Ë&~
I2C_CR1_POS
;

404 
	}
}

412 
	$i2c_£t_dutycy˛e
(
uöt32_t
 
i2c
, uöt32_à
dutycy˛e
)

414 i‡(
dutycy˛e
 =
I2C_CCR_DUTY_DIV2
) {

415 
	`I2C_CCR
(
i2c
Ë&~
I2C_CCR_DUTY
;

417 
	`I2C_CCR
(
i2c
Ë|
I2C_CCR_DUTY
;

419 
	}
}

426 
	$i2c_íabÀ_dma
(
uöt32_t
 
i2c
)

428 
	`I2C_CR2
(
i2c
Ë|
I2C_CR2_DMAEN
;

429 
	}
}

436 
	$i2c_dißbÀ_dma
(
uöt32_t
 
i2c
)

438 
	`I2C_CR2
(
i2c
Ë&~
I2C_CR2_DMAEN
;

439 
	}
}

446 
	$i2c_£t_dma_œ°_å™s„r
(
uöt32_t
 
i2c
)

448 
	`I2C_CR2
(
i2c
Ë|
I2C_CR2_LAST
;

449 
	}
}

456 
	$i2c_˛ór_dma_œ°_å™s„r
(
uöt32_t
 
i2c
)

458 
	`I2C_CR2
(
i2c
Ë&~
I2C_CR2_LAST
;

459 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\IWDG_C~1.C

39 
	~<lib›ícm3/°m32/iwdg.h
>

41 
	#LSI_FREQUENCY
 32000

	)

42 
	#COUNT_LENGTH
 12

	)

43 
	#COUNT_MASK
 ((1 << 
COUNT_LENGTH
)-1)

	)

53 
	$iwdg_°¨t
()

55 
IWDG_KR
 = 
IWDG_KR_START
;

56 
	}
}

73 
	$iwdg_£t_≥riod_ms
(
uöt32_t
 
≥riod
)

75 
uöt32_t
 
cou¡
, 
¥esˇÀ
, 
ªlﬂd
, 
exp⁄ít
;

78 
cou¡
 = (
≥riod
 << 5);

81 
¥esˇÀ
 = (
cou¡
 >> 12);

82 i‡(
¥esˇÀ
 > 256) {

83 
exp⁄ít
 = 
IWDG_PR_DIV256
; 
ªlﬂd
 = 
COUNT_MASK
;

84 } i‡(
¥esˇÀ
 > 128) {

85 
exp⁄ít
 = 
IWDG_PR_DIV256
; 
ªlﬂd
 = (
cou¡
 >> 8);

86 } i‡(
¥esˇÀ
 > 64) {

87 
exp⁄ít
 = 
IWDG_PR_DIV128
; 
ªlﬂd
 = (
cou¡
 >> 7);

88 } i‡(
¥esˇÀ
 > 32) {

89 
exp⁄ít
 = 
IWDG_PR_DIV64
; 
ªlﬂd
 = (
cou¡
 >> 6);

90 } i‡(
¥esˇÀ
 > 16) {

91 
exp⁄ít
 = 
IWDG_PR_DIV32
; 
ªlﬂd
 = (
cou¡
 >> 5);

92 } i‡(
¥esˇÀ
 > 8) {

93 
exp⁄ít
 = 
IWDG_PR_DIV16
; 
ªlﬂd
 = (
cou¡
 >> 4);

94 } i‡(
¥esˇÀ
 > 4) {

95 
exp⁄ít
 = 
IWDG_PR_DIV8
; 
ªlﬂd
 = (
cou¡
 >> 3);

97 
exp⁄ít
 = 
IWDG_PR_DIV4
; 
ªlﬂd
 = (
cou¡
 >> 2);

101 i‡(
cou¡
 == 0) {

102 
cou¡
 = 1;

105 
	`iwdg_¥esˇÀr_busy
());

106 
IWDG_KR
 = 
IWDG_KR_UNLOCK
;

107 
IWDG_PR
 = 
exp⁄ít
;

108 
	`iwdg_ªlﬂd_busy
());

109 
IWDG_KR
 = 
IWDG_KR_UNLOCK
;

110 
IWDG_RLR
 = (
ªlﬂd
 & 
COUNT_MASK
);

111 
	}
}

120 
boﬁ
 
	$iwdg_ªlﬂd_busy
()

122  
IWDG_SR
 & 
IWDG_SR_RVU
;

123 
	}
}

132 
boﬁ
 
	$iwdg_¥esˇÀr_busy
()

134  
IWDG_SR
 & 
IWDG_SR_PVU
;

135 
	}
}

144 
	$iwdg_ª£t
()

146 
IWDG_KR
 = 
IWDG_KR_RESET
;

147 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\PWR_CO~1.C

28 
	~<lib›ícm3/°m32/pwr.h
>

37 
	$pwr_dißbÀ_backup_domaö_wrôe_¥Ÿe˘
()

39 
PWR_CR
 |
PWR_CR_DBP
;

40 
	}
}

48 
	$pwr_íabÀ_backup_domaö_wrôe_¥Ÿe˘
()

50 
PWR_CR
 &~
PWR_CR_DBP
;

51 
	}
}

63 
	$pwr_íabÀ_powî_vﬁège_dëe˘
(
uöt32_t
 
pvd_Àvñ
)

65 
PWR_CR
 &~
PWR_CR_PLS_MASK
;

66 
PWR_CR
 |(
PWR_CR_PVDE
 | 
pvd_Àvñ
);

67 
	}
}

74 
	$pwr_dißbÀ_powî_vﬁège_dëe˘
()

76 
PWR_CR
 &~
PWR_CR_PVDE
;

77 
	}
}

85 
	$pwr_˛ór_°™dby_Êag
()

87 
PWR_CR
 |
PWR_CR_CSBF
;

88 
	}
}

96 
	$pwr_˛ór_wakeup_Êag
()

98 
PWR_CR
 |
PWR_CR_CWUF
;

99 
	}
}

106 
	$pwr_£t_°™dby_mode
()

108 
PWR_CR
 |
PWR_CR_PDDS
;

109 
	}
}

116 
	$pwr_£t_°›_mode
()

118 
PWR_CR
 &~
PWR_CR_PDDS
;

119 
	}
}

126 
	$pwr_vﬁège_ªguœt‹_⁄_ö_°›
()

128 
PWR_CR
 &~
PWR_CR_LPDS
;

129 
	}
}

136 
	$pwr_vﬁège_ªguœt‹_low_powî_ö_°›
()

138 
PWR_CR
 |
PWR_CR_LPDS
;

139 
	}
}

147 
	$pwr_íabÀ_wakeup_pö
()

149 
PWR_CSR
 |
PWR_CSR_EWUP
;

150 
	}
}

158 
	$pwr_dißbÀ_wakeup_pö
()

160 
PWR_CSR
 &~
PWR_CSR_EWUP
;

161 
	}
}

173 
boﬁ
 
	$pwr_vﬁège_high
()

175  
PWR_CSR
 & 
PWR_CSR_PVDO
;

176 
	}
}

187 
boﬁ
 
	$pwr_gë_°™dby_Êag
()

189  
PWR_CSR
 & 
PWR_CSR_SBF
;

190 
	}
}

201 
boﬁ
 
	$pwr_gë_wakeup_Êag
()

203  
PWR_CSR
 & 
PWR_CSR_WUF
;

204 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\RCC_CO~1.C

22 
	~<lib›ícm3/°m32/rcc.h
>

41 
	$rcc_≥rùhîÆ_íabÀ_˛ock
(vﬁ©ûê
uöt32_t
 *
ªg
, uöt32_à
í
)

43 *
ªg
 |
í
;

44 
	}
}

62 
	$rcc_≥rùhîÆ_dißbÀ_˛ock
(vﬁ©ûê
uöt32_t
 *
ªg
, uöt32_à
í
)

64 *
ªg
 &~
í
;

65 
	}
}

82 
	$rcc_≥rùhîÆ_ª£t
(vﬁ©ûê
uöt32_t
 *
ªg
, uöt32_à
ª£t
)

84 *
ªg
 |
ª£t
;

85 
	}
}

103 
	$rcc_≥rùhîÆ_˛ór_ª£t
(vﬁ©ûê
uöt32_t
 *
ªg
, uöt32_à
˛ór_ª£t
)

105 *
ªg
 &~
˛ór_ª£t
;

106 
	}
}

108 
	#_RCC_REG
(
i
Ë
	`MMIO32
(
RCC_BASE
 + ((iË>> 5))

	)

109 
	#_RCC_BIT
(
i
Ë(1 << ((iË& 0x1f))

	)

121 
	$rcc_≥rùh_˛ock_íabÀ
(
rcc_≥rùh_˛kí
 
˛kí
)

123 
	`_RCC_REG
(
˛kí
Ë|
	`_RCC_BIT
(clken);

124 
	}
}

135 
	$rcc_≥rùh_˛ock_dißbÀ
(
rcc_≥rùh_˛kí
 
˛kí
)

137 
	`_RCC_REG
(
˛kí
Ë&~
	`_RCC_BIT
(clken);

138 
	}
}

150 
	$rcc_≥rùh_ª£t_pul£
(
rcc_≥rùh_r°
 
r°
)

152 
	`_RCC_REG
(
r°
Ë|
	`_RCC_BIT
(rst);

153 
	`_RCC_REG
(
r°
Ë&~
	`_RCC_BIT
(rst);

154 
	}
}

166 
	$rcc_≥rùh_ª£t_hﬁd
(
rcc_≥rùh_r°
 
r°
)

168 
	`_RCC_REG
(
r°
Ë|
	`_RCC_BIT
(rst);

169 
	}
}

181 
	$rcc_≥rùh_ª£t_ªÀa£
(
rcc_≥rùh_r°
 
r°
)

183 
	`_RCC_REG
(
r°
Ë&~
	`_RCC_BIT
(rst);

184 
	}
}

194 
	$rcc_£t_mco
(
uöt32_t
 
mco§c
)

196 
RCC_CFGR
 = (RCC_CFGR & ~(
RCC_CFGR_MCO_MASK
 << 
RCC_CFGR_MCO_SHIFT
)) |

197 (
mco§c
 << 
RCC_CFGR_MCO_SHIFT
);

198 
	}
}

202 #unde‡
_RCC_REG


203 #unde‡
_RCC_BIT


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\SPI_CO~1.C

54 
	~<lib›ícm3/°m32/•i.h
>

55 
	~<lib›ícm3/°m32/rcc.h
>

82 
	$•i_ª£t
(
uöt32_t
 
•i_≥rùhîÆ
)

83 { 
•i_≥rùhîÆ
) {

84 #i‡
	`deföed
(
SPI1_BASE
)

85 
SPI1_BASE
:

86 
	`rcc_≥rùh_ª£t_pul£
(
RST_SPI1
);

89 #i‡
	`deföed
(
SPI2_BASE
)

90 
SPI2_BASE
:

91 
	`rcc_≥rùh_ª£t_pul£
(
RST_SPI2
);

94 #i‡
	`deföed
(
SPI3_BASE
)

95 
SPI3_BASE
:

96 
	`rcc_≥rùh_ª£t_pul£
(
RST_SPI3
);

99 #i‡
	`deföed
(
SPI4_BASE
)

100 
SPI4_BASE
:

101 
	`rcc_≥rùh_ª£t_pul£
(
RST_SPI4
);

104 #i‡
	`deföed
(
SPI5_BASE
)

105 
SPI5_BASE
:

106 
	`rcc_≥rùh_ª£t_pul£
(
RST_SPI5
);

109 #i‡
	`deföed
(
SPI6_BASE
)

110 
SPI6_BASE
:

111 
	`rcc_≥rùh_ª£t_pul£
(
RST_SPI6
);

117 
	}
}

130 
	$•i_íabÀ
(
uöt32_t
 
•i
)

132 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_SPE
;

133 
	}
}

144 
	$•i_dißbÀ
(
uöt32_t
 
•i
)

146 
uöt32_t
 
ªg32
;

148 
ªg32
 = 
	`SPI_CR1
(
•i
);

149 
ªg32
 &~(
SPI_CR1_SPE
);

150 
	`SPI_CR1
(
•i
Ë
ªg32
;

151 
	}
}

164 
uöt16_t
 
	$•i_˛ón_dißbÀ
(
uöt32_t
 
•i
)

167 !(
	`SPI_SR
(
•i
Ë& 
SPI_SR_RXNE
));

169 
uöt16_t
 
d©a
 = 
	`SPI_DR
(
•i
);

172 !(
	`SPI_SR
(
•i
Ë& 
SPI_SR_TXE
));

175 
	`SPI_SR
(
•i
Ë& 
SPI_SR_BSY
);

177 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_SPE
;

179  
d©a
;

180 
	}
}

191 
	$•i_wrôe
(
uöt32_t
 
•i
, 
uöt16_t
 
d©a
)

194 
	`SPI_DR
(
•i
Ë
d©a
;

195 
	}
}

207 
	$•i_£nd
(
uöt32_t
 
•i
, 
uöt16_t
 
d©a
)

210 !(
	`SPI_SR
(
•i
Ë& 
SPI_SR_TXE
));

213 
	`SPI_DR
(
•i
Ë
d©a
;

214 
	}
}

225 
uöt16_t
 
	$•i_ªad
(
uöt32_t
 
•i
)

228 !(
	`SPI_SR
(
•i
Ë& 
SPI_SR_RXNE
));

231  
	`SPI_DR
(
•i
);

232 
	}
}

245 
uöt16_t
 
	$•i_x„r
(
uöt32_t
 
•i
, 
uöt16_t
 
d©a
)

247 
	`•i_wrôe
(
•i
, 
d©a
);

250 !(
	`SPI_SR
(
•i
Ë& 
SPI_SR_RXNE
));

253  
	`SPI_DR
(
•i
);

254 
	}
}

265 
	$•i_£t_bidúe˘i⁄Æ_mode
(
uöt32_t
 
•i
)

267 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_BIDIMODE
;

268 
	}
}

280 
	$•i_£t_unidúe˘i⁄Æ_mode
(
uöt32_t
 
•i
)

282 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_BIDIMODE
;

283 
	}
}

295 
	$•i_£t_bidúe˘i⁄Æ_ª˚ive_⁄ly_mode
(
uöt32_t
 
•i
)

297 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_BIDIMODE
;

298 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_BIDIOE
;

299 
	}
}

311 
	$•i_£t_bidúe˘i⁄Æ_å™smô_⁄ly_mode
(
uöt32_t
 
•i
)

313 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_BIDIMODE
;

314 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_BIDIOE
;

315 
	}
}

325 
	$•i_íabÀ_¸c
(
uöt32_t
 
•i
)

327 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_CRCEN
;

328 
	}
}

336 
	$•i_dißbÀ_¸c
(
uöt32_t
 
•i
)

338 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_CRCEN
;

339 
	}
}

351 
	$•i_£t_√xt_tx_‰om_buf„r
(
uöt32_t
 
•i
)

353 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_CRCNEXT
;

354 
	}
}

366 
	$•i_£t_√xt_tx_‰om_¸c
(
uöt32_t
 
•i
)

368 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_CRCNEXT
;

369 
	}
}

377 
	$•i_£t_fuŒ_du∂ex_mode
(
uöt32_t
 
•i
)

379 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_RXONLY
;

380 
	}
}

389 
	$•i_£t_ª˚ive_⁄ly_mode
(
uöt32_t
 
•i
)

391 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_RXONLY
;

392 
	}
}

402 
	$•i_dißbÀ_so·w¨e_¶ave_m™agemít
(
uöt32_t
 
•i
)

404 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_SSM
;

405 
	}
}

416 
	$•i_íabÀ_so·w¨e_¶ave_m™agemít
(
uöt32_t
 
•i
)

418 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_SSM
;

420 
	`SPI_CR2
(
•i
Ë&~
SPI_CR2_SSOE
;

421 
	}
}

435 
	$•i_£t_nss_high
(
uöt32_t
 
•i
)

437 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_SSI
;

438 
	}
}

449 
	$•i_£t_nss_low
(
uöt32_t
 
•i
)

451 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_SSI
;

452 
	}
}

460 
	$•i_£nd_lsb_fú°
(
uöt32_t
 
•i
)

462 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_LSBFIRST
;

463 
	}
}

471 
	$•i_£nd_msb_fú°
(
uöt32_t
 
•i
)

473 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_LSBFIRST
;

474 
	}
}

486 
	$•i_£t_baudøã_¥esˇÀr
(
uöt32_t
 
•i
, 
uöt8_t
 
baudøã
)

488 
uöt32_t
 
ªg32
;

490 i‡(
baudøã
 > 7) {

494 
ªg32
 = (
	`SPI_CR1
(
•i
) & 0xffc7);

495 
ªg32
 |(
baudøã
 << 3);

496 
	`SPI_CR1
(
•i
Ë
ªg32
;

497 
	}
}

505 
	$•i_£t_ma°î_mode
(
uöt32_t
 
•i
)

507 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_MSTR
;

508 
	}
}

516 
	$•i_£t_¶ave_mode
(
uöt32_t
 
•i
)

518 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_MSTR
;

519 
	}
}

528 
	$•i_£t_˛ock_pﬁ¨ôy_1
(
uöt32_t
 
•i
)

530 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_CPOL
;

531 
	}
}

540 
	$•i_£t_˛ock_pﬁ¨ôy_0
(
uöt32_t
 
•i
)

542 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_CPOL
;

543 
	}
}

552 
	$•i_£t_˛ock_pha£_1
(
uöt32_t
 
•i
)

554 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_CPHA
;

555 
	}
}

564 
	$•i_£t_˛ock_pha£_0
(
uöt32_t
 
•i
)

566 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_CPHA
;

567 
	}
}

575 
	$•i_íabÀ_tx_buf„r_em±y_öãºu±
(
uöt32_t
 
•i
)

577 
	`SPI_CR2
(
•i
Ë|
SPI_CR2_TXEIE
;

578 
	}
}

586 
	$•i_dißbÀ_tx_buf„r_em±y_öãºu±
(
uöt32_t
 
•i
)

588 
	`SPI_CR2
(
•i
Ë&~
SPI_CR2_TXEIE
;

589 
	}
}

597 
	$•i_íabÀ_rx_buf„r_nŸ_em±y_öãºu±
(
uöt32_t
 
•i
)

599 
	`SPI_CR2
(
•i
Ë|
SPI_CR2_RXNEIE
;

600 
	}
}

608 
	$•i_dißbÀ_rx_buf„r_nŸ_em±y_öãºu±
(
uöt32_t
 
•i
)

610 
	`SPI_CR2
(
•i
Ë&~
SPI_CR2_RXNEIE
;

611 
	}
}

619 
	$•i_íabÀ_îr‹_öãºu±
(
uöt32_t
 
•i
)

621 
	`SPI_CR2
(
•i
Ë|
SPI_CR2_ERRIE
;

622 
	}
}

630 
	$•i_dißbÀ_îr‹_öãºu±
(
uöt32_t
 
•i
)

632 
	`SPI_CR2
(
•i
Ë&~
SPI_CR2_ERRIE
;

633 
	}
}

644 
	$•i_íabÀ_ss_ouçut
(
uöt32_t
 
•i
)

646 
	`SPI_CR2
(
•i
Ë|
SPI_CR2_SSOE
;

647 
	}
}

659 
	$•i_dißbÀ_ss_ouçut
(
uöt32_t
 
•i
)

661 
	`SPI_CR2
(
•i
Ë&~
SPI_CR2_SSOE
;

662 
	}
}

674 
	$•i_íabÀ_tx_dma
(
uöt32_t
 
•i
)

676 
	`SPI_CR2
(
•i
Ë|
SPI_CR2_TXDMAEN
;

677 
	}
}

685 
	$•i_dißbÀ_tx_dma
(
uöt32_t
 
•i
)

687 
	`SPI_CR2
(
•i
Ë&~
SPI_CR2_TXDMAEN
;

688 
	}
}

700 
	$•i_íabÀ_rx_dma
(
uöt32_t
 
•i
)

702 
	`SPI_CR2
(
•i
Ë|
SPI_CR2_RXDMAEN
;

703 
	}
}

711 
	$•i_dißbÀ_rx_dma
(
uöt32_t
 
•i
)

713 
	`SPI_CR2
(
•i
Ë&~
SPI_CR2_RXDMAEN
;

714 
	}
}

731 
	$•i_£t_°™d¨d_mode
(
uöt32_t
 
•i
, 
uöt8_t
 
mode
)

733 i‡(
mode
 > 3) {

737 
uöt32_t
 
ªg32
 = 
	`SPI_CR1
(
•i
Ë& ~(
SPI_CR1_CPOL
 | 
SPI_CR1_CPHA
);

738 
	`SPI_CR1
(
•i
Ë
ªg32
 | 
mode
;

739 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\SPI_CO~2.C

54 
	~<lib›ícm3/°m32/•i.h
>

55 
	~<lib›ícm3/°m32/rcc.h
>

94 
	$•i_öô_ma°î
(
uöt32_t
 
•i
, uöt32_à
br
, uöt32_à
˝ﬁ
, uöt32_à
˝ha
,

95 
uöt32_t
 
dff
, uöt32_à
lsbfú°
)

97 
uöt32_t
 
ªg32
 = 
	`SPI_CR1
(
•i
);

100 
ªg32
 &
SPI_CR1_SPE
 | 
SPI_CR1_CRCEN
 | 
SPI_CR1_CRCNEXT
;

102 
ªg32
 |
SPI_CR1_MSTR
;

104 
ªg32
 |
br
;

105 
ªg32
 |
˝ﬁ
;

106 
ªg32
 |
˝ha
;

107 
ªg32
 |
dff
;

108 
ªg32
 |
lsbfú°
;

110 
	`SPI_CR2
(
•i
Ë|
SPI_CR2_SSOE
;

111 
	`SPI_CR1
(
•i
Ë
ªg32
;

114 
	}
}

122 
	$•i_£t_dff_8bô
(
uöt32_t
 
•i
)

124 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_DFF
;

125 
	}
}

133 
	$•i_£t_dff_16bô
(
uöt32_t
 
•i
)

135 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_DFF
;

136 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\ST_USB~1.C

21 
	~<lib›ícm3/cm3/comm⁄.h
>

22 
	~<lib›ícm3/°m32/rcc.h
>

23 
	~<lib›ícm3/°m32/toﬁs.h
>

24 
	~<lib›ícm3/°m32/°_usbfs.h
>

25 
	~<lib›ícm3/usb/usbd.h
>

26 
	~"../../usb/usb_¥iv©e.h
"

27 
	~"°_usbfs_c‹e.h
"

30 
uöt8_t
 
	g°_usbfs_f‹˚_«k
[8];

31 
_usbd_devi˚
 
	g°_usbfs_dev
;

33 
	$°_usbfs_£t_addªss
(
usbd_devi˚
 *
dev
, 
uöt8_t
 
addr
)

35 ()
dev
;

37 
	`SET_REG
(
USB_DADDR_REG
, (
addr
 & 
USB_DADDR_ADDR
Ë| 
USB_DADDR_EF
);

38 
	}
}

46 
	$°_usbfs_£t_ï_rx_bufsize
(
usbd_devi˚
 *
dev
, 
uöt8_t
 
ï
, 
uöt32_t
 
size
)

48 ()
dev
;

49 i‡(
size
 > 62) {

50 i‡(
size
 & 0x1f) {

51 
size
 -= 32;

53 
	`USB_SET_EP_RX_COUNT
(
ï
, (
size
 << 5) | 0x8000);

55 i‡(
size
 & 1) {

56 
size
++;

58 
	`USB_SET_EP_RX_COUNT
(
ï
, 
size
 << 10);

60 
	}
}

62 
°_usbfs_ï_£tup
(
usbd_devi˚
 *
dev
, 
uöt8_t
 
addr
, uöt8_à
ty≥
,

63 
uöt16_t
 
max_size
,

64 (*
ˇŒback
Ë(
usbd_devi˚
 *
usbd_dev
,

65 
uöt8_t
 
ï
))

68 c⁄° 
uöt16_t
 
ty≥lookup
[] = {

69 [
USB_ENDPOINT_ATTR_CONTROL
] = 
USB_EP_TYPE_CONTROL
,

70 [
USB_ENDPOINT_ATTR_ISOCHRONOUS
] = 
USB_EP_TYPE_ISO
,

71 [
USB_ENDPOINT_ATTR_BULK
] = 
USB_EP_TYPE_BULK
,

72 [
USB_ENDPOINT_ATTR_INTERRUPT
] = 
USB_EP_TYPE_INTERRUPT
,

74 
uöt8_t
 
dú
 = 
addr
 & 0x80;

75 
addr
 &= 0x7f;

78 
	`USB_SET_EP_ADDR
(
addr
,áddr);

79 
	`USB_SET_EP_TYPE
(
addr
, 
ty≥lookup
[
ty≥
]);

81 i‡(
dú
 || (
addr
 == 0)) {

82 
	`USB_SET_EP_TX_ADDR
(
addr
, 
dev
->
pm_t›
);

83 i‡(
ˇŒback
) {

84 
dev
->
u£r_ˇŒback_˘r
[
addr
][
USB_TRANSACTION_IN
] =

85 (*)
ˇŒback
;

87 
	`USB_CLR_EP_TX_DTOG
(
addr
);

88 
	`USB_SET_EP_TX_STAT
(
addr
, 
USB_EP_TX_STAT_NAK
);

89 
dev
->
pm_t›
 +
max_size
;

92 i‡(!
dú
) {

93 
	`USB_SET_EP_RX_ADDR
(
addr
, 
dev
->
pm_t›
);

94 
	`°_usbfs_£t_ï_rx_bufsize
(
dev
, 
addr
, 
max_size
);

95 i‡(
ˇŒback
) {

96 
dev
->
u£r_ˇŒback_˘r
[
addr
][
USB_TRANSACTION_OUT
] =

97 (*)
ˇŒback
;

99 
	`USB_CLR_EP_RX_DTOG
(
addr
);

100 
	`USB_SET_EP_RX_STAT
(
addr
, 
USB_EP_RX_STAT_VALID
);

101 
dev
->
pm_t›
 +
max_size
;

103 
	}
}

105 
	$°_usbfs_ídpoöts_ª£t
(
usbd_devi˚
 *
dev
)

107 
i
;

110 
i
 = 1; i < 8; i++) {

111 
	`USB_SET_EP_TX_STAT
(
i
, 
USB_EP_TX_STAT_DISABLED
);

112 
	`USB_SET_EP_RX_STAT
(
i
, 
USB_EP_RX_STAT_DISABLED
);

114 
dev
->
pm_t›
 = 
USBD_PM_TOP
 + (2 * dev->
desc
->
bMaxPackëSize0
);

115 
	}
}

117 
	$°_usbfs_ï_°Æl_£t
(
usbd_devi˚
 *
dev
, 
uöt8_t
 
addr
,

118 
uöt8_t
 
°Æl
)

120 ()
dev
;

121 i‡(
addr
 == 0) {

122 
	`USB_SET_EP_TX_STAT
(
addr
, 
°Æl
 ? 
USB_EP_TX_STAT_STALL
 :

123 
USB_EP_TX_STAT_NAK
);

126 i‡(
addr
 & 0x80) {

127 
addr
 &= 0x7F;

129 
	`USB_SET_EP_TX_STAT
(
addr
, 
°Æl
 ? 
USB_EP_TX_STAT_STALL
 :

130 
USB_EP_TX_STAT_NAK
);

133 i‡(!
°Æl
) {

134 
	`USB_CLR_EP_TX_DTOG
(
addr
);

138 i‡(!
°Æl
) {

139 
	`USB_CLR_EP_RX_DTOG
(
addr
);

142 
	`USB_SET_EP_RX_STAT
(
addr
, 
°Æl
 ? 
USB_EP_RX_STAT_STALL
 :

143 
USB_EP_RX_STAT_VALID
);

145 
	}
}

147 
uöt8_t
 
	$°_usbfs_ï_°Æl_gë
(
usbd_devi˚
 *
dev
, 
uöt8_t
 
addr
)

149 ()
dev
;

150 i‡(
addr
 & 0x80) {

151 i‡((*
	`USB_EP_REG
(
addr
 & 0x7FË& 
USB_EP_TX_STAT
) ==

152 
USB_EP_TX_STAT_STALL
) {

156 i‡((*
	`USB_EP_REG
(
addr
Ë& 
USB_EP_RX_STAT
) ==

157 
USB_EP_RX_STAT_STALL
) {

162 
	}
}

164 
	$°_usbfs_ï_«k_£t
(
usbd_devi˚
 *
dev
, 
uöt8_t
 
addr
, uöt8_à
«k
)

166 ()
dev
;

168 i‡(
addr
 & 0x80) {

172 
°_usbfs_f‹˚_«k
[
addr
] = 
«k
;

174 i‡(
«k
) {

175 
	`USB_SET_EP_RX_STAT
(
addr
, 
USB_EP_RX_STAT_NAK
);

177 
	`USB_SET_EP_RX_STAT
(
addr
, 
USB_EP_RX_STAT_VALID
);

179 
	}
}

181 
uöt16_t
 
	$°_usbfs_ï_wrôe_∑ckë
(
usbd_devi˚
 *
dev
, 
uöt8_t
 
addr
,

182 c⁄° *
buf
, 
uöt16_t
 
Àn
)

184 ()
dev
;

185 
addr
 &= 0x7F;

187 i‡((*
	`USB_EP_REG
(
addr
Ë& 
USB_EP_TX_STAT
Ë=
USB_EP_TX_STAT_VALID
) {

191 
	`°_usbfs_c›y_to_pm
(
	`USB_GET_EP_TX_BUFF
(
addr
), 
buf
, 
Àn
);

192 
	`USB_SET_EP_TX_COUNT
(
addr
, 
Àn
);

193 
	`USB_SET_EP_TX_STAT
(
addr
, 
USB_EP_TX_STAT_VALID
);

195  
Àn
;

196 
	}
}

198 
uöt16_t
 
	$°_usbfs_ï_ªad_∑ckë
(
usbd_devi˚
 *
dev
, 
uöt8_t
 
addr
,

199 *
buf
, 
uöt16_t
 
Àn
)

201 ()
dev
;

202 i‡((*
	`USB_EP_REG
(
addr
Ë& 
USB_EP_RX_STAT
Ë=
USB_EP_RX_STAT_VALID
) {

206 
Àn
 = 
	`MIN
(
	`USB_GET_EP_RX_COUNT
(
addr
) & 0x3ff,Üen);

207 
	`°_usbfs_c›y_‰om_pm
(
buf
, 
	`USB_GET_EP_RX_BUFF
(
addr
), 
Àn
);

208 
	`USB_CLR_EP_RX_CTR
(
addr
);

210 i‡(!
°_usbfs_f‹˚_«k
[
addr
]) {

211 
	`USB_SET_EP_RX_STAT
(
addr
, 
USB_EP_RX_STAT_VALID
);

214  
Àn
;

215 
	}
}

217 
	$°_usbfs_pﬁl
(
usbd_devi˚
 *
dev
)

219 
uöt16_t
 
i°r
 = *
USB_ISTR_REG
;

221 i‡(
i°r
 & 
USB_ISTR_RESET
) {

222 
	`USB_CLR_ISTR_RESET
();

223 
dev
->
pm_t›
 = 
USBD_PM_TOP
;

224 
	`_usbd_ª£t
(
dev
);

228 i‡(
i°r
 & 
USB_ISTR_CTR
) {

229 
uöt8_t
 
ï
 = 
i°r
 & 
USB_ISTR_EP_ID
;

230 
uöt8_t
 
ty≥
;

232 i‡(
i°r
 & 
USB_ISTR_DIR
) {

234 i‡(*
	`USB_EP_REG
(
ï
Ë& 
USB_EP_SETUP
) {

235 
ty≥
 = 
USB_TRANSACTION_SETUP
;

237 
ty≥
 = 
USB_TRANSACTION_OUT
;

240 
ty≥
 = 
USB_TRANSACTION_IN
;

241 
	`USB_CLR_EP_TX_CTR
(
ï
);

244 i‡(
dev
->
u£r_ˇŒback_˘r
[
ï
][
ty≥
]) {

245 
dev
->
u£r_ˇŒback_˘r
[
ï
][
ty≥
] (dev,Ép);

247 
	`USB_CLR_EP_RX_CTR
(
ï
);

251 i‡(
i°r
 & 
USB_ISTR_SUSP
) {

252 
	`USB_CLR_ISTR_SUSP
();

253 i‡(
dev
->
u£r_ˇŒback_su•íd
) {

254 
dev
->
	`u£r_ˇŒback_su•íd
();

258 i‡(
i°r
 & 
USB_ISTR_WKUP
) {

259 
	`USB_CLR_ISTR_WKUP
();

260 i‡(
dev
->
u£r_ˇŒback_ªsume
) {

261 
dev
->
	`u£r_ˇŒback_ªsume
();

265 i‡(
i°r
 & 
USB_ISTR_SOF
) {

266 
	`USB_CLR_ISTR_SOF
();

267 i‡(
dev
->
u£r_ˇŒback_sof
) {

268 
dev
->
	`u£r_ˇŒback_sof
();

272 i‡(
dev
->
u£r_ˇŒback_sof
) {

273 *
USB_CNTR_REG
 |
USB_CNTR_SOFM
;

275 *
USB_CNTR_REG
 &~
USB_CNTR_SOFM
;

277 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\ST_USB~1.H

27 #i‚de‡
ST_USBFS_CORE


28 
	#ST_USBFS_CORE


	)

30 
	~<lib›ícm3/°m32/°_usbfs.h
>

31 
	~<lib›ícm3/usb/usbd.h
>

33 
	#USBD_PM_TOP
 0x40

	)

35 
°_usbfs_£t_addªss
(
usbd_devi˚
 *
dev
, 
uöt8_t
 
addr
);

36 
°_usbfs_£t_ï_rx_bufsize
(
usbd_devi˚
 *
dev
, 
uöt8_t
 
ï
, 
uöt32_t
 
size
);

38 
°_usbfs_ï_£tup
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
,

39 
uöt8_t
 
ty≥
, 
uöt16_t
 
max_size
,

40 (*
ˇŒback
Ë(
usbd_devi˚
 *
usbd_dev
,

41 
uöt8_t
 
ï
));

43 
	`°_usbfs_ídpoöts_ª£t
(
usbd_devi˚
 *
usbd_dev
);

44 
	`°_usbfs_ï_°Æl_£t
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, uöt8_à
°Æl
);

45 
uöt8_t
 
	`°_usbfs_ï_°Æl_gë
(
usbd_devi˚
 *
usbd_dev
, uöt8_à
addr
);

46 
	`°_usbfs_ï_«k_£t
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, uöt8_à
«k
);

47 
uöt16_t
 
	`°_usbfs_ï_wrôe_∑ckë
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
,

48 c⁄° *
buf
, 
uöt16_t
 
Àn
);

49 
uöt16_t
 
	`°_usbfs_ï_ªad_∑ckë
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
,

50 *
buf
, 
uöt16_t
 
Àn
);

51 
	`°_usbfs_pﬁl
(
usbd_devi˚
 *
usbd_dev
);

62 
	`°_usbfs_c›y_‰om_pm
(*
buf
, c⁄° vﬁ©ûê*
vPM
, 
uöt16_t
 
Àn
);

71 
	`°_usbfs_c›y_to_pm
(vﬁ©ûê*
vPM
, c⁄° *
buf
, 
uöt16_t
 
Àn
);

73 
uöt8_t
 
°_usbfs_f‹˚_«k
[8];

74 
_usbd_devi˚
 
°_usbfs_dev
;

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\TIMER_~1.C

114 
	~<lib›ícm3/°m32/timî.h
>

115 
	~<lib›ícm3/°m32/rcc.h
>

117 
	#ADVANCED_TIMERS
 (
	`deföed
(
TIM1_BASE
Ë|| deföed(
TIM8_BASE
))

	)

119 #i‡
deföed
(
TIM8
)

120 
	#TIMER_IS_ADVANCED
(
≥rùh
Ë((’îùhË=
TIM1
Ë|| (’îùhË=
TIM8
))

	)

122 
	#TIMER_IS_ADVANCED
(
≥rùh
Ë(’îùhË=
TIM1
)

	)

135 
	$timî_ª£t
(
uöt32_t
 
timî_≥rùhîÆ
)

137 
timî_≥rùhîÆ
) {

138 #i‡
	`deföed
(
TIM1_BASE
)

139 
TIM1
:

140 
	`rcc_≥rùh_ª£t_pul£
(
RST_TIM1
);

143 
TIM2
:

144 
	`rcc_≥rùh_ª£t_pul£
(
RST_TIM2
);

146 
TIM3
:

147 
	`rcc_≥rùh_ª£t_pul£
(
RST_TIM3
);

149 #i‡
	`deföed
(
TIM4_BASE
)

150 
TIM4
:

151 
	`rcc_≥rùh_ª£t_pul£
(
RST_TIM4
);

154 #i‡
	`deföed
(
TIM5_BASE
)

155 
TIM5
:

156 
	`rcc_≥rùh_ª£t_pul£
(
RST_TIM5
);

159 
TIM6
:

160 
	`rcc_≥rùh_ª£t_pul£
(
RST_TIM6
);

162 
TIM7
:

163 
	`rcc_≥rùh_ª£t_pul£
(
RST_TIM7
);

165 #i‡
	`deföed
(
TIM8_BASE
)

166 
TIM8
:

167 
	`rcc_≥rùh_ª£t_pul£
(
RST_TIM8
);

192 
	}
}

203 
	$timî_íabÀ_úq
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
úq
)

205 
	`TIM_DIER
(
timî_≥rùhîÆ
Ë|
úq
;

206 
	}
}

217 
	$timî_dißbÀ_úq
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
úq
)

219 
	`TIM_DIER
(
timî_≥rùhîÆ
Ë&~
úq
;

220 
	}
}

238 
boﬁ
 
	$timî_öãºu±_sour˚
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
Êag
)

241 i‡(((
	`TIM_SR
(
timî_≥rùhîÆ
) &

242 
	`TIM_DIER
(
timî_≥rùhîÆ
Ë& 
Êag
) == 0) ||

243 (
Êag
 > 
TIM_SR_BIF
)) {

244  
Ál£
;

247 #i‡
ADVANCED_TIMERS


248 i‡((
Êag
 =
TIM_SR_BIF
Ë|| (Êag =
TIM_SR_COMIF
)) {

249  
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
);

252  
åue
;

253 
	}
}

264 
boﬁ
 
	$timî_gë_Êag
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
Êag
)

266 i‡((
	`TIM_SR
(
timî_≥rùhîÆ
Ë& 
Êag
) != 0) {

267  
åue
;

270  
Ál£
;

271 
	}
}

281 
	$timî_˛ór_Êag
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
Êag
)

284 
	`TIM_SR
(
timî_≥rùhîÆ
Ë~
Êag
;

285 
	}
}

315 
	$timî_£t_mode
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
˛ock_div
,

316 
uöt32_t
 
Æignmít
, uöt32_à
dúe˘i⁄
)

318 
uöt32_t
 
¸1
;

320 
¸1
 = 
	`TIM_CR1
(
timî_≥rùhîÆ
);

322 
¸1
 &~(
TIM_CR1_CKD_CK_INT_MASK
 | 
TIM_CR1_CMS_MASK
 | 
TIM_CR1_DIR_DOWN
);

324 
¸1
 |
˛ock_div
 | 
Æignmít
 | 
dúe˘i⁄
;

326 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë
¸1
;

327 
	}
}

341 
	$timî_£t_˛ock_divisi⁄
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
˛ock_div
)

343 
˛ock_div
 &
TIM_CR1_CKD_CK_INT_MASK
;

344 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë&~
TIM_CR1_CKD_CK_INT_MASK
;

345 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë|
˛ock_div
;

346 
	}
}

358 
	$timî_íabÀ_¥ñﬂd
(
uöt32_t
 
timî_≥rùhîÆ
)

360 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë|
TIM_CR1_ARPE
;

361 
	}
}

374 
	$timî_dißbÀ_¥ñﬂd
(
uöt32_t
 
timî_≥rùhîÆ
)

376 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë&~
TIM_CR1_ARPE
;

377 
	}
}

389 
	$timî_£t_Æignmít
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
Æignmít
)

391 
Æignmít
 &
TIM_CR1_CMS_MASK
;

392 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë&~
TIM_CR1_CMS_MASK
;

393 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë|
Æignmít
;

394 
	}
}

405 
	$timî_dúe˘i⁄_up
(
uöt32_t
 
timî_≥rùhîÆ
)

407 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë&~
TIM_CR1_DIR_DOWN
;

408 
	}
}

419 
	$timî_dúe˘i⁄_down
(
uöt32_t
 
timî_≥rùhîÆ
)

421 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë|
TIM_CR1_DIR_DOWN
;

422 
	}
}

431 
	$timî_⁄e_shŸ_mode
(
uöt32_t
 
timî_≥rùhîÆ
)

433 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë|
TIM_CR1_OPM
;

434 
	}
}

443 
	$timî_c⁄töuous_mode
(
uöt32_t
 
timî_≥rùhîÆ
)

445 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë&~
TIM_CR1_OPM
;

446 
	}
}

460 
	$timî_upd©e_⁄_™y
(
uöt32_t
 
timî_≥rùhîÆ
)

462 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë&~
TIM_CR1_URS
;

463 
	}
}

473 
	$timî_upd©e_⁄_ovîÊow
(
uöt32_t
 
timî_≥rùhîÆ
)

475 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë|
TIM_CR1_URS
;

476 
	}
}

485 
	$timî_íabÀ_upd©e_evít
(
uöt32_t
 
timî_≥rùhîÆ
)

487 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë&~
TIM_CR1_UDIS
;

488 
	}
}

499 
	$timî_dißbÀ_upd©e_evít
(
uöt32_t
 
timî_≥rùhîÆ
)

501 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë|
TIM_CR1_UDIS
;

502 
	}
}

513 
	$timî_íabÀ_cou¡î
(
uöt32_t
 
timî_≥rùhîÆ
)

515 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë|
TIM_CR1_CEN
;

516 
	}
}

525 
	$timî_dißbÀ_cou¡î
(
uöt32_t
 
timî_≥rùhîÆ
)

527 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë&~
TIM_CR1_CEN
;

528 
	}
}

546 
	$timî_£t_ouçut_idÀ_°©e
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
ouçuts
)

548 #i‡
ADVANCED_TIMERS


549 i‡(
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

550 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
ouçuts
 & 
TIM_CR2_OIS_MASK
;

553 ()
timî_≥rùhîÆ
;

554 ()
ouçuts
;

556 
	}
}

573 
	$timî_ª£t_ouçut_idÀ_°©e
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
ouçuts
)

575 #i‡
ADVANCED_TIMERS


576 i‡(
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

577 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~(
ouçuts
 & 
TIM_CR2_OIS_MASK
);

580 ()
timî_≥rùhîÆ
;

581 ()
ouçuts
;

583 
	}
}

595 
	$timî_£t_ti1_ch123_x‹
(
uöt32_t
 
timî_≥rùhîÆ
)

597 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
TIM_CR2_TI1S
;

598 
	}
}

609 
	$timî_£t_ti1_ch1
(
uöt32_t
 
timî_≥rùhîÆ
)

611 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~
TIM_CR2_TI1S
;

612 
	}
}

625 
	$timî_£t_ma°î_mode
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
mode
)

627 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~
TIM_CR2_MMS_MASK
;

628 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
mode
;

629 
	}
}

640 
	$timî_£t_dma_⁄_com∑ª_evít
(
uöt32_t
 
timî_≥rùhîÆ
)

642 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~
TIM_CR2_CCDS
;

643 
	}
}

654 
	$timî_£t_dma_⁄_upd©e_evít
(
uöt32_t
 
timî_≥rùhîÆ
)

656 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
TIM_CR2_CCDS
;

657 
	}
}

673 
	$timî_íabÀ_com∑ª_c⁄åﬁ_upd©e_⁄_åiggî
(
uöt32_t
 
timî_≥rùhîÆ
)

675 #i‡
ADVANCED_TIMERS


676 i‡(
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

677 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
TIM_CR2_CCUS
;

680 ()
timî_≥rùhîÆ
;

682 
	}
}

698 
	$timî_dißbÀ_com∑ª_c⁄åﬁ_upd©e_⁄_åiggî
(
uöt32_t
 
timî_≥rùhîÆ
)

700 #i‡
ADVANCED_TIMERS


701 i‡(
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

702 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~
TIM_CR2_CCUS
;

705 ()
timî_≥rùhîÆ
;

707 
	}
}

722 
	$timî_íabÀ_¥ñﬂd_com∂emíåy_íabÀ_bôs
(
uöt32_t
 
timî_≥rùhîÆ
)

724 #i‡
ADVANCED_TIMERS


725 i‡(
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

726 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
TIM_CR2_CCPC
;

729 ()
timî_≥rùhîÆ
;

731 
	}
}

745 
	$timî_dißbÀ_¥ñﬂd_com∂emíåy_íabÀ_bôs
(
uöt32_t
 
timî_≥rùhîÆ
)

747 #i‡
ADVANCED_TIMERS


748 i‡(
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

749 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~
TIM_CR2_CCPC
;

752 ()
timî_≥rùhîÆ
;

754 
	}
}

766 
	$timî_£t_¥esˇÀr
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
vÆue
)

768 
	`TIM_PSC
(
timî_≥rùhîÆ
Ë
vÆue
;

769 
	}
}

784 
	$timî_£t_ª≥tôi⁄_cou¡î
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
vÆue
)

786 #i‡
ADVANCED_TIMERS


787 i‡(
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

788 
	`TIM_RCR
(
timî_≥rùhîÆ
Ë
vÆue
;

791 ()
timî_≥rùhîÆ
;

792 ()
vÆue
;

794 
	}
}

806 
	$timî_£t_≥riod
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
≥riod
)

808 
	`TIM_ARR
(
timî_≥rùhîÆ
Ë
≥riod
;

809 
	}
}

825 
	$timî_íabÀ_oc_˛ór
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
)

827 
oc_id
) {

828 
TIM_OC1
:

829 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC1CE
;

831 
TIM_OC2
:

832 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC2CE
;

834 
TIM_OC3
:

835 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC3CE
;

837 
TIM_OC4
:

838 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC4CE
;

840 
TIM_OC1N
:

841 
TIM_OC2N
:

842 
TIM_OC3N
:

848 
	}
}

859 
	$timî_dißbÀ_oc_˛ór
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
)

861 
oc_id
) {

862 
TIM_OC1
:

863 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_OC1CE
;

865 
TIM_OC2
:

866 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_OC2CE
;

868 
TIM_OC3
:

869 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_OC3CE
;

871 
TIM_OC4
:

872 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_OC4CE
;

874 
TIM_OC1N
:

875 
TIM_OC2N
:

876 
TIM_OC3N
:

882 
	}
}

898 
	$timî_£t_oc_Á°_mode
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
)

900 
oc_id
) {

901 
TIM_OC1
:

902 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC1FE
;

904 
TIM_OC2
:

905 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC2FE
;

907 
TIM_OC3
:

908 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC3FE
;

910 
TIM_OC4
:

911 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC4FE
;

913 
TIM_OC1N
:

914 
TIM_OC2N
:

915 
TIM_OC3N
:

919 
	}
}

933 
	$timî_£t_oc_¶ow_mode
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
)

935 
oc_id
) {

936 
TIM_OC1
:

937 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_OC1FE
;

939 
TIM_OC2
:

940 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_OC2FE
;

942 
TIM_OC3
:

943 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_OC3FE
;

945 
TIM_OC4
:

946 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_OC4FE
;

948 
TIM_OC1N
:

949 
TIM_OC2N
:

950 
TIM_OC3N
:

954 
	}
}

983 
	$timî_£t_oc_mode
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
,

984 
tim_oc_mode
 
oc_mode
)

986 
oc_id
) {

987 
TIM_OC1
:

988 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_CC1S_MASK
;

989 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_CC1S_OUT
;

990 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_OC1M_MASK
;

991 
oc_mode
) {

992 
TIM_OCM_FROZEN
:

993 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC1M_FROZEN
;

995 
TIM_OCM_ACTIVE
:

996 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC1M_ACTIVE
;

998 
TIM_OCM_INACTIVE
:

999 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC1M_INACTIVE
;

1001 
TIM_OCM_TOGGLE
:

1002 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC1M_TOGGLE
;

1004 
TIM_OCM_FORCE_LOW
:

1005 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC1M_FORCE_LOW
;

1007 
TIM_OCM_FORCE_HIGH
:

1008 
	`TIM_CCMR1
(
timî_≥rùhîÆ
) |=

1009 
TIM_CCMR1_OC1M_FORCE_HIGH
;

1011 
TIM_OCM_PWM1
:

1012 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC1M_PWM1
;

1014 
TIM_OCM_PWM2
:

1015 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC1M_PWM2
;

1019 
TIM_OC2
:

1020 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_CC2S_MASK
;

1021 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_CC2S_OUT
;

1022 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_OC2M_MASK
;

1023 
oc_mode
) {

1024 
TIM_OCM_FROZEN
:

1025 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC2M_FROZEN
;

1027 
TIM_OCM_ACTIVE
:

1028 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC2M_ACTIVE
;

1030 
TIM_OCM_INACTIVE
:

1031 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC2M_INACTIVE
;

1033 
TIM_OCM_TOGGLE
:

1034 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC2M_TOGGLE
;

1036 
TIM_OCM_FORCE_LOW
:

1037 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC2M_FORCE_LOW
;

1039 
TIM_OCM_FORCE_HIGH
:

1040 
	`TIM_CCMR1
(
timî_≥rùhîÆ
) |=

1041 
TIM_CCMR1_OC2M_FORCE_HIGH
;

1043 
TIM_OCM_PWM1
:

1044 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC2M_PWM1
;

1046 
TIM_OCM_PWM2
:

1047 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC2M_PWM2
;

1051 
TIM_OC3
:

1052 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_CC3S_MASK
;

1053 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_CC3S_OUT
;

1054 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_OC3M_MASK
;

1055 
oc_mode
) {

1056 
TIM_OCM_FROZEN
:

1057 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC3M_FROZEN
;

1059 
TIM_OCM_ACTIVE
:

1060 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC3M_ACTIVE
;

1062 
TIM_OCM_INACTIVE
:

1063 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC3M_INACTIVE
;

1065 
TIM_OCM_TOGGLE
:

1066 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC3M_TOGGLE
;

1068 
TIM_OCM_FORCE_LOW
:

1069 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC3M_FORCE_LOW
;

1071 
TIM_OCM_FORCE_HIGH
:

1072 
	`TIM_CCMR2
(
timî_≥rùhîÆ
) |=

1073 
TIM_CCMR2_OC3M_FORCE_HIGH
;

1075 
TIM_OCM_PWM1
:

1076 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC3M_PWM1
;

1078 
TIM_OCM_PWM2
:

1079 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC3M_PWM2
;

1083 
TIM_OC4
:

1084 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_CC4S_MASK
;

1085 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_CC4S_OUT
;

1086 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_OC4M_MASK
;

1087 
oc_mode
) {

1088 
TIM_OCM_FROZEN
:

1089 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC4M_FROZEN
;

1091 
TIM_OCM_ACTIVE
:

1092 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC4M_ACTIVE
;

1094 
TIM_OCM_INACTIVE
:

1095 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC4M_INACTIVE
;

1097 
TIM_OCM_TOGGLE
:

1098 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC4M_TOGGLE
;

1100 
TIM_OCM_FORCE_LOW
:

1101 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC4M_FORCE_LOW
;

1103 
TIM_OCM_FORCE_HIGH
:

1104 
	`TIM_CCMR2
(
timî_≥rùhîÆ
) |=

1105 
TIM_CCMR2_OC4M_FORCE_HIGH
;

1107 
TIM_OCM_PWM1
:

1108 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC4M_PWM1
;

1110 
TIM_OCM_PWM2
:

1111 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC4M_PWM2
;

1115 
TIM_OC1N
:

1116 
TIM_OC2N
:

1117 
TIM_OC3N
:

1121 
	}
}

1132 
	$timî_íabÀ_oc_¥ñﬂd
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
)

1134 
oc_id
) {

1135 
TIM_OC1
:

1136 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC1PE
;

1138 
TIM_OC2
:

1139 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC2PE
;

1141 
TIM_OC3
:

1142 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC3PE
;

1144 
TIM_OC4
:

1145 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC4PE
;

1147 
TIM_OC1N
:

1148 
TIM_OC2N
:

1149 
TIM_OC3N
:

1153 
	}
}

1164 
	$timî_dißbÀ_oc_¥ñﬂd
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
)

1166 
oc_id
) {

1167 
TIM_OC1
:

1168 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_OC1PE
;

1170 
TIM_OC2
:

1171 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_OC2PE
;

1173 
TIM_OC3
:

1174 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_OC3PE
;

1176 
TIM_OC4
:

1177 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_OC4PE
;

1179 
TIM_OC1N
:

1180 
TIM_OC2N
:

1181 
TIM_OC3N
:

1185 
	}
}

1199 
	$timî_£t_oc_pﬁ¨ôy_high
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
)

1201 
oc_id
) {

1202 
TIM_OC1
:

1203 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC1P
;

1205 
TIM_OC2
:

1206 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC2P
;

1208 
TIM_OC3
:

1209 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC3P
;

1211 
TIM_OC4
:

1212 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC4P
;

1214 
TIM_OC1N
:

1215 
TIM_OC2N
:

1216 
TIM_OC3N
:

1222 #i‡
ADVANCED_TIMERS


1223 i‡(!
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

1230 
oc_id
) {

1231 
TIM_OC1N
:

1232 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC1NP
;

1234 
TIM_OC2N
:

1235 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC2NP
;

1237 
TIM_OC3N
:

1238 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC3NP
;

1240 
TIM_OC1
:

1241 
TIM_OC2
:

1242 
TIM_OC3
:

1243 
TIM_OC4
:

1247 
	}
}

1261 
	$timî_£t_oc_pﬁ¨ôy_low
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
)

1263 
oc_id
) {

1264 
TIM_OC1
:

1265 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC1P
;

1267 
TIM_OC2
:

1268 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC2P
;

1270 
TIM_OC3
:

1271 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC3P
;

1273 
TIM_OC4
:

1274 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC4P
;

1276 
TIM_OC1N
:

1277 
TIM_OC2N
:

1278 
TIM_OC3N
:

1284 #i‡
ADVANCED_TIMERS


1285 i‡(!
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

1292 
oc_id
) {

1293 
TIM_OC1N
:

1294 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC1NP
;

1296 
TIM_OC2N
:

1297 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC2NP
;

1299 
TIM_OC3N
:

1300 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC3NP
;

1302 
TIM_OC1
:

1303 
TIM_OC2
:

1304 
TIM_OC3
:

1305 
TIM_OC4
:

1309 
	}
}

1323 
	$timî_íabÀ_oc_ouçut
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
)

1325 
oc_id
) {

1326 
TIM_OC1
:

1327 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC1E
;

1329 
TIM_OC2
:

1330 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC2E
;

1332 
TIM_OC3
:

1333 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC3E
;

1335 
TIM_OC4
:

1336 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC4E
;

1338 
TIM_OC1N
:

1339 
TIM_OC2N
:

1340 
TIM_OC3N
:

1346 #i‡
ADVANCED_TIMERS


1347 i‡(!
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

1354 
oc_id
) {

1355 
TIM_OC1N
:

1356 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC1NE
;

1358 
TIM_OC2N
:

1359 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC2NE
;

1361 
TIM_OC3N
:

1362 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC3NE
;

1364 
TIM_OC1
:

1365 
TIM_OC2
:

1366 
TIM_OC3
:

1367 
TIM_OC4
:

1371 
	}
}

1385 
	$timî_dißbÀ_oc_ouçut
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
)

1387 
oc_id
) {

1388 
TIM_OC1
:

1389 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC1E
;

1391 
TIM_OC2
:

1392 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC2E
;

1394 
TIM_OC3
:

1395 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC3E
;

1397 
TIM_OC4
:

1398 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC4E
;

1400 
TIM_OC1N
:

1401 
TIM_OC2N
:

1402 
TIM_OC3N
:

1408 #i‡
ADVANCED_TIMERS


1409 i‡(!
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

1416 
oc_id
) {

1417 
TIM_OC1N
:

1418 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC1NE
;

1420 
TIM_OC2N
:

1421 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC2NE
;

1423 
TIM_OC3N
:

1424 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC3NE
;

1426 
TIM_OC1
:

1427 
TIM_OC2
:

1428 
TIM_OC3
:

1429 
TIM_OC4
:

1433 
	}
}

1450 
	$timî_£t_oc_idÀ_°©e_£t
(
uöt32_t
 
timî_≥rùhîÆ
,

1451 
tim_oc_id
 
oc_id
)

1453 #i‡
ADVANCED_TIMERS


1455 i‡(!
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

1459 
oc_id
) {

1460 
TIM_OC1
:

1461 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
TIM_CR2_OIS1
;

1463 
TIM_OC1N
:

1464 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
TIM_CR2_OIS1N
;

1466 
TIM_OC2
:

1467 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
TIM_CR2_OIS2
;

1469 
TIM_OC2N
:

1470 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
TIM_CR2_OIS2N
;

1472 
TIM_OC3
:

1473 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
TIM_CR2_OIS3
;

1475 
TIM_OC3N
:

1476 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
TIM_CR2_OIS3N
;

1478 
TIM_OC4
:

1479 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
TIM_CR2_OIS4
;

1483 ()
timî_≥rùhîÆ
;

1484 ()
oc_id
;

1486 
	}
}

1503 
	$timî_£t_oc_idÀ_°©e_un£t
(
uöt32_t
 
timî_≥rùhîÆ
,

1504 
tim_oc_id
 
oc_id
)

1506 #i‡
ADVANCED_TIMERS


1508 i‡(!
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

1512 
oc_id
) {

1513 
TIM_OC1
:

1514 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~
TIM_CR2_OIS1
;

1516 
TIM_OC1N
:

1517 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~
TIM_CR2_OIS1N
;

1519 
TIM_OC2
:

1520 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~
TIM_CR2_OIS2
;

1522 
TIM_OC2N
:

1523 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~
TIM_CR2_OIS2N
;

1525 
TIM_OC3
:

1526 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~
TIM_CR2_OIS3
;

1528 
TIM_OC3N
:

1529 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~
TIM_CR2_OIS3N
;

1531 
TIM_OC4
:

1532 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~
TIM_CR2_OIS4
;

1536 ()
timî_≥rùhîÆ
;

1537 ()
oc_id
;

1539 
	}
}

1554 
	$timî_£t_oc_vÆue
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
,

1555 
uöt32_t
 
vÆue
)

1557 
oc_id
) {

1558 
TIM_OC1
:

1559 
	`TIM_CCR1
(
timî_≥rùhîÆ
Ë
vÆue
;

1561 
TIM_OC2
:

1562 
	`TIM_CCR2
(
timî_≥rùhîÆ
Ë
vÆue
;

1564 
TIM_OC3
:

1565 
	`TIM_CCR3
(
timî_≥rùhîÆ
Ë
vÆue
;

1567 
TIM_OC4
:

1568 
	`TIM_CCR4
(
timî_≥rùhîÆ
Ë
vÆue
;

1570 
TIM_OC1N
:

1571 
TIM_OC2N
:

1572 
TIM_OC3N
:

1576 
	}
}

1594 
	$timî_íabÀ_bªak_maö_ouçut
(
uöt32_t
 
timî_≥rùhîÆ
)

1596 #i‡
ADVANCED_TIMERS


1597 i‡(
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

1598 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë|
TIM_BDTR_MOE
;

1601 ()
timî_≥rùhîÆ
;

1603 
	}
}

1617 
	$timî_dißbÀ_bªak_maö_ouçut
(
uöt32_t
 
timî_≥rùhîÆ
)

1619 #i‡
ADVANCED_TIMERS


1620 i‡(
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

1621 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë&~
TIM_BDTR_MOE
;

1624 ()
timî_≥rùhîÆ
;

1626 
	}
}

1641 
	$timî_íabÀ_bªak_autom©ic_ouçut
(
uöt32_t
 
timî_≥rùhîÆ
)

1643 #i‡
ADVANCED_TIMERS


1644 i‡(
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

1645 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë|
TIM_BDTR_AOE
;

1648 ()
timî_≥rùhîÆ
;

1650 
	}
}

1665 
	$timî_dißbÀ_bªak_autom©ic_ouçut
(
uöt32_t
 
timî_≥rùhîÆ
)

1667 #i‡
ADVANCED_TIMERS


1668 i‡(
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

1669 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë&~
TIM_BDTR_AOE
;

1672 ()
timî_≥rùhîÆ
;

1674 
	}
}

1687 
	$timî_£t_bªak_pﬁ¨ôy_high
(
uöt32_t
 
timî_≥rùhîÆ
)

1689 #i‡
ADVANCED_TIMERS


1690 i‡(
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

1691 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë|
TIM_BDTR_BKP
;

1694 ()
timî_≥rùhîÆ
;

1696 
	}
}

1709 
	$timî_£t_bªak_pﬁ¨ôy_low
(
uöt32_t
 
timî_≥rùhîÆ
)

1711 #i‡
ADVANCED_TIMERS


1712 i‡(
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

1713 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë&~
TIM_BDTR_BKP
;

1716 ()
timî_≥rùhîÆ
;

1718 
	}
}

1731 
	$timî_íabÀ_bªak
(
uöt32_t
 
timî_≥rùhîÆ
)

1733 #i‡
ADVANCED_TIMERS


1734 i‡(
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

1735 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë|
TIM_BDTR_BKE
;

1738 ()
timî_≥rùhîÆ
;

1740 
	}
}

1753 
	$timî_dißbÀ_bªak
(
uöt32_t
 
timî_≥rùhîÆ
)

1755 #i‡
ADVANCED_TIMERS


1756 i‡(
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

1757 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë&~
TIM_BDTR_BKE
;

1760 ()
timî_≥rùhîÆ
;

1762 
	}
}

1779 
	$timî_£t_íabÀd_off_°©e_ö_run_mode
(
uöt32_t
 
timî_≥rùhîÆ
)

1781 #i‡
ADVANCED_TIMERS


1782 i‡(
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

1783 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë|
TIM_BDTR_OSSR
;

1786 ()
timî_≥rùhîÆ
;

1788 
	}
}

1804 
	$timî_£t_dißbÀd_off_°©e_ö_run_mode
(
uöt32_t
 
timî_≥rùhîÆ
)

1806 #i‡
ADVANCED_TIMERS


1807 i‡(
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

1808 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë&~
TIM_BDTR_OSSR
;

1811 ()
timî_≥rùhîÆ
;

1813 
	}
}

1828 
	$timî_£t_íabÀd_off_°©e_ö_idÀ_mode
(
uöt32_t
 
timî_≥rùhîÆ
)

1830 #i‡
ADVANCED_TIMERS


1831 i‡(
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

1832 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë|
TIM_BDTR_OSSI
;

1835 ()
timî_≥rùhîÆ
;

1837 
	}
}

1851 
	$timî_£t_dißbÀd_off_°©e_ö_idÀ_mode
(
uöt32_t
 
timî_≥rùhîÆ
)

1853 #i‡
ADVANCED_TIMERS


1854 i‡(
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

1855 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë&~
TIM_BDTR_OSSI
;

1858 ()
timî_≥rùhîÆ
;

1860 
	}
}

1876 
	$timî_£t_bªak_lock
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
lock
)

1878 #i‡
ADVANCED_TIMERS


1879 i‡(
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

1880 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë|
lock
;

1883 ()
timî_≥rùhîÆ
;

1884 ()
lock
;

1886 
	}
}

1908 
	$timî_£t_dódtime
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
dódtime
)

1910 #i‡
ADVANCED_TIMERS


1911 i‡(
	`TIMER_IS_ADVANCED
(
timî_≥rùhîÆ
)) {

1912 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë|
dódtime
;

1915 ()
timî_≥rùhîÆ
;

1916 ()
dódtime
;

1918 
	}
}

1933 
	$timî_gíî©e_evít
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
evít
)

1935 
	`TIM_EGR
(
timî_≥rùhîÆ
Ë|
evít
;

1936 
	}
}

1947 
uöt32_t
 
	$timî_gë_cou¡î
(
uöt32_t
 
timî_≥rùhîÆ
)

1949  
	`TIM_CNT
(
timî_≥rùhîÆ
);

1950 
	}
}

1961 
	$timî_£t_cou¡î
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
cou¡
)

1963 
	`TIM_CNT
(
timî_≥rùhîÆ
Ë
cou¡
;

1964 
	}
}

1980 
	$timî_ic_£t_fûãr
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_ic_id
 
ic
,

1981 
tim_ic_fûãr
 
Êt
)

1983 
ic
) {

1984 
TIM_IC1
:

1985 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_IC1F_MASK
;

1986 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
Êt
 << 4;

1988 
TIM_IC2
:

1989 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_IC2F_MASK
;

1990 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
Êt
 << 12;

1992 
TIM_IC3
:

1993 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_IC3F_MASK
;

1994 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
Êt
 << 4;

1996 
TIM_IC4
:

1997 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_IC4F_MASK
;

1998 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
Êt
 << 12;

2001 
	}
}

2013 
	$timî_ic_£t_¥esˇÀr
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_ic_id
 
ic
,

2014 
tim_ic_psc
 
psc
)

2016 
ic
) {

2017 
TIM_IC1
:

2018 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_IC1PSC_MASK
;

2019 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
psc
 << 2;

2021 
TIM_IC2
:

2022 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_IC2PSC_MASK
;

2023 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
psc
 << 10;

2025 
TIM_IC3
:

2026 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_IC3PSC_MASK
;

2027 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
psc
 << 2;

2029 
TIM_IC4
:

2030 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_IC4PSC_MASK
;

2031 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
psc
 << 10;

2034 
	}
}

2057 
	$timî_ic_£t_öput
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_ic_id
 
ic
,

2058 
tim_ic_öput
 
ö
)

2060 
ö
 &= 3;

2062 i‡(((
ic
 =
TIM_IC2
Ë|| (i¯=
TIM_IC4
)) &&

2063 ((
ö
 =
TIM_IC_IN_TI1
Ë|| (ö =
TIM_IC_IN_TI2
))) {

2065 
ö
 ^= 3;

2068 
ic
) {

2069 
TIM_IC1
:

2070 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_CC1S_MASK
;

2071 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
ö
;

2073 
TIM_IC2
:

2074 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_CC2S_MASK
;

2075 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
ö
 << 8;

2077 
TIM_IC3
:

2078 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_CC3S_MASK
;

2079 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
ö
;

2081 
TIM_IC4
:

2082 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_CC4S_MASK
;

2083 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
ö
 << 8;

2086 
	}
}

2095 
	$timî_ic_íabÀ
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_ic_id
 
ic
)

2097 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|(0x1 << (
ic
 * 4));

2098 
	}
}

2107 
	$timî_ic_dißbÀ
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_ic_id
 
ic
)

2109 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~(0x1 << (
ic
 * 4));

2110 
	}
}

2125 
	$timî_¶ave_£t_fûãr
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_ic_fûãr
 
Êt
)

2127 
	`TIM_SMCR
(
timî_≥rùhîÆ
Ë&~
TIM_SMCR_ETF_MASK
;

2128 
	`TIM_SMCR
(
timî_≥rùhîÆ
Ë|
Êt
 << 8;

2129 
	}
}

2140 
	$timî_¶ave_£t_¥esˇÀr
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_ic_psc
 
psc
)

2142 
	`TIM_SMCR
(
timî_≥rùhîÆ
Ë&~
TIM_SMCR_ETPS_MASK
;

2143 
	`TIM_SMCR
(
timî_≥rùhîÆ
Ë|
psc
 << 12;

2144 
	}
}

2153 
	$timî_¶ave_£t_pﬁ¨ôy
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_ë_pﬁ
 
pﬁ
)

2155 i‡(
pﬁ
) {

2156 
	`TIM_SMCR
(
timî_≥rùhîÆ
Ë|
TIM_SMCR_ETP
;

2158 
	`TIM_SMCR
(
timî_≥rùhîÆ
Ë&~
TIM_SMCR_ETP
;

2160 
	}
}

2169 
	$timî_¶ave_£t_mode
(
uöt32_t
 
timî_≥rùhîÆ
, 
uöt8_t
 
mode
)

2171 
	`TIM_SMCR
(
timî_≥rùhîÆ
Ë&~
TIM_SMCR_SMS_MASK
;

2172 
	`TIM_SMCR
(
timî_≥rùhîÆ
Ë|
mode
;

2173 
	}
}

2182 
	$timî_¶ave_£t_åiggî
(
uöt32_t
 
timî_≥rùhîÆ
, 
uöt8_t
 
åiggî
)

2184 
	`TIM_SMCR
(
timî_≥rùhîÆ
Ë&~
TIM_SMCR_TS_MASK
;

2185 
	`TIM_SMCR
(
timî_≥rùhîÆ
Ë|
åiggî
;

2186 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\USART_~1.C

33 
	~<lib›ícm3/°m32/ußπ.h
>

34 
	~<lib›ícm3/°m32/rcc.h
>

49 
	$ußπ_£t_baudøã
(
uöt32_t
 
ußπ
, uöt32_à
baud
)

51 
uöt32_t
 
˛ock
 = 
rcc_≠b1_‰equícy
;

53 #i‡
deföed
 
STM32F2
 || deföed 
STM32F4


54 i‡((
ußπ
 =
USART1
) ||

55 (
ußπ
 =
USART6
)) {

56 
˛ock
 = 
rcc_≠b2_‰equícy
;

59 i‡(
ußπ
 =
USART1
) {

60 
˛ock
 = 
rcc_≠b2_‰equícy
;

73 
	`USART_BRR
(
ußπ
Ë((2 * 
˛ock
Ë+ 
baud
) / (2 * baud);

74 
	}
}

88 
	$ußπ_£t_d©abôs
(
uöt32_t
 
ußπ
, uöt32_à
bôs
)

90 i‡(
bôs
 == 8) {

91 
	`USART_CR1
(
ußπ
Ë&~
USART_CR1_M
;

93 
	`USART_CR1
(
ußπ
Ë|
USART_CR1_M
;

95 
	}
}

107 
	$ußπ_£t_°›bôs
(
uöt32_t
 
ußπ
, uöt32_à
°›bôs
)

109 
uöt32_t
 
ªg32
;

111 
ªg32
 = 
	`USART_CR2
(
ußπ
);

112 
ªg32
 = (ªg32 & ~
USART_CR2_STOPBITS_MASK
Ë| 
°›bôs
;

113 
	`USART_CR2
(
ußπ
Ë
ªg32
;

114 
	}
}

126 
	$ußπ_£t_∑rôy
(
uöt32_t
 
ußπ
, uöt32_à
∑rôy
)

128 
uöt32_t
 
ªg32
;

130 
ªg32
 = 
	`USART_CR1
(
ußπ
);

131 
ªg32
 = (ªg32 & ~
USART_PARITY_MASK
Ë| 
∑rôy
;

132 
	`USART_CR1
(
ußπ
Ë
ªg32
;

133 
	}
}

145 
	$ußπ_£t_mode
(
uöt32_t
 
ußπ
, uöt32_à
mode
)

147 
uöt32_t
 
ªg32
;

149 
ªg32
 = 
	`USART_CR1
(
ußπ
);

150 
ªg32
 = (ªg32 & ~
USART_MODE_MASK
Ë| 
mode
;

151 
	`USART_CR1
(
ußπ
Ë
ªg32
;

152 
	}
}

164 
	$ußπ_£t_Êow_c⁄åﬁ
(
uöt32_t
 
ußπ
, uöt32_à
Êowc⁄åﬁ
)

166 
uöt32_t
 
ªg32
;

168 
ªg32
 = 
	`USART_CR3
(
ußπ
);

169 
ªg32
 = (ªg32 & ~
USART_FLOWCONTROL_MASK
Ë| 
Êowc⁄åﬁ
;

170 
	`USART_CR3
(
ußπ
Ë
ªg32
;

171 
	}
}

180 
	$ußπ_íabÀ
(
uöt32_t
 
ußπ
)

182 
	`USART_CR1
(
ußπ
Ë|
USART_CR1_UE
;

183 
	}
}

194 
	$ußπ_dißbÀ
(
uöt32_t
 
ußπ
)

196 
	`USART_CR1
(
ußπ
Ë&~
USART_CR1_UE
;

197 
	}
}

210 
	$ußπ_£nd_blockög
(
uöt32_t
 
ußπ
, 
uöt16_t
 
d©a
)

212 
	`ußπ_waô_£nd_ªady
(
ußπ
);

213 
	`ußπ_£nd
(
ußπ
, 
d©a
);

214 
	}
}

226 
uöt16_t
 
	$ußπ_ªcv_blockög
(
uöt32_t
 
ußπ
)

228 
	`ußπ_waô_ªcv_ªady
(
ußπ
);

230  
	`ußπ_ªcv
(
ußπ
);

231 
	}
}

246 
	$ußπ_íabÀ_rx_dma
(
uöt32_t
 
ußπ
)

248 
	`USART_CR3
(
ußπ
Ë|
USART_CR3_DMAR
;

249 
	}
}

258 
	$ußπ_dißbÀ_rx_dma
(
uöt32_t
 
ußπ
)

260 
	`USART_CR3
(
ußπ
Ë&~
USART_CR3_DMAR
;

261 
	}
}

276 
	$ußπ_íabÀ_tx_dma
(
uöt32_t
 
ußπ
)

278 
	`USART_CR3
(
ußπ
Ë|
USART_CR3_DMAT
;

279 
	}
}

288 
	$ußπ_dißbÀ_tx_dma
(
uöt32_t
 
ußπ
)

290 
	`USART_CR3
(
ußπ
Ë&~
USART_CR3_DMAT
;

291 
	}
}

300 
	$ußπ_íabÀ_rx_öãºu±
(
uöt32_t
 
ußπ
)

302 
	`USART_CR1
(
ußπ
Ë|
USART_CR1_RXNEIE
;

303 
	}
}

313 
	$ußπ_dißbÀ_rx_öãºu±
(
uöt32_t
 
ußπ
)

315 
	`USART_CR1
(
ußπ
Ë&~
USART_CR1_RXNEIE
;

316 
	}
}

325 
	$ußπ_íabÀ_tx_öãºu±
(
uöt32_t
 
ußπ
)

327 
	`USART_CR1
(
ußπ
Ë|
USART_CR1_TXEIE
;

328 
	}
}

337 
	$ußπ_dißbÀ_tx_öãºu±
(
uöt32_t
 
ußπ
)

339 
	`USART_CR1
(
ußπ
Ë&~
USART_CR1_TXEIE
;

340 
	}
}

349 
	$ußπ_íabÀ_îr‹_öãºu±
(
uöt32_t
 
ußπ
)

351 
	`USART_CR3
(
ußπ
Ë|
USART_CR3_EIE
;

352 
	}
}

361 
	$ußπ_dißbÀ_îr‹_öãºu±
(
uöt32_t
 
ußπ
)

363 
	`USART_CR3
(
ußπ
Ë&~
USART_CR3_EIE
;

364 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\USART_~2.C

33 
	~<lib›ícm3/°m32/ußπ.h
>

34 
	~<lib›ícm3/°m32/rcc.h
>

44 
	$ußπ_£nd
(
uöt32_t
 
ußπ
, 
uöt16_t
 
d©a
)

47 
	`USART_DR
(
ußπ
Ë(
d©a
 & 
USART_DR_MASK
);

48 
	}
}

61 
uöt16_t
 
	$ußπ_ªcv
(
uöt32_t
 
ußπ
)

64  
	`USART_DR
(
ußπ
Ë& 
USART_DR_MASK
;

65 
	}
}

77 
	$ußπ_waô_£nd_ªady
(
uöt32_t
 
ußπ
)

80 (
	`USART_SR
(
ußπ
Ë& 
USART_SR_TXE
) == 0);

81 
	}
}

92 
	$ußπ_waô_ªcv_ªady
(
uöt32_t
 
ußπ
)

95 (
	`USART_SR
(
ußπ
Ë& 
USART_SR_RXNE
) == 0);

96 
	}
}

107 
boﬁ
 
	$ußπ_gë_Êag
(
uöt32_t
 
ußπ
, uöt32_à
Êag
)

109  ((
	`USART_SR
(
ußπ
Ë& 
Êag
) != 0);

110 
	}
}

129 
boﬁ
 
	$ußπ_gë_öãºu±_sour˚
(
uöt32_t
 
ußπ
, uöt32_à
Êag
)

131 
uöt32_t
 
Êag_£t
 = (
	`USART_SR
(
ußπ
Ë& 
Êag
);

133 i‡((
Êag
 >
USART_SR_IDLE
Ë&& (Êag <
USART_SR_TXE
)) {

134  ((
Êag_£t
 & 
	`USART_CR1
(
ußπ
)) != 0);

136 } i‡(
Êag
 =
USART_SR_ORE
) {

137  
Êag_£t
 && (
	`USART_CR3
(
ußπ
Ë& 
USART_CR3_CTSIE
);

140  
Ál£
;

141 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\desig.c

20 
	~<lib›ícm3/°m32/desig.h
>

22 
uöt16_t
 
	$desig_gë_Êash_size
()

24  
DESIG_FLASH_SIZE
;

25 
	}
}

27 
	$desig_gë_unique_id
(
uöt32_t
 *
ªsu…
)

29 *
ªsu…
++ = 
DESIG_UNIQUE_ID2
;

30 *
ªsu…
++ = 
DESIG_UNIQUE_ID1
;

31 *
ªsu…
 = 
DESIG_UNIQUE_ID0
;

32 
	}
}

34 
	$desig_gë_unique_id_as_°rög
(*
°rög
,

35 
°rög_Àn
)

37 
i
, 
Àn
;

38 
uöt32_t
 
dev_id_buf
[3];

39 
uöt8_t
 *
devi˚_id
 = (uöt8_t*)
dev_id_buf
;

40 c⁄° 
ch¨s
[] = "0123456789ABCDEF";

42 
	`desig_gë_unique_id
(
dev_id_buf
);

45 
Àn
 = (2 * (
dev_id_buf
Ë< 
°rög_Àn
) ?

46 2 * (
dev_id_buf
Ë: 
°rög_Àn
 - 1;

48 
i
 = 0; i < 
Àn
; i += 2) {

49 
°rög
[
i
] = 
ch¨s
[(
devi˚_id
[i / 2] >> 4) & 0x0F];

50 
°rög
[
i
 + 1] = 
ch¨s
[(
devi˚_id
[i / 2] >> 0) & 0x0F];

53 
°rög
[
Àn
] = '\0';

54 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\STM32F~1.LD

23 
	gMEMORY


25 
rom
 (
rx
Ë: 
ORIGIN
 = 0x08000000, 
	gLENGTH
 = 64
K


26 
øm
 (
rwx
Ë: 
ORIGIN
 = 0x20000000, 
	gLENGTH
 = 20
K


30 
INCLUDE
 
	glib›ícm3_°m32f1
.
	gld


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\VECTOR~1.C

14 #ifde‡
LIBOPENCM3_VECTOR_H


15 #¥agm®
wók
 
wwdg_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
pvd_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
èm≥r_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
πc_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
Êash_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
rcc_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
exti0_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
exti1_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
exti2_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
exti3_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
exti4_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
dma1_ch™√l1_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
dma1_ch™√l2_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
dma1_ch™√l3_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
dma1_ch™√l4_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
dma1_ch™√l5_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
dma1_ch™√l6_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
dma1_ch™√l7_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
adc1_2_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
usb_hp_ˇn_tx_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
usb_Õ_ˇn_rx0_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
ˇn_rx1_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
ˇn_s˚_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
exti9_5_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
tim1_brk_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
tim1_up_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
tim1_åg_com_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
tim1_cc_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
tim2_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
tim3_i§
 = 
blockög_h™dÀr


45 #¥agm®
wók
 
tim4_i§
 = 
blockög_h™dÀr


46 #¥agm®
wók
 
i2c1_ev_i§
 = 
blockög_h™dÀr


47 #¥agm®
wók
 
i2c1_î_i§
 = 
blockög_h™dÀr


48 #¥agm®
wók
 
i2c2_ev_i§
 = 
blockög_h™dÀr


49 #¥agm®
wók
 
i2c2_î_i§
 = 
blockög_h™dÀr


50 #¥agm®
wók
 
•i1_i§
 = 
blockög_h™dÀr


51 #¥agm®
wók
 
•i2_i§
 = 
blockög_h™dÀr


52 #¥agm®
wók
 
ußπ1_i§
 = 
blockög_h™dÀr


53 #¥agm®
wók
 
ußπ2_i§
 = 
blockög_h™dÀr


54 #¥agm®
wók
 
ußπ3_i§
 = 
blockög_h™dÀr


55 #¥agm®
wók
 
exti15_10_i§
 = 
blockög_h™dÀr


56 #¥agm®
wók
 
πc_Æ¨m_i§
 = 
blockög_h™dÀr


57 #¥agm®
wók
 
usb_wakeup_i§
 = 
blockög_h™dÀr


58 #¥agm®
wók
 
tim8_brk_i§
 = 
blockög_h™dÀr


59 #¥agm®
wók
 
tim8_up_i§
 = 
blockög_h™dÀr


60 #¥agm®
wók
 
tim8_åg_com_i§
 = 
blockög_h™dÀr


61 #¥agm®
wók
 
tim8_cc_i§
 = 
blockög_h™dÀr


62 #¥agm®
wók
 
adc3_i§
 = 
blockög_h™dÀr


63 #¥agm®
wók
 
fsmc_i§
 = 
blockög_h™dÀr


64 #¥agm®
wók
 
sdio_i§
 = 
blockög_h™dÀr


65 #¥agm®
wók
 
tim5_i§
 = 
blockög_h™dÀr


66 #¥agm®
wók
 
•i3_i§
 = 
blockög_h™dÀr


67 #¥agm®
wók
 
u¨t4_i§
 = 
blockög_h™dÀr


68 #¥agm®
wók
 
u¨t5_i§
 = 
blockög_h™dÀr


69 #¥agm®
wók
 
tim6_i§
 = 
blockög_h™dÀr


70 #¥agm®
wók
 
tim7_i§
 = 
blockög_h™dÀr


71 #¥agm®
wók
 
dma2_ch™√l1_i§
 = 
blockög_h™dÀr


72 #¥agm®
wók
 
dma2_ch™√l2_i§
 = 
blockög_h™dÀr


73 #¥agm®
wók
 
dma2_ch™√l3_i§
 = 
blockög_h™dÀr


74 #¥agm®
wók
 
dma2_ch™√l4_5_i§
 = 
blockög_h™dÀr


75 #¥agm®
wók
 
dma2_ch™√l5_i§
 = 
blockög_h™dÀr


76 #¥agm®
wók
 
ëh_i§
 = 
blockög_h™dÀr


77 #¥agm®
wók
 
ëh_wkup_i§
 = 
blockög_h™dÀr


78 #¥agm®
wók
 
ˇn2_tx_i§
 = 
blockög_h™dÀr


79 #¥agm®
wók
 
ˇn2_rx0_i§
 = 
blockög_h™dÀr


80 #¥agm®
wók
 
ˇn2_rx1_i§
 = 
blockög_h™dÀr


81 #¥agm®
wók
 
ˇn2_s˚_i§
 = 
blockög_h™dÀr


82 #¥agm®
wók
 
Ÿg_fs_i§
 = 
blockög_h™dÀr


91 
	#IRQ_HANDLERS
 \

92 [
NVIC_WWDG_IRQ
] = 
wwdg_i§
, \

93 [
NVIC_PVD_IRQ
] = 
pvd_i§
, \

94 [
NVIC_TAMPER_IRQ
] = 
èm≥r_i§
, \

95 [
NVIC_RTC_IRQ
] = 
πc_i§
, \

96 [
NVIC_FLASH_IRQ
] = 
Êash_i§
, \

97 [
NVIC_RCC_IRQ
] = 
rcc_i§
, \

98 [
NVIC_EXTI0_IRQ
] = 
exti0_i§
, \

99 [
NVIC_EXTI1_IRQ
] = 
exti1_i§
, \

100 [
NVIC_EXTI2_IRQ
] = 
exti2_i§
, \

101 [
NVIC_EXTI3_IRQ
] = 
exti3_i§
, \

102 [
NVIC_EXTI4_IRQ
] = 
exti4_i§
, \

103 [
NVIC_DMA1_CHANNEL1_IRQ
] = 
dma1_ch™√l1_i§
, \

104 [
NVIC_DMA1_CHANNEL2_IRQ
] = 
dma1_ch™√l2_i§
, \

105 [
NVIC_DMA1_CHANNEL3_IRQ
] = 
dma1_ch™√l3_i§
, \

106 [
NVIC_DMA1_CHANNEL4_IRQ
] = 
dma1_ch™√l4_i§
, \

107 [
NVIC_DMA1_CHANNEL5_IRQ
] = 
dma1_ch™√l5_i§
, \

108 [
NVIC_DMA1_CHANNEL6_IRQ
] = 
dma1_ch™√l6_i§
, \

109 [
NVIC_DMA1_CHANNEL7_IRQ
] = 
dma1_ch™√l7_i§
, \

110 [
NVIC_ADC1_2_IRQ
] = 
adc1_2_i§
, \

111 [
NVIC_USB_HP_CAN_TX_IRQ
] = 
usb_hp_ˇn_tx_i§
, \

112 [
NVIC_USB_LP_CAN_RX0_IRQ
] = 
usb_Õ_ˇn_rx0_i§
, \

113 [
NVIC_CAN_RX1_IRQ
] = 
ˇn_rx1_i§
, \

114 [
NVIC_CAN_SCE_IRQ
] = 
ˇn_s˚_i§
, \

115 [
NVIC_EXTI9_5_IRQ
] = 
exti9_5_i§
, \

116 [
NVIC_TIM1_BRK_IRQ
] = 
tim1_brk_i§
, \

117 [
NVIC_TIM1_UP_IRQ
] = 
tim1_up_i§
, \

118 [
NVIC_TIM1_TRG_COM_IRQ
] = 
tim1_åg_com_i§
, \

119 [
NVIC_TIM1_CC_IRQ
] = 
tim1_cc_i§
, \

120 [
NVIC_TIM2_IRQ
] = 
tim2_i§
, \

121 [
NVIC_TIM3_IRQ
] = 
tim3_i§
, \

122 [
NVIC_TIM4_IRQ
] = 
tim4_i§
, \

123 [
NVIC_I2C1_EV_IRQ
] = 
i2c1_ev_i§
, \

124 [
NVIC_I2C1_ER_IRQ
] = 
i2c1_î_i§
, \

125 [
NVIC_I2C2_EV_IRQ
] = 
i2c2_ev_i§
, \

126 [
NVIC_I2C2_ER_IRQ
] = 
i2c2_î_i§
, \

127 [
NVIC_SPI1_IRQ
] = 
•i1_i§
, \

128 [
NVIC_SPI2_IRQ
] = 
•i2_i§
, \

129 [
NVIC_USART1_IRQ
] = 
ußπ1_i§
, \

130 [
NVIC_USART2_IRQ
] = 
ußπ2_i§
, \

131 [
NVIC_USART3_IRQ
] = 
ußπ3_i§
, \

132 [
NVIC_EXTI15_10_IRQ
] = 
exti15_10_i§
, \

133 [
NVIC_RTC_ALARM_IRQ
] = 
πc_Æ¨m_i§
, \

134 [
NVIC_USB_WAKEUP_IRQ
] = 
usb_wakeup_i§
, \

135 [
NVIC_TIM8_BRK_IRQ
] = 
tim8_brk_i§
, \

136 [
NVIC_TIM8_UP_IRQ
] = 
tim8_up_i§
, \

137 [
NVIC_TIM8_TRG_COM_IRQ
] = 
tim8_åg_com_i§
, \

138 [
NVIC_TIM8_CC_IRQ
] = 
tim8_cc_i§
, \

139 [
NVIC_ADC3_IRQ
] = 
adc3_i§
, \

140 [
NVIC_FSMC_IRQ
] = 
fsmc_i§
, \

141 [
NVIC_SDIO_IRQ
] = 
sdio_i§
, \

142 [
NVIC_TIM5_IRQ
] = 
tim5_i§
, \

143 [
NVIC_SPI3_IRQ
] = 
•i3_i§
, \

144 [
NVIC_UART4_IRQ
] = 
u¨t4_i§
, \

145 [
NVIC_UART5_IRQ
] = 
u¨t5_i§
, \

146 [
NVIC_TIM6_IRQ
] = 
tim6_i§
, \

147 [
NVIC_TIM7_IRQ
] = 
tim7_i§
, \

148 [
NVIC_DMA2_CHANNEL1_IRQ
] = 
dma2_ch™√l1_i§
, \

149 [
NVIC_DMA2_CHANNEL2_IRQ
] = 
dma2_ch™√l2_i§
, \

150 [
NVIC_DMA2_CHANNEL3_IRQ
] = 
dma2_ch™√l3_i§
, \

151 [
NVIC_DMA2_CHANNEL4_5_IRQ
] = 
dma2_ch™√l4_5_i§
, \

152 [
NVIC_DMA2_CHANNEL5_IRQ
] = 
dma2_ch™√l5_i§
, \

153 [
NVIC_ETH_IRQ
] = 
ëh_i§
, \

154 [
NVIC_ETH_WKUP_IRQ
] = 
ëh_wkup_i§
, \

155 [
NVIC_CAN2_TX_IRQ
] = 
ˇn2_tx_i§
, \

156 [
NVIC_CAN2_RX0_IRQ
] = 
ˇn2_rx0_i§
, \

157 [
NVIC_CAN2_RX1_IRQ
] = 
ˇn2_rx1_i§
, \

158 [
NVIC_CAN2_SCE_IRQ
] = 
ˇn2_s˚_i§
, \

159 [
NVIC_OTG_FS_IRQ
] = 
Ÿg_fs_i§


	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\adc.c

112 
	~<lib›ícm3/°m32/adc.h
>

125 
	$adc_powî_⁄
(
uöt32_t
 
adc
)

127 i‡(!(
	`ADC_CR2
(
adc
Ë& 
ADC_CR2_ADON
)) {

128 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_ADON
;

130 
	}
}

145 
	$adc_°¨t_c⁄vîsi⁄_dúe˘
(
uöt32_t
 
adc
)

147 i‡(
	`ADC_CR2
(
adc
Ë& 
ADC_CR2_ADON
) {

148 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_ADON
;

150 
	}
}

189 
	$adc_£t_duÆ_mode
(
uöt32_t
 
mode
)

191 
ADC1_CR1
 |
mode
;

192 
	}
}

206 
	$adc_íabÀ_ãm≥øtuª_£ns‹
(
uöt32_t
 
adc
)

208 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_TSVREFE
;

209 
	}
}

221 
	$adc_dißbÀ_ãm≥øtuª_£ns‹
(
uöt32_t
 
adc
)

223 
	`ADC_CR2
(
adc
Ë&~
ADC_CR2_TSVREFE
;

224 
	}
}

258 
	$adc_íabÀ_exã∫Æ_åiggî_ªguœr
(
uöt32_t
 
adc
, uöt32_à
åiggî
)

260 
uöt32_t
 
ªg32
;

262 
ªg32
 = (
	`ADC_CR2
(
adc
Ë& ~(
ADC_CR2_EXTSEL_MASK
));

263 
ªg32
 |(
åiggî
);

264 
	`ADC_CR2
(
adc
Ë
ªg32
;

265 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_EXTTRIG
;

266 
	}
}

275 
	$adc_dißbÀ_exã∫Æ_åiggî_ªguœr
(
uöt32_t
 
adc
)

277 
	`ADC_CR2
(
adc
Ë&~
ADC_CR2_EXTTRIG
;

278 
	}
}

311 
	$adc_íabÀ_exã∫Æ_åiggî_öje˘ed
(
uöt32_t
 
adc
, uöt32_à
åiggî
)

313 
uöt32_t
 
ªg32
;

315 
ªg32
 = (
	`ADC_CR2
(
adc
Ë& ~(
ADC_CR2_JEXTSEL_MASK
));

317 
ªg32
 |(
åiggî
);

318 
	`ADC_CR2
(
adc
Ë
ªg32
;

319 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_JEXTTRIG
;

320 
	}
}

329 
	$adc_dißbÀ_exã∫Æ_åiggî_öje˘ed
(
uöt32_t
 
adc
)

331 
	`ADC_CR2
(
adc
Ë&~
ADC_CR2_JEXTTRIG
;

332 
	}
}

344 
	$adc_ª£t_ˇlibøti⁄
(
uöt32_t
 
adc
)

346 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_RSTCAL
;

347 
	`ADC_CR2
(
adc
Ë& 
ADC_CR2_RSTCAL
);

348 
	}
}

364 
	$adc_ˇlibøti⁄
(
uöt32_t
 
adc
)

366 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_CAL
;

367 
	`ADC_CR2
(
adc
Ë& 
ADC_CR2_CAL
);

368 
	}
}

383 
	$adc_⁄
(
uöt32_t
 
adc
)

385 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_ADON
;

386 
	}
}

402 
	$adc_£t_ßm∂e_time
(
uöt32_t
 
adc
, 
uöt8_t
 
ch™√l
, uöt8_à
time
)

404 
uöt32_t
 
ªg32
;

406 i‡(
ch™√l
 < 10) {

407 
ªg32
 = 
	`ADC_SMPR2
(
adc
);

408 
ªg32
 &~(0x7 << (
ch™√l
 * 3));

409 
ªg32
 |(
time
 << (
ch™√l
 * 3));

410 
	`ADC_SMPR2
(
adc
Ë
ªg32
;

412 
ªg32
 = 
	`ADC_SMPR1
(
adc
);

413 
ªg32
 &~(0x7 << ((
ch™√l
 - 10) * 3));

414 
ªg32
 |(
time
 << ((
ch™√l
 - 10) * 3));

415 
	`ADC_SMPR1
(
adc
Ë
ªg32
;

417 
	}
}

431 
	$adc_£t_ßm∂e_time_⁄_Æl_ch™√ls
(
uöt32_t
 
adc
, 
uöt8_t
 
time
)

433 
uöt8_t
 
i
;

434 
uöt32_t
 
ªg32
 = 0;

436 
i
 = 0; i <= 9; i++) {

437 
ªg32
 |(
time
 << (
i
 * 3));

439 
	`ADC_SMPR2
(
adc
Ë
ªg32
;

441 
i
 = 10; i <= 17; i++) {

442 
ªg32
 |(
time
 << ((
i
 - 10) * 3));

444 
	`ADC_SMPR1
(
adc
Ë
ªg32
;

445 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\crc.c

31 
	~<lib›ícm3/°m32/¸c.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\dac.c

31 
	~<lib›ícm3/°m32/dac.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\dma.c

31 
	~<lib›ícm3/°m32/dma.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\ethernet.c

20 
	~<lib›ícm3/°m32/f1/ëhî√t.h
>

22 
	$ëh_smi_wrôe
(
uöt8_t
 
phy
, uöt8_à
ªg
, 
uöt16_t
 
d©a
)

25 
ETH_MACMIIAR
 &~(
ETH_MACMIIAR_MR
 | 
ETH_MACMIIAR_PA
);

26 
ETH_MACMIIAR
 |(
phy
 << 11Ë| (
ªg
 << 6Ë| 
ETH_MACMIIAR_MW
;

29 
ETH_MACMIIDR
 = 
d©a
;

32 
ETH_MACMIIAR
 |
ETH_MACMIIAR_MB
;

35 
ETH_MACMIIAR
 & 
ETH_MACMIIAR_MB
);

36 
	}
}

38 
uöt16_t
 
	$ëh_smi_ªad
(
uöt8_t
 
phy
, uöt8_à
ªg
)

41 
ETH_MACMIIAR
 &~(
ETH_MACMIIAR_MR
 | 
ETH_MACMIIAR_PA
 | 
ETH_MACMIIAR_MW
);

42 
ETH_MACMIIAR
 |(
phy
 << 11Ë| (
ªg
 << 6);

45 
ETH_MACMIIAR
 |
ETH_MACMIIAR_MB
;

48 
ETH_MACMIIAR
 & 
ETH_MACMIIAR_MB
);

51  (
uöt16_t
)(
ETH_MACMIIDR
);

52 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\flash.c

62 
	~<lib›ícm3/°m32/desig.h
>

63 
	~<lib›ícm3/°m32/Êash.h
>

76 
	$Êash_hÆfcy˛e_íabÀ
()

78 
FLASH_ACR
 |
FLASH_ACR_HLFCYA
;

79 
	}
}

86 
	$Êash_hÆfcy˛e_dißbÀ
()

88 
FLASH_ACR
 &~
FLASH_ACR_HLFCYA
;

89 
	}
}

98 
	$Êash_u∆ock_uµî
()

100 i‡(
DESIG_FLASH_SIZE
 > 512) {

103 
FLASH_CR2
 |
FLASH_CR_LOCK
;

106 
FLASH_KEYR2
 = 
FLASH_KEYR_KEY1
;

107 
FLASH_KEYR2
 = 
FLASH_KEYR_KEY2
;

109 
	}
}

117 
	$Êash_lock_uµî
()

119 
FLASH_CR2
 |
FLASH_CR_LOCK
;

120 
	}
}

127 
	$Êash_˛ór_pgîr_Êag_uµî
()

129 i‡(
DESIG_FLASH_SIZE
 > 512) {

130 
FLASH_SR2
 |
FLASH_SR_PGERR
;

132 
	}
}

139 
	$Êash_˛ór_e›_Êag_uµî
()

141 i‡(
DESIG_FLASH_SIZE
 > 512) {

142 
FLASH_SR2
 |
FLASH_SR_EOP
;

144 
	}
}

151 
	$Êash_˛ór_wΩπîr_Êag_uµî
()

153 i‡(
DESIG_FLASH_SIZE
 > 512) {

154 
FLASH_SR2
 |
FLASH_SR_WRPRTERR
;

156 
	}
}

163 
	$Êash_˛ór_bsy_Êag_uµî
()

165 i‡(
DESIG_FLASH_SIZE
 > 512) {

166 
FLASH_SR2
 &~
FLASH_SR_BSY
;

168 
	}
}

176 
	$Êash_˛ór_°©us_Êags
()

178 
	`Êash_˛ór_pgîr_Êag
();

179 
	`Êash_˛ór_e›_Êag
();

180 
	`Êash_˛ór_wΩπîr_Êag
();

181 
	`Êash_˛ór_bsy_Êag
();

182 i‡(
DESIG_FLASH_SIZE
 > 512) {

183 
	`Êash_˛ór_pgîr_Êag_uµî
();

184 
	`Êash_˛ór_e›_Êag_uµî
();

185 
	`Êash_˛ór_wΩπîr_Êag_uµî
();

186 
	`Êash_˛ór_bsy_Êag_uµî
();

188 
	}
}

203 
uöt32_t
 
	$Êash_gë_°©us_Êags
()

205 
uöt32_t
 
Êags
 = (
FLASH_SR
 & (
FLASH_SR_PGERR
 |

206 
FLASH_SR_EOP
 |

207 
FLASH_SR_WRPRTERR
 |

208 
FLASH_SR_BSY
));

209 i‡(
DESIG_FLASH_SIZE
 > 512) {

210 
Êags
 |(
FLASH_SR2
 & (
FLASH_SR_PGERR
 |

211 
FLASH_SR_EOP
 |

212 
FLASH_SR_WRPRTERR
 |

213 
FLASH_SR_BSY
));

216  
Êags
;

217 
	}
}

232 
	$Êash_¥ogøm_hÆf_w‹d
(
uöt32_t
 
addªss
, 
uöt16_t
 
d©a
)

234 
	`Êash_waô_f‹_œ°_›î©i⁄
();

236 i‡((
DESIG_FLASH_SIZE
 > 512Ë&& (
addªss
 >
FLASH_BASE
+0x00080000)) {

237 
FLASH_CR2
 |
FLASH_CR_PG
;

239 
FLASH_CR
 |
FLASH_CR_PG
;

242 
	`MMIO16
(
addªss
Ë
d©a
;

244 
	`Êash_waô_f‹_œ°_›î©i⁄
();

246 i‡((
DESIG_FLASH_SIZE
 > 512Ë&& (
addªss
 >
FLASH_BASE
+0x00080000)) {

247 
FLASH_CR2
 &~
FLASH_CR_PG
;

249 
FLASH_CR
 &~
FLASH_CR_PG
;

251 
	}
}

266 
	$Êash_îa£_∑ge
(
uöt32_t
 
∑ge_addªss
)

268 
	`Êash_waô_f‹_œ°_›î©i⁄
();

270 i‡((
DESIG_FLASH_SIZE
 > 512)

271 && (
∑ge_addªss
 >
FLASH_BASE
+0x00080000)) {

272 
FLASH_CR2
 |
FLASH_CR_PER
;

273 
FLASH_AR2
 = 
∑ge_addªss
;

274 
FLASH_CR2
 |
FLASH_CR_STRT
;

276 
FLASH_CR
 |
FLASH_CR_PER
;

277 
FLASH_AR
 = 
∑ge_addªss
;

278 
FLASH_CR
 |
FLASH_CR_STRT
;

281 
	`Êash_waô_f‹_œ°_›î©i⁄
();

283 i‡((
DESIG_FLASH_SIZE
 > 512)

284 && (
∑ge_addªss
 >
FLASH_BASE
+0x00080000)) {

285 
FLASH_CR2
 &~
FLASH_CR_PER
;

287 
FLASH_CR
 &~
FLASH_CR_PER
;

289 
	}
}

298 
	$Êash_îa£_Æl_∑ges
()

300 
	`Êash_waô_f‹_œ°_›î©i⁄
();

302 
FLASH_CR
 |
FLASH_CR_MER
;

303 
FLASH_CR
 |
FLASH_CR_STRT
;

305 
	`Êash_waô_f‹_œ°_›î©i⁄
();

306 
FLASH_CR
 &~
FLASH_CR_MER
;

309 
FLASH_CR2
 |
FLASH_CR_MER
;

310 
FLASH_CR2
 |
FLASH_CR_STRT
;

312 
	`Êash_waô_f‹_œ°_›î©i⁄
();

313 
FLASH_CR2
 &~
FLASH_CR_MER
;

314 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\gpio.c

77 
	~<lib›ícm3/°m32/gpio.h
>

95 
	$gpio_£t_mode
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
mode
, uöt8_à
˙f
, 
uöt16_t
 
gpios
)

97 
uöt16_t
 
i
, 
off£t
 = 0;

98 
uöt32_t
 
¸l
 = 0, 
¸h
 = 0, 
tmp32
 = 0;

104 
¸l
 = 
	`GPIO_CRL
(
gpi›‹t
);

105 
¸h
 = 
	`GPIO_CRH
(
gpi›‹t
);

108 
i
 = 0; i < 16; i++) {

110 i‡(!((1 << 
i
Ë& 
gpios
)) {

115 
off£t
 = (
i
 < 8) ? (i * 4) : ((i - 8) * 4);

118 
tmp32
 = (
i
 < 8Ë? 
¸l
 : 
¸h
;

121 
tmp32
 &~(0x‡<< 
off£t
);

122 
tmp32
 |(
mode
 << 
off£t
Ë| (
˙f
 << (offset + 2));

125 
¸l
 = (
i
 < 8Ë? 
tmp32
 : crl;

126 
¸h
 = (
i
 >8Ë? 
tmp32
 : crh;

129 
	`GPIO_CRL
(
gpi›‹t
Ë
¸l
;

130 
	`GPIO_CRH
(
gpi›‹t
Ë
¸h
;

131 
	}
}

141 
	$gpio_£t_evítout
(
uöt8_t
 
evouç‹t
, uöt8_à
evouçö
)

143 
AFIO_EVCR
 = 
AFIO_EVCR_EVOE
 | 
evouç‹t
 | 
evouçö
;

144 
	}
}

169 
	$gpio_¥im¨y_ªm≠
(
uöt32_t
 
swjdißbÀ
, uöt32_à
m≠s
)

176 
uöt32_t
 
ªg
 = 
AFIO_MAPR
 & ~
AFIO_MAPR_SWJ_MASK
;

177 
AFIO_MAPR
 = 
ªg
 | 
swjdißbÀ
 | 
m≠s
;

178 
	}
}

194 
	$gpio_£c⁄d¨y_ªm≠
(
uöt32_t
 
m≠s
)

196 
AFIO_MAPR2
 |
m≠s
;

197 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\i2c.c

31 
	~<lib›ícm3/°m32/i2c.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\iwdg.c

31 
	~<lib›ícm3/°m32/iwdg.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\pwr.c

40 
	~<lib›ícm3/°m32/pwr.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\rcc.c

52 
	~<lib›ícm3/cm3/as£π.h
>

53 
	~<lib›ícm3/°m32/rcc.h
>

54 
	~<lib›ícm3/°m32/Êash.h
>

57 
uöt32_t
 
	grcc_≠b1_‰equícy
 = 8000000;

58 
uöt32_t
 
	grcc_≠b2_‰equícy
 = 8000000;

59 
uöt32_t
 
	grcc_ahb_‰equícy
 = 8000000;

70 
	$rcc_osc_ªady_öt_˛ór
(
rcc_osc
 
osc
)

72 
osc
) {

73 
RCC_PLL
:

74 
RCC_CIR
 |
RCC_CIR_PLLRDYC
;

76 
RCC_PLL2
:

77 
RCC_CIR
 |
RCC_CIR_PLL2RDYC
;

79 
RCC_PLL3
:

80 
RCC_CIR
 |
RCC_CIR_PLL3RDYC
;

82 
RCC_HSE
:

83 
RCC_CIR
 |
RCC_CIR_HSERDYC
;

85 
RCC_HSI
:

86 
RCC_CIR
 |
RCC_CIR_HSIRDYC
;

88 
RCC_LSE
:

89 
RCC_CIR
 |
RCC_CIR_LSERDYC
;

91 
RCC_LSI
:

92 
RCC_CIR
 |
RCC_CIR_LSIRDYC
;

95 
	}
}

103 
	$rcc_osc_ªady_öt_íabÀ
(
rcc_osc
 
osc
)

105 
osc
) {

106 
RCC_PLL
:

107 
RCC_CIR
 |
RCC_CIR_PLLRDYIE
;

109 
RCC_PLL2
:

110 
RCC_CIR
 |
RCC_CIR_PLL2RDYIE
;

112 
RCC_PLL3
:

113 
RCC_CIR
 |
RCC_CIR_PLL3RDYIE
;

115 
RCC_HSE
:

116 
RCC_CIR
 |
RCC_CIR_HSERDYIE
;

118 
RCC_HSI
:

119 
RCC_CIR
 |
RCC_CIR_HSIRDYIE
;

121 
RCC_LSE
:

122 
RCC_CIR
 |
RCC_CIR_LSERDYIE
;

124 
RCC_LSI
:

125 
RCC_CIR
 |
RCC_CIR_LSIRDYIE
;

128 
	}
}

136 
	$rcc_osc_ªady_öt_dißbÀ
(
rcc_osc
 
osc
)

138 
osc
) {

139 
RCC_PLL
:

140 
RCC_CIR
 &~
RCC_CIR_PLLRDYIE
;

142 
RCC_PLL2
:

143 
RCC_CIR
 &~
RCC_CIR_PLL2RDYIE
;

145 
RCC_PLL3
:

146 
RCC_CIR
 &~
RCC_CIR_PLL3RDYIE
;

148 
RCC_HSE
:

149 
RCC_CIR
 &~
RCC_CIR_HSERDYIE
;

151 
RCC_HSI
:

152 
RCC_CIR
 &~
RCC_CIR_HSIRDYIE
;

154 
RCC_LSE
:

155 
RCC_CIR
 &~
RCC_CIR_LSERDYIE
;

157 
RCC_LSI
:

158 
RCC_CIR
 &~
RCC_CIR_LSIRDYIE
;

161 
	}
}

170 
	$rcc_osc_ªady_öt_Êag
(
rcc_osc
 
osc
)

172 
osc
) {

173 
RCC_PLL
:

174  ((
RCC_CIR
 & 
RCC_CIR_PLLRDYF
) != 0);

176 
RCC_PLL2
:

177  ((
RCC_CIR
 & 
RCC_CIR_PLL2RDYF
) != 0);

179 
RCC_PLL3
:

180  ((
RCC_CIR
 & 
RCC_CIR_PLL3RDYF
) != 0);

182 
RCC_HSE
:

183  ((
RCC_CIR
 & 
RCC_CIR_HSERDYF
) != 0);

185 
RCC_HSI
:

186  ((
RCC_CIR
 & 
RCC_CIR_HSIRDYF
) != 0);

188 
RCC_LSE
:

189  ((
RCC_CIR
 & 
RCC_CIR_LSERDYF
) != 0);

191 
RCC_LSI
:

192  ((
RCC_CIR
 & 
RCC_CIR_LSIRDYF
) != 0);

196 
	`cm3_as£π_nŸ_ªached
();

197 
	}
}

204 
	$rcc_css_öt_˛ór
()

206 
RCC_CIR
 |
RCC_CIR_CSSC
;

207 
	}
}

215 
	$rcc_css_öt_Êag
()

217  ((
RCC_CIR
 & 
RCC_CIR_CSSF
) != 0);

218 
	}
}

226 
	$rcc_waô_f‹_osc_ªady
(
rcc_osc
 
osc
)

228 
osc
) {

229 
RCC_PLL
:

230 (
RCC_CR
 & 
RCC_CR_PLLRDY
) == 0);

232 
RCC_PLL2
:

233 (
RCC_CR
 & 
RCC_CR_PLL2RDY
) == 0);

235 
RCC_PLL3
:

236 (
RCC_CR
 & 
RCC_CR_PLL3RDY
) == 0);

238 
RCC_HSE
:

239 (
RCC_CR
 & 
RCC_CR_HSERDY
) == 0);

241 
RCC_HSI
:

242 (
RCC_CR
 & 
RCC_CR_HSIRDY
) == 0);

244 
RCC_LSE
:

245 (
RCC_BDCR
 & 
RCC_BDCR_LSERDY
) == 0);

247 
RCC_LSI
:

248 (
RCC_CSR
 & 
RCC_CSR_LSIRDY
) == 0);

251 
	}
}

268 
	$rcc_osc_⁄
(
rcc_osc
 
osc
)

270 
osc
) {

271 
RCC_PLL
:

272 
RCC_CR
 |
RCC_CR_PLLON
;

274 
RCC_PLL2
:

275 
RCC_CR
 |
RCC_CR_PLL2ON
;

277 
RCC_PLL3
:

278 
RCC_CR
 |
RCC_CR_PLL3ON
;

280 
RCC_HSE
:

281 
RCC_CR
 |
RCC_CR_HSEON
;

283 
RCC_HSI
:

284 
RCC_CR
 |
RCC_CR_HSION
;

286 
RCC_LSE
:

287 
RCC_BDCR
 |
RCC_BDCR_LSEON
;

289 
RCC_LSI
:

290 
RCC_CSR
 |
RCC_CSR_LSION
;

293 
	}
}

309 
	$rcc_osc_off
(
rcc_osc
 
osc
)

311 
osc
) {

312 
RCC_PLL
:

313 
RCC_CR
 &~
RCC_CR_PLLON
;

315 
RCC_PLL2
:

316 
RCC_CR
 &~
RCC_CR_PLL2ON
;

318 
RCC_PLL3
:

319 
RCC_CR
 &~
RCC_CR_PLL3ON
;

321 
RCC_HSE
:

322 
RCC_CR
 &~
RCC_CR_HSEON
;

324 
RCC_HSI
:

325 
RCC_CR
 &~
RCC_CR_HSION
;

327 
RCC_LSE
:

328 
RCC_BDCR
 &~
RCC_BDCR_LSEON
;

330 
RCC_LSI
:

331 
RCC_CSR
 &~
RCC_CSR_LSION
;

334 
	}
}

341 
	$rcc_css_íabÀ
()

343 
RCC_CR
 |
RCC_CR_CSSON
;

344 
	}
}

351 
	$rcc_css_dißbÀ
()

353 
RCC_CR
 &~
RCC_CR_CSSON
;

354 
	}
}

370 
	$rcc_osc_by∑ss_íabÀ
(
rcc_osc
 
osc
)

372 
osc
) {

373 
RCC_HSE
:

374 
RCC_CR
 |
RCC_CR_HSEBYP
;

376 
RCC_LSE
:

377 
RCC_BDCR
 |
RCC_BDCR_LSEBYP
;

379 
RCC_PLL
:

380 
RCC_PLL2
:

381 
RCC_PLL3
:

382 
RCC_HSI
:

383 
RCC_LSI
:

387 
	}
}

403 
	$rcc_osc_by∑ss_dißbÀ
(
rcc_osc
 
osc
)

405 
osc
) {

406 
RCC_HSE
:

407 
RCC_CR
 &~
RCC_CR_HSEBYP
;

409 
RCC_LSE
:

410 
RCC_BDCR
 &~
RCC_BDCR_LSEBYP
;

412 
RCC_PLL
:

413 
RCC_PLL2
:

414 
RCC_PLL3
:

415 
RCC_HSI
:

416 
RCC_LSI
:

420 
	}
}

428 
	$rcc_£t_sys˛k_sour˚
(
uöt32_t
 
˛k
)

430 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_SW
) |

431 (
˛k
 << 
RCC_CFGR_SW_SHIFT
);

432 
	}
}

442 
	$rcc_£t_∂l_mu…ùliˇti⁄_Á˘‹
(
uöt32_t
 
mul
)

444 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_PLLMUL
) |

445 (
mul
 << 
RCC_CFGR_PLLMUL_SHIFT
);

446 
	}
}

456 
	$rcc_£t_∂l2_mu…ùliˇti⁄_Á˘‹
(
uöt32_t
 
mul
)

458 
RCC_CFGR2
 = (RCC_CFGR2 & ~
RCC_CFGR2_PLL2MUL
) |

459 (
mul
 << 
RCC_CFGR2_PLL2MUL_SHIFT
);

460 
	}
}

470 
	$rcc_£t_∂l3_mu…ùliˇti⁄_Á˘‹
(
uöt32_t
 
mul
)

472 
RCC_CFGR2
 = (RCC_CFGR2 & ~
RCC_CFGR2_PLL3MUL
) |

473 (
mul
 << 
RCC_CFGR2_PLL3MUL_SHIFT
);

474 
	}
}

484 
	$rcc_£t_∂l_sour˚
(
uöt32_t
 
∂l§c
)

486 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_PLLSRC
) |

487 (
∂l§c
 << 16);

488 
	}
}

498 
	$rcc_£t_∂lxçª
(
uöt32_t
 
∂lxçª
)

500 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_PLLXTPRE
) |

501 (
∂lxçª
 << 17);

502 
	}
}

510 
uöt32_t
 
	$rcc_πc_˛ock_íabÀd_Êag
()

512  
RCC_BDCR
 & 
RCC_BDCR_RTCEN
;

513 
	}
}

520 
	$rcc_íabÀ_πc_˛ock
()

522 
RCC_BDCR
 |
RCC_BDCR_RTCEN
;

523 
	}
}

531 
	$rcc_£t_πc_˛ock_sour˚
(
rcc_osc
 
˛ock_sour˚
)

533 
uöt32_t
 
ªg32
;

535 
˛ock_sour˚
) {

536 
RCC_LSE
:

538 
RCC_BDCR
 |
RCC_BDCR_LSEON
;

539 (
ªg32
 = (
RCC_BDCR
 & 
RCC_BDCR_LSERDY
)) == 0);

542 
RCC_BDCR
 &= ~((1 << 8) | (1 << 9));

543 
RCC_BDCR
 |= (1 << 8);

545 
RCC_LSI
:

547 
RCC_CSR
 |
RCC_CSR_LSION
;

548 (
ªg32
 = (
RCC_CSR
 & 
RCC_CSR_LSIRDY
)) == 0);

551 
RCC_BDCR
 &= ~((1 << 8) | (1 << 9));

552 
RCC_BDCR
 |= (1 << 9);

554 
RCC_HSE
:

556 
RCC_CR
 |
RCC_CR_HSEON
;

557 (
ªg32
 = (
RCC_CR
 & 
RCC_CR_HSERDY
)) == 0);

560 
RCC_BDCR
 &= ~((1 << 8) | (1 << 9));

561 
RCC_BDCR
 |= (1 << 9) | (1 << 8);

563 
RCC_PLL
:

564 
RCC_PLL2
:

565 
RCC_PLL3
:

566 
RCC_HSI
:

569 
RCC_BDCR
 &= ~((1 << 8) | (1 << 9));

572 
	}
}

582 
	$rcc_£t_ad˝ª
(
uöt32_t
 
ad˝ª
)

584 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_ADCPRE
) |

585 (
ad˝ª
 << 
RCC_CFGR_ADCPRE_SHIFT
);

586 
	}
}

594 
	$rcc_£t_µª2
(
uöt32_t
 
µª2
)

596 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_PPRE2
) |

597 (
µª2
 << 
RCC_CFGR_PPRE2_SHIFT
);

598 
	}
}

608 
	$rcc_£t_µª1
(
uöt32_t
 
µª1
)

610 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_PPRE1
) |

611 (
µª1
 << 
RCC_CFGR_PPRE1_SHIFT
);

613 
	}
}

621 
	$rcc_£t_h¥e
(
uöt32_t
 
h¥e
)

623 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_HPRE
) |

624 (
h¥e
 << 
RCC_CFGR_HPRE_SHIFT
);

626 
	}
}

639 
	$rcc_£t_usb¥e
(
uöt32_t
 
usb¥e
)

641 i‡(
usb¥e
) {

642 
RCC_CFGR
 |
RCC_CFGR_USBPRE
;

644 
RCC_CFGR
 &~
RCC_CFGR_USBPRE
;

646 
	}
}

648 
	$rcc_£t_¥ediv1
(
uöt32_t
 
¥ediv
)

650 
RCC_CFGR2
 = (RCC_CFGR2 & ~
RCC_CFGR2_PREDIV1
) |

651 (
¥ediv
 << 
RCC_CFGR2_PREDIV1_SHIFT
);

652 
	}
}

654 
	$rcc_£t_¥ediv2
(
uöt32_t
 
¥ediv
)

656 
RCC_CFGR2
 = (RCC_CFGR2 & ~
RCC_CFGR2_PREDIV2
) |

657 (
¥ediv
 << 
RCC_CFGR2_PREDIV2_SHIFT
);

658 
	}
}

660 
	$rcc_£t_¥ediv1_sour˚
(
uöt32_t
 
rcc§c
)

662 i‡(
rcc§c
) {

663 
RCC_CFGR2
 |
RCC_CFGR2_PREDIV1SRC
;

665 
RCC_CFGR2
 &~
RCC_CFGR2_PREDIV1SRC
;

667 
	}
}

678 
uöt32_t
 
	$rcc_sy°em_˛ock_sour˚
()

681  (
RCC_CFGR
 & 
RCC_CFGR_SWS
Ë>> 
RCC_CFGR_SWS_SHIFT
;

682 
	}
}

694 
	$rcc_˛ock_£tup_ö_hsi_out_64mhz
()

697 
	`rcc_osc_⁄
(
RCC_HSI
);

698 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI
);

701 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_HSICLK
);

707 
	`rcc_£t_h¥e
(
RCC_CFGR_HPRE_SYSCLK_NODIV
);

708 
	`rcc_£t_ad˝ª
(
RCC_CFGR_ADCPRE_PCLK2_DIV8
);

709 
	`rcc_£t_µª1
(
RCC_CFGR_PPRE1_HCLK_DIV2
);

710 
	`rcc_£t_µª2
(
RCC_CFGR_PPRE2_HCLK_NODIV
);

718 
	`Êash_£t_ws
(
FLASH_ACR_LATENCY_2WS
);

724 
	`rcc_£t_∂l_mu…ùliˇti⁄_Á˘‹
(
RCC_CFGR_PLLMUL_PLL_CLK_MUL16
);

727 
	`rcc_£t_∂l_sour˚
(
RCC_CFGR_PLLSRC_HSI_CLK_DIV2
);

730 
	`rcc_osc_⁄
(
RCC_PLL
);

731 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

734 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_PLLCLK
);

737 
rcc_ahb_‰equícy
 = 64000000;

738 
rcc_≠b1_‰equícy
 = 32000000;

739 
rcc_≠b2_‰equícy
 = 64000000;

740 
	}
}

747 
	$rcc_˛ock_£tup_ö_hsi_out_48mhz
()

750 
	`rcc_osc_⁄
(
RCC_HSI
);

751 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI
);

754 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_HSICLK
);

760 
	`rcc_£t_h¥e
(
RCC_CFGR_HPRE_SYSCLK_NODIV
);

761 
	`rcc_£t_ad˝ª
(
RCC_CFGR_ADCPRE_PCLK2_DIV8
);

762 
	`rcc_£t_µª1
(
RCC_CFGR_PPRE1_HCLK_DIV2
);

763 
	`rcc_£t_µª2
(
RCC_CFGR_PPRE2_HCLK_NODIV
);

764 
	`rcc_£t_usb¥e
(
RCC_CFGR_USBPRE_PLL_CLK_NODIV
);

772 
	`Êash_£t_ws
(
FLASH_ACR_LATENCY_1WS
);

778 
	`rcc_£t_∂l_mu…ùliˇti⁄_Á˘‹
(
RCC_CFGR_PLLMUL_PLL_CLK_MUL12
);

781 
	`rcc_£t_∂l_sour˚
(
RCC_CFGR_PLLSRC_HSI_CLK_DIV2
);

784 
	`rcc_osc_⁄
(
RCC_PLL
);

785 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

788 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_PLLCLK
);

791 
rcc_ahb_‰equícy
 = 48000000;

792 
rcc_≠b1_‰equícy
 = 24000000;

793 
rcc_≠b2_‰equícy
 = 48000000;

794 
	}
}

801 
	$rcc_˛ock_£tup_ö_hsi_out_24mhz
()

804 
	`rcc_osc_⁄
(
RCC_HSI
);

805 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI
);

808 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_HSICLK
);

814 
	`rcc_£t_h¥e
(
RCC_CFGR_HPRE_SYSCLK_NODIV
);

815 
	`rcc_£t_ad˝ª
(
RCC_CFGR_ADCPRE_PCLK2_DIV2
);

816 
	`rcc_£t_µª1
(
RCC_CFGR_PPRE1_HCLK_NODIV
);

817 
	`rcc_£t_µª2
(
RCC_CFGR_PPRE2_HCLK_NODIV
);

825 
	`Êash_£t_ws
(
FLASH_ACR_LATENCY_0WS
);

831 
	`rcc_£t_∂l_mu…ùliˇti⁄_Á˘‹
(
RCC_CFGR_PLLMUL_PLL_CLK_MUL6
);

834 
	`rcc_£t_∂l_sour˚
(
RCC_CFGR_PLLSRC_HSI_CLK_DIV2
);

837 
	`rcc_osc_⁄
(
RCC_PLL
);

838 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

841 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_PLLCLK
);

844 
rcc_ahb_‰equícy
 = 24000000;

845 
rcc_≠b1_‰equícy
 = 24000000;

846 
rcc_≠b2_‰equícy
 = 24000000;

847 
	}
}

854 
	$rcc_˛ock_£tup_ö_h£_8mhz_out_24mhz
()

857 
	`rcc_osc_⁄
(
RCC_HSI
);

858 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI
);

861 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_HSICLK
);

864 
	`rcc_osc_⁄
(
RCC_HSE
);

865 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSE
);

866 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_HSECLK
);

872 
	`rcc_£t_h¥e
(
RCC_CFGR_HPRE_SYSCLK_NODIV
);

873 
	`rcc_£t_ad˝ª
(
RCC_CFGR_ADCPRE_PCLK2_DIV2
);

874 
	`rcc_£t_µª1
(
RCC_CFGR_PPRE1_HCLK_NODIV
);

875 
	`rcc_£t_µª2
(
RCC_CFGR_PPRE2_HCLK_NODIV
);

883 
	`Êash_£t_ws
(
FLASH_ACR_LATENCY_0WS
);

889 
	`rcc_£t_∂l_mu…ùliˇti⁄_Á˘‹
(
RCC_CFGR_PLLMUL_PLL_CLK_MUL3
);

892 
	`rcc_£t_∂l_sour˚
(
RCC_CFGR_PLLSRC_HSE_CLK
);

898 
	`rcc_£t_∂lxçª
(
RCC_CFGR_PLLXTPRE_HSE_CLK
);

901 
	`rcc_osc_⁄
(
RCC_PLL
);

902 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

905 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_PLLCLK
);

908 
rcc_ahb_‰equícy
 = 24000000;

909 
rcc_≠b1_‰equícy
 = 24000000;

910 
rcc_≠b2_‰equícy
 = 24000000;

911 
	}
}

918 
	$rcc_˛ock_£tup_ö_h£_8mhz_out_72mhz
()

921 
	`rcc_osc_⁄
(
RCC_HSI
);

922 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI
);

925 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_HSICLK
);

928 
	`rcc_osc_⁄
(
RCC_HSE
);

929 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSE
);

930 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_HSECLK
);

936 
	`rcc_£t_h¥e
(
RCC_CFGR_HPRE_SYSCLK_NODIV
);

937 
	`rcc_£t_ad˝ª
(
RCC_CFGR_ADCPRE_PCLK2_DIV8
);

938 
	`rcc_£t_µª1
(
RCC_CFGR_PPRE1_HCLK_DIV2
);

939 
	`rcc_£t_µª2
(
RCC_CFGR_PPRE2_HCLK_NODIV
);

947 
	`Êash_£t_ws
(
FLASH_ACR_LATENCY_2WS
);

953 
	`rcc_£t_∂l_mu…ùliˇti⁄_Á˘‹
(
RCC_CFGR_PLLMUL_PLL_CLK_MUL9
);

956 
	`rcc_£t_∂l_sour˚
(
RCC_CFGR_PLLSRC_HSE_CLK
);

962 
	`rcc_£t_∂lxçª
(
RCC_CFGR_PLLXTPRE_HSE_CLK
);

965 
	`rcc_osc_⁄
(
RCC_PLL
);

966 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

969 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_PLLCLK
);

972 
rcc_ahb_‰equícy
 = 72000000;

973 
rcc_≠b1_‰equícy
 = 36000000;

974 
rcc_≠b2_‰equícy
 = 72000000;

975 
	}
}

982 
	$rcc_˛ock_£tup_ö_h£_12mhz_out_72mhz
()

985 
	`rcc_osc_⁄
(
RCC_HSI
);

986 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI
);

989 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_HSICLK
);

992 
	`rcc_osc_⁄
(
RCC_HSE
);

993 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSE
);

994 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_HSECLK
);

1000 
	`rcc_£t_h¥e
(
RCC_CFGR_HPRE_SYSCLK_NODIV
);

1001 
	`rcc_£t_ad˝ª
(
RCC_CFGR_ADCPRE_PCLK2_DIV6
);

1002 
	`rcc_£t_µª1
(
RCC_CFGR_PPRE1_HCLK_DIV2
);

1003 
	`rcc_£t_µª2
(
RCC_CFGR_PPRE2_HCLK_NODIV
);

1011 
	`Êash_£t_ws
(
FLASH_ACR_LATENCY_2WS
);

1017 
	`rcc_£t_∂l_mu…ùliˇti⁄_Á˘‹
(
RCC_CFGR_PLLMUL_PLL_CLK_MUL6
);

1020 
	`rcc_£t_∂l_sour˚
(
RCC_CFGR_PLLSRC_HSE_CLK
);

1026 
	`rcc_£t_∂lxçª
(
RCC_CFGR_PLLXTPRE_HSE_CLK
);

1029 
	`rcc_osc_⁄
(
RCC_PLL
);

1030 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

1033 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_PLLCLK
);

1036 
rcc_ahb_‰equícy
 = 72000000;

1037 
rcc_≠b1_‰equícy
 = 36000000;

1038 
rcc_≠b2_‰equícy
 = 72000000;

1039 
	}
}

1046 
	$rcc_˛ock_£tup_ö_h£_16mhz_out_72mhz
()

1049 
	`rcc_osc_⁄
(
RCC_HSI
);

1050 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI
);

1053 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_HSICLK
);

1056 
	`rcc_osc_⁄
(
RCC_HSE
);

1057 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSE
);

1058 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_HSECLK
);

1064 
	`rcc_£t_h¥e
(
RCC_CFGR_HPRE_SYSCLK_NODIV
);

1065 
	`rcc_£t_ad˝ª
(
RCC_CFGR_ADCPRE_PCLK2_DIV6
);

1066 
	`rcc_£t_µª1
(
RCC_CFGR_PPRE1_HCLK_DIV2
);

1067 
	`rcc_£t_µª2
(
RCC_CFGR_PPRE2_HCLK_NODIV
);

1075 
	`Êash_£t_ws
(
FLASH_ACR_LATENCY_2WS
);

1081 
	`rcc_£t_∂l_mu…ùliˇti⁄_Á˘‹
(
RCC_CFGR_PLLMUL_PLL_CLK_MUL9
);

1084 
	`rcc_£t_∂l_sour˚
(
RCC_CFGR_PLLSRC_HSE_CLK
);

1090 
	`rcc_£t_∂lxçª
(
RCC_CFGR_PLLXTPRE_HSE_CLK_DIV2
);

1093 
	`rcc_osc_⁄
(
RCC_PLL
);

1094 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

1097 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_PLLCLK
);

1100 
rcc_ahb_‰equícy
 = 72000000;

1101 
rcc_≠b1_‰equícy
 = 36000000;

1102 
rcc_≠b2_‰equícy
 = 72000000;

1103 
	}
}

1110 
	$rcc_˛ock_£tup_ö_h£_25mhz_out_72mhz
()

1113 
	`rcc_osc_⁄
(
RCC_HSE
);

1114 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSE
);

1115 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_HSECLK
);

1123 
	`Êash_£t_ws
(
FLASH_ACR_LATENCY_2WS
);

1129 
	`rcc_£t_h¥e
(
RCC_CFGR_HPRE_SYSCLK_NODIV
);

1130 
	`rcc_£t_ad˝ª
(
RCC_CFGR_ADCPRE_PCLK2_DIV6
);

1131 
	`rcc_£t_µª1
(
RCC_CFGR_PPRE1_HCLK_DIV2
);

1132 
	`rcc_£t_µª2
(
RCC_CFGR_PPRE2_HCLK_NODIV
);

1135 
	`rcc_£t_¥ediv2
(
RCC_CFGR2_PREDIV2_DIV5
);

1136 
	`rcc_£t_∂l2_mu…ùliˇti⁄_Á˘‹
(
RCC_CFGR2_PLL2MUL_PLL2_CLK_MUL8
);

1139 
	`rcc_osc_⁄
(
RCC_PLL2
);

1140 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL2
);

1143 
	`rcc_£t_∂lxçª
(
RCC_CFGR_PLLXTPRE_HSE_CLK
);

1144 
	`rcc_£t_¥ediv1_sour˚
(
RCC_CFGR2_PREDIV1SRC_PLL2_CLK
);

1145 
	`rcc_£t_¥ediv1
(
RCC_CFGR2_PREDIV_DIV5
);

1146 
	`rcc_£t_∂l_mu…ùliˇti⁄_Á˘‹
(
RCC_CFGR_PLLMUL_PLL_CLK_MUL9
);

1147 
	`rcc_£t_∂l_sour˚
(
RCC_CFGR_PLLSRC_PREDIV1_CLK
);

1148 
	`rcc_£t_usb¥e
(
RCC_CFGR_USBPRE_PLL_VCO_CLK_DIV3
);

1151 
	`rcc_osc_⁄
(
RCC_PLL
);

1152 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

1155 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_PLLCLK
);

1158 
rcc_ahb_‰equícy
 = 72000000;

1159 
rcc_≠b1_‰equícy
 = 36000000;

1160 
rcc_≠b2_‰equícy
 = 72000000;

1161 
	}
}

1170 
	$rcc_backupdomaö_ª£t
()

1173 
RCC_BDCR
 |
RCC_BDCR_BDRST
;

1176 
RCC_BDCR
 &~
RCC_BDCR_BDRST
;

1177 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\rtc.c

71 
	~<lib›ícm3/°m32/rcc.h
>

72 
	~<lib›ícm3/°m32/πc.h
>

73 
	~<lib›ícm3/°m32/pwr.h
>

85 
	$πc_awake_‰om_off
(
rcc_osc
 
˛ock_sour˚
)

87 
uöt32_t
 
ªg32
;

90 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_PWR
);

91 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_BKP
);

94 
	`pwr_dißbÀ_backup_domaö_wrôe_¥Ÿe˘
();

97 
	`rcc_£t_πc_˛ock_sour˚
(
˛ock_sour˚
);

100 
	`πc_íãr_c⁄fig_mode
();

101 
RTC_CRH
 = 0;

102 
RTC_CRL
 = 0x20;

103 
RTC_PRLH
 = 0;

104 
RTC_PRLL
 = 0;

105 
RTC_CNTH
 = 0;

106 
RTC_CNTL
 = 0;

107 
RTC_ALRH
 = 0xFFFF;

108 
RTC_ALRL
 = 0xFFFF;

109 
	`πc_exô_c⁄fig_mode
();

112 
	`rcc_íabÀ_πc_˛ock
();

115 
RTC_CRL
 &~
RTC_CRL_RSF
;

116 (
ªg32
 = (
RTC_CRL
 & 
RTC_CRL_RSF
)) == 0);

120 (
ªg32
 = (
RTC_CRL
 & 
RTC_CRL_RTOFF
)) == 0);

121 
	}
}

130 
	$πc_íãr_c⁄fig_mode
()

132 
uöt32_t
 
ªg32
;

135 (
ªg32
 = (
RTC_CRL
 & 
RTC_CRL_RTOFF
)) == 0);

138 
RTC_CRL
 |
RTC_CRL_CNF
;

139 
	}
}

147 
	$πc_exô_c⁄fig_mode
()

149 
uöt32_t
 
ªg32
;

152 
RTC_CRL
 &~
RTC_CRL_CNF
;

155 (
ªg32
 = (
RTC_CRL
 & 
RTC_CRL_RTOFF
)) == 0);

156 
	}
}

164 
	$πc_£t_Æ¨m_time
(
uöt32_t
 
Æ¨m_time
)

166 
	`πc_íãr_c⁄fig_mode
();

167 
RTC_ALRL
 = (
Æ¨m_time
 & 0x0000ffff);

168 
RTC_ALRH
 = (
Æ¨m_time
 & 0xffff0000) >> 16;

169 
	`πc_exô_c⁄fig_mode
();

170 
	}
}

177 
	$πc_íabÀ_Æ¨m
()

179 
	`πc_íãr_c⁄fig_mode
();

180 
RTC_CRH
 |
RTC_CRH_ALRIE
;

181 
	`πc_exô_c⁄fig_mode
();

182 
	}
}

189 
	$πc_dißbÀ_Æ¨m
()

191 
	`πc_íãr_c⁄fig_mode
();

192 
RTC_CRH
 &~
RTC_CRH_ALRIE
;

193 
	`πc_exô_c⁄fig_mode
();

194 
	}
}

202 
	$πc_£t_¥esˇÀ_vÆ
(
uöt32_t
 
¥esˇÀ_vÆ
)

204 
	`πc_íãr_c⁄fig_mode
();

205 
RTC_PRLL
 = 
¥esˇÀ_vÆ
 & 0x0000ffff;

206 
RTC_PRLH
 = (
¥esˇÀ_vÆ
 & 0x000f0000) >> 16;

207 
	`πc_exô_c⁄fig_mode
();

208 
	}
}

216 
uöt32_t
 
	$πc_gë_cou¡î_vÆ
()

218  (
RTC_CNTH
 << 16Ë| 
RTC_CNTL
;

219 
	}
}

227 
uöt32_t
 
	$πc_gë_¥esˇÀ_div_vÆ
()

229  (
RTC_DIVH
 << 16Ë| 
RTC_DIVL
;

230 
	}
}

238 
uöt32_t
 
	$πc_gë_Æ¨m_vÆ
()

240  (
RTC_ALRH
 << 16Ë| 
RTC_ALRL
;

241 
	}
}

249 
	$πc_£t_cou¡î_vÆ
(
uöt32_t
 
cou¡î_vÆ
)

251 
	`πc_íãr_c⁄fig_mode
();

252 
RTC_CNTH
 = (
cou¡î_vÆ
 & 0xffff0000) >> 16;

253 
RTC_CNTL
 = 
cou¡î_vÆ
 & 0x0000ffff;

254 
	`πc_exô_c⁄fig_mode
();

255 
	}
}

263 
	$πc_öãºu±_íabÀ
(
πcÊag_t
 
Êag_vÆ
)

265 
	`πc_íãr_c⁄fig_mode
();

268 
Êag_vÆ
) {

269 
RTC_SEC
:

270 
RTC_CRH
 |
RTC_CRH_SECIE
;

272 
RTC_ALR
:

273 
RTC_CRH
 |
RTC_CRH_ALRIE
;

275 
RTC_OW
:

276 
RTC_CRH
 |
RTC_CRH_OWIE
;

280 
	`πc_exô_c⁄fig_mode
();

281 
	}
}

289 
	$πc_öãºu±_dißbÀ
(
πcÊag_t
 
Êag_vÆ
)

291 
	`πc_íãr_c⁄fig_mode
();

294 
Êag_vÆ
) {

295 
RTC_SEC
:

296 
RTC_CRH
 &~
RTC_CRH_SECIE
;

298 
RTC_ALR
:

299 
RTC_CRH
 &~
RTC_CRH_ALRIE
;

301 
RTC_OW
:

302 
RTC_CRH
 &~
RTC_CRH_OWIE
;

306 
	`πc_exô_c⁄fig_mode
();

307 
	}
}

315 
	$πc_˛ór_Êag
(
πcÊag_t
 
Êag_vÆ
)

320 
Êag_vÆ
) {

321 
RTC_SEC
:

322 
RTC_CRL
 &~
RTC_CRL_SECF
;

324 
RTC_ALR
:

325 
RTC_CRL
 &~
RTC_CRL_ALRF
;

327 
RTC_OW
:

328 
RTC_CRL
 &~
RTC_CRL_OWF
;

331 
	}
}

340 
uöt32_t
 
	$πc_check_Êag
(
πcÊag_t
 
Êag_vÆ
)

342 
uöt32_t
 
ªg32
;

345 
Êag_vÆ
) {

346 
RTC_SEC
:

347 
ªg32
 = 
RTC_CRL
 & 
RTC_CRL_SECF
;

349 
RTC_ALR
:

350 
ªg32
 = 
RTC_CRL
 & 
RTC_CRL_ALRF
;

352 
RTC_OW
:

353 
ªg32
 = 
RTC_CRL
 & 
RTC_CRL_OWF
;

356 
ªg32
 = 0;

360  
ªg32
;

361 
	}
}

370 
	$πc_awake_‰om_°™dby
()

372 
uöt32_t
 
ªg32
;

375 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_PWR
);

376 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_BKP
);

379 
	`pwr_dißbÀ_backup_domaö_wrôe_¥Ÿe˘
();

382 
RTC_CRL
 &~
RTC_CRL_RSF
;

383 (
ªg32
 = (
RTC_CRL
 & 
RTC_CRL_RSF
)) == 0);

387 (
ªg32
 = (
RTC_CRL
 & 
RTC_CRL_RTOFF
)) == 0);

388 
	}
}

402 
	$πc_auto_awake
(
rcc_osc
 
˛ock_sour˚
, 
uöt32_t
 
¥esˇÀ_vÆ
)

404 
uöt32_t
 
ªg32
;

407 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_PWR
);

408 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_BKP
);

410 
ªg32
 = 
	`rcc_πc_˛ock_íabÀd_Êag
();

412 i‡(
ªg32
 != 0) {

413 
	`πc_awake_‰om_°™dby
();

415 
	`πc_awake_‰om_off
(
˛ock_sour˚
);

416 
	`πc_£t_¥esˇÀ_vÆ
(
¥esˇÀ_vÆ
);

418 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\spi.c

31 
	~<lib›ícm3/°m32/•i.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\timer.c

38 
	~<lib›ícm3/°m32/timî.h
>

48 
	$timî_ic_£t_pﬁ¨ôy
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_ic_id
 
ic
,

49 
tim_ic_pﬁ
 
pﬁ
)

51 i‡(
pﬁ
) {

52 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|(0x2 << (
ic
 * 4));

54 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~(0x2 << (
ic
 * 4));

56 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\usart.c

31 
	~<lib›ícm3/°m32/ußπ.h
>

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\usb\USB_CO~1.C

38 
	~<°dlib.h
>

39 
	~<lib›ícm3/usb/usbd.h
>

40 
	~"usb_¥iv©e.h
"

47 
	$°Æl_å™ß˘i⁄
(
usbd_devi˚
 *
usbd_dev
)

49 
	`usbd_ï_°Æl_£t
(
usbd_dev
, 0, 1);

50 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 = 
IDLE
;

51 
	}
}

62 
boﬁ
 
	$√eds_zÕ
(
uöt16_t
 
Àn
, uöt16_à
wLígth
, 
uöt8_t
 
ï_size
)

64 i‡(
Àn
 < 
wLígth
) {

65 i‡(
Àn
 && (À¿% 
ï_size
 == 0)) {

66  
åue
;

69  
Ál£
;

70 
	}
}

73 
	$usbd_ªgi°î_c⁄åﬁ_ˇŒback
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ty≥
,

74 
uöt8_t
 
ty≥_mask
,

75 
usbd_c⁄åﬁ_ˇŒback
 
ˇŒback
)

77 
i
;

79 
i
 = 0; i < 
MAX_USER_CONTROL_CALLBACK
; i++) {

80 i‡(
usbd_dev
->
u£r_c⁄åﬁ_ˇŒback
[
i
].
cb
) {

84 
usbd_dev
->
u£r_c⁄åﬁ_ˇŒback
[
i
].
ty≥
 =Åype;

85 
usbd_dev
->
u£r_c⁄åﬁ_ˇŒback
[
i
].
ty≥_mask
 =Åype_mask;

86 
usbd_dev
->
u£r_c⁄åﬁ_ˇŒback
[
i
].
cb
 = 
ˇŒback
;

91 
	}
}

93 
	$usb_c⁄åﬁ_£nd_chunk
(
usbd_devi˚
 *
usbd_dev
)

95 i‡(
usbd_dev
->
desc
->
bMaxPackëSize0
 <

96 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
) {

98 
	`usbd_ï_wrôe_∑ckë
(
usbd_dev
, 0,

99 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_buf
,

100 
usbd_dev
->
desc
->
bMaxPackëSize0
);

101 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 = 
DATA_IN
;

102 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_buf
 +=

103 
usbd_dev
->
desc
->
bMaxPackëSize0
;

104 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
 -=

105 
usbd_dev
->
desc
->
bMaxPackëSize0
;

108 
	`usbd_ï_wrôe_∑ckë
(
usbd_dev
, 0,

109 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_buf
,

110 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
);

112 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 =

113 
usbd_dev
->
c⁄åﬁ_°©e
.
√eds_zÕ
 ?

114 
DATA_IN
 : 
LAST_DATA_IN
;

115 
usbd_dev
->
c⁄åﬁ_°©e
.
√eds_zÕ
 = 
Ál£
;

116 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
 = 0;

117 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_buf
 = 
NULL
;

119 
	}
}

121 
	$usb_c⁄åﬁ_ªcv_chunk
(
usbd_devi˚
 *
usbd_dev
)

123 
uöt16_t
 
∑ckësize
 = 
	`MIN
(
usbd_dev
->
desc
->
bMaxPackëSize0
,

124 
usbd_dev
->
c⁄åﬁ_°©e
.
ªq
.
wLígth
 -

125 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
);

126 
uöt16_t
 
size
 = 
	`usbd_ï_ªad_∑ckë
(
usbd_dev
, 0,

127 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_buf
 +

128 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
,

129 
∑ckësize
);

131 i‡(
size
 !
∑ckësize
) {

132 
	`°Æl_å™ß˘i⁄
(
usbd_dev
);

136 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
 +
size
;

138  
∑ckësize
;

139 
	}
}

141 
	$usb_c⁄åﬁ_ªque°_di•©ch
(
usbd_devi˚
 *
usbd_dev
,

142 
usb_£tup_d©a
 *
ªq
)

144 
i
, 
ªsu…
 = 0;

145 
u£r_c⁄åﬁ_ˇŒback
 *
cb
 = 
usbd_dev
->user_control_callback;

148 
i
 = 0; i < 
MAX_USER_CONTROL_CALLBACK
; i++) {

149 i‡(
cb
[
i
].cb =
NULL
) {

153 i‡((
ªq
->
bmReque°Ty≥
 & 
cb
[
i
].
ty≥_mask
Ë=cb[i].
ty≥
) {

154 
ªsu…
 = 
cb
[
i
].
	`cb
(
usbd_dev
, 
ªq
,

155 &(
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_buf
),

156 &(
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
),

157 &(
usbd_dev
->
c⁄åﬁ_°©e
.
com∂ëe
));

158 i‡(
ªsu…
 =
USBD_REQ_HANDLED
 ||

159 
ªsu…
 =
USBD_REQ_NOTSUPP
) {

160  
ªsu…
;

166  
	`_usbd_°™d¨d_ªque°
(
usbd_dev
, 
ªq
,

167 &(
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_buf
),

168 &(
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
));

169 
	}
}

172 
	$usb_c⁄åﬁ_£tup_ªad
(
usbd_devi˚
 *
usbd_dev
,

173 
usb_£tup_d©a
 *
ªq
)

175 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_buf
 = usbd_dev->ctrl_buf;

176 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
 = 
ªq
->
wLígth
;

178 i‡(
	`usb_c⁄åﬁ_ªque°_di•©ch
(
usbd_dev
, 
ªq
)) {

179 i‡(
ªq
->
wLígth
) {

180 
usbd_dev
->
c⁄åﬁ_°©e
.
√eds_zÕ
 =

181 
	`√eds_zÕ
(
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
,

182 
ªq
->
wLígth
,

183 
usbd_dev
->
desc
->
bMaxPackëSize0
);

185 
	`usb_c⁄åﬁ_£nd_chunk
(
usbd_dev
);

188 
	`usbd_ï_wrôe_∑ckë
(
usbd_dev
, 0, 
NULL
, 0);

189 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 = 
STATUS_IN
;

193 
	`°Æl_å™ß˘i⁄
(
usbd_dev
);

195 
	}
}

197 
	$usb_c⁄åﬁ_£tup_wrôe
(
usbd_devi˚
 *
usbd_dev
,

198 
usb_£tup_d©a
 *
ªq
)

200 i‡(
ªq
->
wLígth
 > 
usbd_dev
->
˘æ_buf_Àn
) {

201 
	`°Æl_å™ß˘i⁄
(
usbd_dev
);

206 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_buf
 = usbd_dev->ctrl_buf;

207 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
 = 0;

209 i‡(
ªq
->
wLígth
 > 
usbd_dev
->
desc
->
bMaxPackëSize0
) {

210 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 = 
DATA_OUT
;

212 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 = 
LAST_DATA_OUT
;

214 
	}
}

219 
	$_usbd_c⁄åﬁ_£tup
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ó
)

221 
usb_£tup_d©a
 *
ªq
 = &
usbd_dev
->
c⁄åﬁ_°©e
.req;

222 ()
ó
;

224 
usbd_dev
->
c⁄åﬁ_°©e
.
com∂ëe
 = 
NULL
;

226 i‡(
	`usbd_ï_ªad_∑ckë
(
usbd_dev
, 0, 
ªq
, 8) != 8) {

227 
	`°Æl_å™ß˘i⁄
(
usbd_dev
);

231 i‡(
ªq
->
wLígth
 == 0) {

232 
	`usb_c⁄åﬁ_£tup_ªad
(
usbd_dev
, 
ªq
);

233 } i‡(
ªq
->
bmReque°Ty≥
 & 0x80) {

234 
	`usb_c⁄åﬁ_£tup_ªad
(
usbd_dev
, 
ªq
);

236 
	`usb_c⁄åﬁ_£tup_wrôe
(
usbd_dev
, 
ªq
);

238 
	}
}

240 
	$_usbd_c⁄åﬁ_out
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ó
)

242 ()
ó
;

244 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
) {

245 
DATA_OUT
:

246 i‡(
	`usb_c⁄åﬁ_ªcv_chunk
(
usbd_dev
) < 0) {

249 i‡((
usbd_dev
->
c⁄åﬁ_°©e
.
ªq
.
wLígth
 -

250 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
) <=

251 
usbd_dev
->
desc
->
bMaxPackëSize0
) {

252 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 = 
LAST_DATA_OUT
;

255 
LAST_DATA_OUT
:

256 i‡(
	`usb_c⁄åﬁ_ªcv_chunk
(
usbd_dev
) < 0) {

263 i‡(
	`usb_c⁄åﬁ_ªque°_di•©ch
(
usbd_dev
,

264 &(
usbd_dev
->
c⁄åﬁ_°©e
.
ªq
))) {

266 
	`usbd_ï_wrôe_∑ckë
(
usbd_dev
, 0, 
NULL
, 0);

267 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 = 
STATUS_IN
;

269 
	`°Æl_å™ß˘i⁄
(
usbd_dev
);

272 
STATUS_OUT
:

273 
	`usbd_ï_ªad_∑ckë
(
usbd_dev
, 0, 
NULL
, 0);

274 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 = 
IDLE
;

275 i‡(
usbd_dev
->
c⁄åﬁ_°©e
.
com∂ëe
) {

276 
usbd_dev
->
c⁄åﬁ_°©e
.
	`com∂ëe
(usbd_dev,

277 &(
usbd_dev
->
c⁄åﬁ_°©e
.
ªq
));

279 
usbd_dev
->
c⁄åﬁ_°©e
.
com∂ëe
 = 
NULL
;

282 
	`°Æl_å™ß˘i⁄
(
usbd_dev
);

284 
	}
}

286 
	$_usbd_c⁄åﬁ_ö
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ó
)

288 ()
ó
;

289 
usb_£tup_d©a
 *
ªq
 = &(
usbd_dev
->
c⁄åﬁ_°©e
.req);

291 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
) {

292 
DATA_IN
:

293 
	`usb_c⁄åﬁ_£nd_chunk
(
usbd_dev
);

295 
LAST_DATA_IN
:

296 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 = 
STATUS_OUT
;

298 
STATUS_IN
:

299 i‡(
usbd_dev
->
c⁄åﬁ_°©e
.
com∂ëe
) {

300 
usbd_dev
->
c⁄åﬁ_°©e
.
	`com∂ëe
(usbd_dev,

301 &(
usbd_dev
->
c⁄åﬁ_°©e
.
ªq
));

305 i‡((
ªq
->
bmReque°Ty≥
 == 0) &&

306 (
ªq
->
bReque°
 =
USB_REQ_SET_ADDRESS
)) {

307 
usbd_dev
->
drivî
->
	`£t_addªss
(usbd_dev, 
ªq
->
wVÆue
);

309 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 = 
IDLE
;

312 
	`°Æl_å™ß˘i⁄
(
usbd_dev
);

314 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\usb\USB_PR~1.H

38 #i‚de‡
__USB_PRIVATE_H


39 
	#__USB_PRIVATE_H


	)

41 
	#MAX_USER_CONTROL_CALLBACK
 4

	)

42 
	#MAX_USER_SET_CONFIG_CALLBACK
 4

	)

44 
	#MIN
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

47 
	s_usbd_devi˚
 {

48 c⁄° 
usb_devi˚_des¸ùt‹
 *
	mdesc
;

49 c⁄° 
usb_c⁄fig_des¸ùt‹
 *
	mc⁄fig
;

50 c⁄° **
	m°rögs
;

51 
	mnum_°rögs
;

53 
uöt8_t
 *
	m˘æ_buf
;

54 
uöt16_t
 
	m˘æ_buf_Àn
;

56 
uöt8_t
 
	mcuºít_addªss
;

57 
uöt8_t
 
	mcuºít_c⁄fig
;

59 
uöt16_t
 
	mpm_t›
;

62 (*
	mu£r_ˇŒback_ª£t
)();

63 (*
	mu£r_ˇŒback_su•íd
)();

64 (*
	mu£r_ˇŒback_ªsume
)();

65 (*
	mu£r_ˇŒback_sof
)();

67 
	susb_c⁄åﬁ_°©e
 {

69 
	mIDLE
, 
	mSTALLED
,

70 
	mDATA_IN
, 
	mLAST_DATA_IN
, 
	mSTATUS_IN
,

71 
	mDATA_OUT
, 
	mLAST_DATA_OUT
, 
	mSTATUS_OUT
,

72 } 
	m°©e
;

73 
usb_£tup_d©a
 
ªq
 
__©åibuã__
((
Æig√d
(4)));

74 
uöt8_t
 *
	m˘æ_buf
;

75 
uöt16_t
 
	m˘æ_Àn
;

76 
usbd_c⁄åﬁ_com∂ëe_ˇŒback
 
	mcom∂ëe
;

77 
boﬁ
 
	m√eds_zÕ
;

78 } 
	mc⁄åﬁ_°©e
;

80 
	su£r_c⁄åﬁ_ˇŒback
 {

81 
usbd_c⁄åﬁ_ˇŒback
 
	mcb
;

82 
uöt8_t
 
	mty≥
;

83 
uöt8_t
 
	mty≥_mask
;

84 } 
	mu£r_c⁄åﬁ_ˇŒback
[
MAX_USER_CONTROL_CALLBACK
];

86 
usbd_ídpoöt_ˇŒback
 
	mu£r_ˇŒback_˘r
[8][3];

89 
usbd_£t_c⁄fig_ˇŒback
 
	mu£r_ˇŒback_£t_c⁄fig
[
MAX_USER_SET_CONFIG_CALLBACK
];

91 
usbd_£t_Æt£âög_ˇŒback
 
	mu£r_ˇŒback_£t_Æt£âög
;

93 c⁄° 
_usbd_drivî
 *
	mdrivî
;

97 
uöt16_t
 
	mfifo_mem_t›
;

98 
uöt16_t
 
	mfifo_mem_t›_ï0
;

99 
uöt8_t
 
	mf‹˚_«k
[4];

104 
uöt32_t
 
	md€±siz
[4];

110 
uöt16_t
 
	mrxb˙t
;

113 
	e_usbd_å™ß˘i⁄
 {

114 
	mUSB_TRANSACTION_IN
,

115 
	mUSB_TRANSACTION_OUT
,

116 
	mUSB_TRANSACTION_SETUP
,

122 
_usbd_c⁄åﬁ_ö
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ó
);

123 
_usbd_c⁄åﬁ_out
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ó
);

124 
_usbd_c⁄åﬁ_£tup
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ó
);

126 
_usbd_°™d¨d_ªque°_devi˚
(
usbd_devi˚
 *
usbd_dev
,

127 
usb_£tup_d©a
 *
ªq
, 
uöt8_t
 **
buf
,

128 
uöt16_t
 *
Àn
);

129 
_usbd_°™d¨d_ªque°_öãrÁ˚
(
usbd_devi˚
 *
usbd_dev
,

130 
usb_£tup_d©a
 *
ªq
, 
uöt8_t
 **
buf
,

131 
uöt16_t
 *
Àn
);

132 
_usbd_°™d¨d_ªque°_ídpoöt
(
usbd_devi˚
 *
usbd_dev
,

133 
usb_£tup_d©a
 *
ªq
, 
uöt8_t
 **
buf
,

134 
uöt16_t
 *
Àn
);

135 
_usbd_°™d¨d_ªque°
(
usbd_devi˚
 *
usbd_dev
, 
usb_£tup_d©a
 *
ªq
,

136 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
);

138 
_usbd_ª£t
(
usbd_devi˚
 *
usbd_dev
);

141 
	s_usbd_drivî
 {

142 
	musbd_devi˚
 *(*
	möô
)();

143 (*
	m£t_addªss
)(
usbd_devi˚
 *
	musbd_dev
, 
uöt8_t
 
	maddr
);

144 (*
	mï_£tup
)(
usbd_devi˚
 *
	musbd_dev
, 
uöt8_t
 
	maddr
, uöt8_à
	mty≥
,

145 
uöt16_t
 
	mmax_size
, 
usbd_ídpoöt_ˇŒback
 
	mcb
);

146 (*
	mï_ª£t
)(
usbd_devi˚
 *
	musbd_dev
);

147 (*
	mï_°Æl_£t
)(
usbd_devi˚
 *
	musbd_dev
, 
uöt8_t
 
	maddr
,

148 
uöt8_t
 
	m°Æl
);

149 (*
	mï_«k_£t
)(
usbd_devi˚
 *
	musbd_dev
, 
uöt8_t
 
	maddr
, uöt8_à
	m«k
);

150 
uöt8_t
 (*
ï_°Æl_gë
)(
usbd_devi˚
 *
	musbd_dev
, uöt8_à
	maddr
);

151 
uöt16_t
 (*
ï_wrôe_∑ckë
)(
usbd_devi˚
 *
	musbd_dev
, 
uöt8_t
 
	maddr
,

152 c⁄° *
	mbuf
, 
uöt16_t
 
	mÀn
);

153 
uöt16_t
 (*
ï_ªad_∑ckë
)(
usbd_devi˚
 *
	musbd_dev
, 
uöt8_t
 
	maddr
,

154 *
	mbuf
, 
uöt16_t
 
	mÀn
);

155 (*
	mpﬁl
)(
usbd_devi˚
 *
	musbd_dev
);

156 (*
	mdisc⁄√˘
)(
usbd_devi˚
 *
	musbd_dev
, 
boﬁ
 
	mdisc⁄√˘ed
);

157 
uöt32_t
 
	mba£_addªss
;

158 
boﬁ
 
	m£t_addªss_bef‹e_°©us
;

159 
uöt16_t
 
	mrx_fifo_size
;

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\usb\USB_ST~1.C

38 
	~<°rög.h
>

39 
	~<lib›ícm3/usb/usbd.h
>

40 
	~"usb_¥iv©e.h
"

42 
	$usbd_ªgi°î_£t_c⁄fig_ˇŒback
(
usbd_devi˚
 *
usbd_dev
,

43 
usbd_£t_c⁄fig_ˇŒback
 
ˇŒback
)

45 
i
;

47 
i
 = 0; i < 
MAX_USER_SET_CONFIG_CALLBACK
; i++) {

48 i‡(
usbd_dev
->
u£r_ˇŒback_£t_c⁄fig
[
i
]) {

52 
usbd_dev
->
u£r_ˇŒback_£t_c⁄fig
[
i
] = 
ˇŒback
;

57 
	}
}

59 
	$usbd_ªgi°î_£t_Æt£âög_ˇŒback
(
usbd_devi˚
 *
usbd_dev
,

60 
usbd_£t_Æt£âög_ˇŒback
 
ˇŒback
)

62 
usbd_dev
->
u£r_ˇŒback_£t_Æt£âög
 = 
ˇŒback
;

63 
	}
}

65 
uöt16_t
 
	$buûd_c⁄fig_des¸ùt‹
(
usbd_devi˚
 *
usbd_dev
,

66 
uöt8_t
 
ödex
, uöt8_à*
buf
, 
uöt16_t
 
Àn
)

68 
uöt8_t
 *
tmpbuf
 = 
buf
;

69 c⁄° 
usb_c⁄fig_des¸ùt‹
 *
cfg
 = &
usbd_dev
->
c⁄fig
[
ödex
];

70 
uöt16_t
 
cou¡
, 
tŸÆ
 = 0, 
tŸÆÀn
 = 0;

71 
uöt16_t
 
i
, 
j
, 
k
;

73 
	`mem˝y
(
buf
, 
cfg
, 
cou¡
 = 
	`MIN
(
Àn
, cfg->
bLígth
));

74 
buf
 +
cou¡
;

75 
Àn
 -
cou¡
;

76 
tŸÆ
 +
cou¡
;

77 
tŸÆÀn
 +
cfg
->
bLígth
;

80 
i
 = 0; i < 
cfg
->
bNumI¡îÁ˚s
; i++) {

82 i‡(
cfg
->
öãrÁ˚
[
i
].
iÁ˚_assoc
) {

83 c⁄° 
usb_iÁ˚_assoc_des¸ùt‹
 *
assoc
 =

84 
cfg
->
öãrÁ˚
[
i
].
iÁ˚_assoc
;

85 
	`mem˝y
(
buf
, 
assoc
, 
cou¡
 = 
	`MIN
(
Àn
,ássoc->
bLígth
));

86 
buf
 +
cou¡
;

87 
Àn
 -
cou¡
;

88 
tŸÆ
 +
cou¡
;

89 
tŸÆÀn
 +
assoc
->
bLígth
;

92 
j
 = 0; j < 
cfg
->
öãrÁ˚
[
i
].
num_Æt£âög
; j++) {

93 c⁄° 
usb_öãrÁ˚_des¸ùt‹
 *
iÁ˚
 =

94 &
cfg
->
öãrÁ˚
[
i
].
Æt£âög
[
j
];

96 
	`mem˝y
(
buf
, 
iÁ˚
, 
cou¡
 = 
	`MIN
(
Àn
, iÁ˚->
bLígth
));

97 
buf
 +
cou¡
;

98 
Àn
 -
cou¡
;

99 
tŸÆ
 +
cou¡
;

100 
tŸÆÀn
 +
iÁ˚
->
bLígth
;

102 i‡(
iÁ˚
->
exåa
) {

103 
	`mem˝y
(
buf
, 
iÁ˚
->
exåa
,

104 
cou¡
 = 
	`MIN
(
Àn
, 
iÁ˚
->
exåÆí
));

105 
buf
 +
cou¡
;

106 
Àn
 -
cou¡
;

107 
tŸÆ
 +
cou¡
;

108 
tŸÆÀn
 +
iÁ˚
->
exåÆí
;

111 
k
 = 0; k < 
iÁ˚
->
bNumEndpoöts
; k++) {

112 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ï
 =

113 &
iÁ˚
->
ídpoöt
[
k
];

114 
	`mem˝y
(
buf
, 
ï
, 
cou¡
 = 
	`MIN
(
Àn
,Ép->
bLígth
));

115 
buf
 +
cou¡
;

116 
Àn
 -
cou¡
;

117 
tŸÆ
 +
cou¡
;

118 
tŸÆÀn
 +
ï
->
bLígth
;

120 i‡(
ï
->
exåa
) {

121 
	`mem˝y
(
buf
, 
ï
->
exåa
,

122 
cou¡
 = 
	`MIN
(
Àn
, 
ï
->
exåÆí
));

123 
buf
 +
cou¡
;

124 
Àn
 -
cou¡
;

125 
tŸÆ
 +
cou¡
;

126 
tŸÆÀn
 +
ï
->
exåÆí
;

133 *(
uöt16_t
 *)(
tmpbuf
 + 2Ë
tŸÆÀn
;

135  
tŸÆ
;

136 
	}
}

138 
	$usb_des¸ùt‹_ty≥
(
uöt16_t
 
wVÆue
)

140  
wVÆue
 >> 8;

141 
	}
}

143 
	$usb_des¸ùt‹_ödex
(
uöt16_t
 
wVÆue
)

145  
wVÆue
 & 0xFF;

146 
	}
}

148 
	$usb_°™d¨d_gë_des¸ùt‹
(
usbd_devi˚
 *
usbd_dev
,

149 
usb_£tup_d©a
 *
ªq
,

150 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
)

152 
i
, 
¨øy_idx
, 
des¸_idx
;

153 
usb_°rög_des¸ùt‹
 *
sd
;

155 
des¸_idx
 = 
	`usb_des¸ùt‹_ödex
(
ªq
->
wVÆue
);

157 
	`usb_des¸ùt‹_ty≥
(
ªq
->
wVÆue
)) {

158 
USB_DT_DEVICE
:

159 *
buf
 = (
uöt8_t
 *Ë
usbd_dev
->
desc
;

160 *
Àn
 = 
	`MIN
(*Àn, 
usbd_dev
->
desc
->
bLígth
);

161  
USBD_REQ_HANDLED
;

162 
USB_DT_CONFIGURATION
:

163 *
buf
 = 
usbd_dev
->
˘æ_buf
;

164 *
Àn
 = 
	`buûd_c⁄fig_des¸ùt‹
(
usbd_dev
, 
des¸_idx
, *
buf
, *len);

165  
USBD_REQ_HANDLED
;

166 
USB_DT_STRING
:

167 
sd
 = (
usb_°rög_des¸ùt‹
 *)
usbd_dev
->
˘æ_buf
;

169 i‡(
des¸_idx
 == 0) {

171 
sd
->
wD©a
[0] = 
USB_LANGID_ENGLISH_US
;

172 
sd
->
bLígth
 = (sd->bLength) +

173 (
sd
->
bDes¸ùt‹Ty≥
) +

174 (
sd
->
wD©a
[0]);

176 *
Àn
 = 
	`MIN
(*Àn, 
sd
->
bLígth
);

178 
¨øy_idx
 = 
des¸_idx
 - 1;

180 i‡(!
usbd_dev
->
°rögs
) {

182  
USBD_REQ_NOTSUPP
;

186 i‡(
¨øy_idx
 >
usbd_dev
->
num_°rögs
) {

187  
USBD_REQ_NOTSUPP
;

192 i‡(
ªq
->
wIndex
 !
USB_LANGID_ENGLISH_US
) {

193  
USBD_REQ_NOTSUPP
;

199 
sd
->
bLígth
 = 
	`°æí
(
usbd_dev
->
°rögs
[
¨øy_idx
]) * 2 +

200 (
sd
->
bLígth
) +

201 (
sd
->
bDes¸ùt‹Ty≥
);

203 *
Àn
 = 
	`MIN
(*Àn, 
sd
->
bLígth
);

205 
i
 = 0; i < (*
Àn
 / 2) - 1; i++) {

206 
sd
->
wD©a
[
i
] =

207 
usbd_dev
->
°rögs
[
¨øy_idx
][
i
];

211 
sd
->
bDes¸ùt‹Ty≥
 = 
USB_DT_STRING
;

212 *
buf
 = (
uöt8_t
 *)
sd
;

214  
USBD_REQ_HANDLED
;

216  
USBD_REQ_NOTSUPP
;

217 
	}
}

219 
	$usb_°™d¨d_£t_addªss
(
usbd_devi˚
 *
usbd_dev
,

220 
usb_£tup_d©a
 *
ªq
, 
uöt8_t
 **
buf
,

221 
uöt16_t
 *
Àn
)

223 ()
ªq
;

224 ()
buf
;

225 ()
Àn
;

228 i‡((
ªq
->
bmReque°Ty≥
 !0Ë|| (ªq->
wVÆue
 >= 128)) {

232 
usbd_dev
->
cuºít_addªss
 = 
ªq
->
wVÆue
;

238 i‡(
usbd_dev
->
drivî
->
£t_addªss_bef‹e_°©us
) {

239 
usbd_dev
->
drivî
->
	`£t_addªss
(usbd_dev, 
ªq
->
wVÆue
);

243 
	}
}

245 
	$usb_°™d¨d_£t_c⁄figuøti⁄
(
usbd_devi˚
 *
usbd_dev
,

246 
usb_£tup_d©a
 *
ªq
,

247 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
)

249 
i
;

250 
found_ödex
 = -1;

251 c⁄° 
usb_c⁄fig_des¸ùt‹
 *
cfg
;

253 ()
ªq
;

254 ()
buf
;

255 ()
Àn
;

257 i‡(
ªq
->
wVÆue
 > 0) {

258 
i
 = 0; i < 
usbd_dev
->
desc
->
bNumC⁄figuøti⁄s
; i++) {

259 i‡(
ªq
->
wVÆue


260 =
usbd_dev
->
c⁄fig
[
i
].
bC⁄figuøti⁄VÆue
) {

261 
found_ödex
 = 
i
;

265 i‡(
found_ödex
 < 0) {

266  
USBD_REQ_NOTSUPP
;

270 
usbd_dev
->
cuºít_c⁄fig
 = 
found_ödex
 + 1;

272 i‡(
usbd_dev
->
cuºít_c⁄fig
 > 0) {

273 
cfg
 = &
usbd_dev
->
c⁄fig
[usbd_dev->
cuºít_c⁄fig
 - 1];

276 
i
 = 0; i < 
cfg
->
bNumI¡îÁ˚s
; i++) {

277 i‡(
cfg
->
öãrÁ˚
[
i
].
cur_Æt£âög
) {

278 *
cfg
->
öãrÁ˚
[
i
].
cur_Æt£âög
 = 0;

284 
usbd_dev
->
drivî
->
	`ï_ª£t
(usbd_dev);

286 i‡(
usbd_dev
->
u£r_ˇŒback_£t_c⁄fig
[0]) {

291 
i
 = 0; i < 
MAX_USER_CONTROL_CALLBACK
; i++) {

292 
usbd_dev
->
u£r_c⁄åﬁ_ˇŒback
[
i
].
cb
 = 
NULL
;

295 
i
 = 0; i < 
MAX_USER_SET_CONFIG_CALLBACK
; i++) {

296 i‡(
usbd_dev
->
u£r_ˇŒback_£t_c⁄fig
[
i
]) {

297 
usbd_dev
->
u£r_ˇŒback_£t_c⁄fig
[
i
](usbd_dev,

298 
ªq
->
wVÆue
);

304 
	}
}

306 
	$usb_°™d¨d_gë_c⁄figuøti⁄
(
usbd_devi˚
 *
usbd_dev
,

307 
usb_£tup_d©a
 *
ªq
,

308 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
)

310 ()
ªq
;

312 i‡(*
Àn
 > 1) {

313 *
Àn
 = 1;

315 i‡(
usbd_dev
->
cuºít_c⁄fig
 > 0) {

316 c⁄° 
usb_c⁄fig_des¸ùt‹
 *
cfg
 =

317 &
usbd_dev
->
c⁄fig
[usbd_dev->
cuºít_c⁄fig
 - 1];

318 (*
buf
)[0] = 
cfg
->
bC⁄figuøti⁄VÆue
;

320 (*
buf
)[0] = 0;

324 
	}
}

326 
	$usb_°™d¨d_£t_öãrÁ˚
(
usbd_devi˚
 *
usbd_dev
,

327 
usb_£tup_d©a
 *
ªq
,

328 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
)

330 c⁄° 
usb_c⁄fig_des¸ùt‹
 *
cfx
 =

331 &
usbd_dev
->
c⁄fig
[usbd_dev->
cuºít_c⁄fig
 - 1];

332 c⁄° 
usb_öãrÁ˚
 *
iÁ˚
;

334 ()
buf
;

336 i‡(
ªq
->
wIndex
 >
cfx
->
bNumI¡îÁ˚s
) {

337  
USBD_REQ_NOTSUPP
;

340 
iÁ˚
 = &
cfx
->
öãrÁ˚
[
ªq
->
wIndex
];

342 i‡(
ªq
->
wVÆue
 >
iÁ˚
->
num_Æt£âög
) {

343  
USBD_REQ_NOTSUPP
;

346 i‡(
iÁ˚
->
cur_Æt£âög
) {

347 *
iÁ˚
->
cur_Æt£âög
 = 
ªq
->
wVÆue
;

348 } i‡(
ªq
->
wVÆue
 > 0) {

349  
USBD_REQ_NOTSUPP
;

352 i‡(
usbd_dev
->
u£r_ˇŒback_£t_Æt£âög
) {

353 
usbd_dev
->
	`u£r_ˇŒback_£t_Æt£âög
(usbd_dev,

354 
ªq
->
wIndex
,

355 
ªq
->
wVÆue
);

358 *
Àn
 = 0;

360  
USBD_REQ_HANDLED
;

361 
	}
}

363 
	$usb_°™d¨d_gë_öãrÁ˚
(
usbd_devi˚
 *
usbd_dev
,

364 
usb_£tup_d©a
 *
ªq
,

365 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
)

367 
uöt8_t
 *
cur_Æt£âög
;

368 c⁄° 
usb_c⁄fig_des¸ùt‹
 *
cfx
 =

369 &
usbd_dev
->
c⁄fig
[usbd_dev->
cuºít_c⁄fig
 - 1];

371 i‡(
ªq
->
wIndex
 >
cfx
->
bNumI¡îÁ˚s
) {

372  
USBD_REQ_NOTSUPP
;

375 *
Àn
 = 1;

376 
cur_Æt£âög
 = 
cfx
->
öãrÁ˚
[
ªq
->
wIndex
].cur_altsetting;

377 (*
buf
)[0] = (
cur_Æt£âög
) ? *cur_altsetting : 0;

379  
USBD_REQ_HANDLED
;

380 
	}
}

382 
	$usb_°™d¨d_devi˚_gë_°©us
(
usbd_devi˚
 *
usbd_dev
,

383 
usb_£tup_d©a
 *
ªq
,

384 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
)

386 ()
usbd_dev
;

387 ()
ªq
;

391 i‡(*
Àn
 > 2) {

392 *
Àn
 = 2;

394 (*
buf
)[0] = 0;

395 (*
buf
)[1] = 0;

398 
	}
}

400 
	$usb_°™d¨d_öãrÁ˚_gë_°©us
(
usbd_devi˚
 *
usbd_dev
,

401 
usb_£tup_d©a
 *
ªq
,

402 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
)

404 ()
usbd_dev
;

405 ()
ªq
;

408 i‡(*
Àn
 > 2) {

409 *
Àn
 = 2;

411 (*
buf
)[0] = 0;

412 (*
buf
)[1] = 0;

415 
	}
}

417 
	$usb_°™d¨d_ídpoöt_gë_°©us
(
usbd_devi˚
 *
usbd_dev
,

418 
usb_£tup_d©a
 *
ªq
,

419 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
)

421 ()
ªq
;

423 i‡(*
Àn
 > 2) {

424 *
Àn
 = 2;

426 (*
buf
)[0] = 
	`usbd_ï_°Æl_gë
(
usbd_dev
, 
ªq
->
wIndex
) ? 1 : 0;

427 (*
buf
)[1] = 0;

430 
	}
}

432 
	$usb_°™d¨d_ídpoöt_°Æl
(
usbd_devi˚
 *
usbd_dev
,

433 
usb_£tup_d©a
 *
ªq
,

434 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
)

436 ()
buf
;

437 ()
Àn
;

439 
	`usbd_ï_°Æl_£t
(
usbd_dev
, 
ªq
->
wIndex
, 1);

442 
	}
}

444 
	$usb_°™d¨d_ídpoöt_un°Æl
(
usbd_devi˚
 *
usbd_dev
,

445 
usb_£tup_d©a
 *
ªq
,

446 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
)

448 ()
buf
;

449 ()
Àn
;

451 
	`usbd_ï_°Æl_£t
(
usbd_dev
, 
ªq
->
wIndex
, 0);

454 
	}
}

459 
	$_usbd_°™d¨d_ªque°_devi˚
(
usbd_devi˚
 *
usbd_dev
,

460 
usb_£tup_d©a
 *
ªq
, 
uöt8_t
 **
buf
,

461 
uöt16_t
 *
Àn
)

463 (*
comm™d
)(
usbd_devi˚
 *
usbd_dev
, 
usb_£tup_d©a
 *
ªq
,

464 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
Ë
NULL
;

466 
ªq
->
bReque°
) {

467 
USB_REQ_CLEAR_FEATURE
:

468 
USB_REQ_SET_FEATURE
:

469 i‡(
ªq
->
wVÆue
 =
USB_FEAT_DEVICE_REMOTE_WAKEUP
) {

473 i‡(
ªq
->
wVÆue
 =
USB_FEAT_TEST_MODE
) {

478 
USB_REQ_SET_ADDRESS
:

483 
comm™d
 = 
usb_°™d¨d_£t_addªss
;

485 
USB_REQ_SET_CONFIGURATION
:

486 
comm™d
 = 
usb_°™d¨d_£t_c⁄figuøti⁄
;

488 
USB_REQ_GET_CONFIGURATION
:

489 
comm™d
 = 
usb_°™d¨d_gë_c⁄figuøti⁄
;

491 
USB_REQ_GET_DESCRIPTOR
:

492 
comm™d
 = 
usb_°™d¨d_gë_des¸ùt‹
;

494 
USB_REQ_GET_STATUS
:

499 
comm™d
 = 
usb_°™d¨d_devi˚_gë_°©us
;

501 
USB_REQ_SET_DESCRIPTOR
:

506 i‡(!
comm™d
) {

510  
	`comm™d
(
usbd_dev
, 
ªq
, 
buf
, 
Àn
);

511 
	}
}

513 
	$_usbd_°™d¨d_ªque°_öãrÁ˚
(
usbd_devi˚
 *
usbd_dev
,

514 
usb_£tup_d©a
 *
ªq
, 
uöt8_t
 **
buf
,

515 
uöt16_t
 *
Àn
)

517 (*
comm™d
)(
usbd_devi˚
 *
usbd_dev
, 
usb_£tup_d©a
 *
ªq
,

518 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
Ë
NULL
;

520 
ªq
->
bReque°
) {

521 
USB_REQ_CLEAR_FEATURE
:

522 
USB_REQ_SET_FEATURE
:

525 
USB_REQ_GET_INTERFACE
:

526 
comm™d
 = 
usb_°™d¨d_gë_öãrÁ˚
;

528 
USB_REQ_SET_INTERFACE
:

529 
comm™d
 = 
usb_°™d¨d_£t_öãrÁ˚
;

531 
USB_REQ_GET_STATUS
:

532 
comm™d
 = 
usb_°™d¨d_öãrÁ˚_gë_°©us
;

536 i‡(!
comm™d
) {

540  
	`comm™d
(
usbd_dev
, 
ªq
, 
buf
, 
Àn
);

541 
	}
}

543 
	$_usbd_°™d¨d_ªque°_ídpoöt
(
usbd_devi˚
 *
usbd_dev
,

544 
usb_£tup_d©a
 *
ªq
, 
uöt8_t
 **
buf
,

545 
uöt16_t
 *
Àn
)

547 (*
comm™d
Ë(
usbd_devi˚
 *
usbd_dev
, 
usb_£tup_d©a
 *
ªq
,

548 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
Ë
NULL
;

550 
ªq
->
bReque°
) {

551 
USB_REQ_CLEAR_FEATURE
:

552 i‡(
ªq
->
wVÆue
 =
USB_FEAT_ENDPOINT_HALT
) {

553 
comm™d
 = 
usb_°™d¨d_ídpoöt_un°Æl
;

556 
USB_REQ_SET_FEATURE
:

557 i‡(
ªq
->
wVÆue
 =
USB_FEAT_ENDPOINT_HALT
) {

558 
comm™d
 = 
usb_°™d¨d_ídpoöt_°Æl
;

561 
USB_REQ_GET_STATUS
:

562 
comm™d
 = 
usb_°™d¨d_ídpoöt_gë_°©us
;

564 
USB_REQ_SET_SYNCH_FRAME
:

573 i‡(!
comm™d
) {

577  
	`comm™d
(
usbd_dev
, 
ªq
, 
buf
, 
Àn
);

578 
	}
}

580 
	$_usbd_°™d¨d_ªque°
(
usbd_devi˚
 *
usbd_dev
, 
usb_£tup_d©a
 *
ªq
,

581 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
)

584 i‡((
ªq
->
bmReque°Ty≥
 & 
USB_REQ_TYPE_TYPE
Ë!
USB_REQ_TYPE_STANDARD
) {

588 
ªq
->
bmReque°Ty≥
 & 
USB_REQ_TYPE_RECIPIENT
) {

589 
USB_REQ_TYPE_DEVICE
:

590  
	`_usbd_°™d¨d_ªque°_devi˚
(
usbd_dev
, 
ªq
, 
buf
, 
Àn
);

591 
USB_REQ_TYPE_INTERFACE
:

592  
	`_usbd_°™d¨d_ªque°_öãrÁ˚
(
usbd_dev
, 
ªq
,

593 
buf
, 
Àn
);

594 
USB_REQ_TYPE_ENDPOINT
:

595  
	`_usbd_°™d¨d_ªque°_ídpoöt
(
usbd_dev
, 
ªq
, 
buf
, 
Àn
);

599 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\usb\usb.c

38 
	~<°rög.h
>

39 
	~<lib›ícm3/usb/usbd.h
>

40 
	~"usb_¥iv©e.h
"

42 
usbd_devi˚
 *
	$usbd_öô
(c⁄° 
usbd_drivî
 *
drivî
,

43 c⁄° 
usb_devi˚_des¸ùt‹
 *
dev
,

44 c⁄° 
usb_c⁄fig_des¸ùt‹
 *
c⁄f
,

45 c⁄° **
°rögs
, 
num_°rögs
,

46 
uöt8_t
 *
c⁄åﬁ_buf„r
, 
uöt16_t
 
c⁄åﬁ_buf„r_size
)

48 
usbd_devi˚
 *
usbd_dev
;

50 
usbd_dev
 = 
drivî
->
	`öô
();

52 
usbd_dev
->
drivî
 = driver;

53 
usbd_dev
->
desc
 = 
dev
;

54 
usbd_dev
->
c⁄fig
 = 
c⁄f
;

55 
usbd_dev
->
°rögs
 = strings;

56 
usbd_dev
->
num_°rögs
 =Çum_strings;

57 
usbd_dev
->
˘æ_buf
 = 
c⁄åﬁ_buf„r
;

58 
usbd_dev
->
˘æ_buf_Àn
 = 
c⁄åﬁ_buf„r_size
;

60 
usbd_dev
->
u£r_ˇŒback_˘r
[0][
USB_TRANSACTION_SETUP
] =

61 
_usbd_c⁄åﬁ_£tup
;

62 
usbd_dev
->
u£r_ˇŒback_˘r
[0][
USB_TRANSACTION_OUT
] =

63 
_usbd_c⁄åﬁ_out
;

64 
usbd_dev
->
u£r_ˇŒback_˘r
[0][
USB_TRANSACTION_IN
] =

65 
_usbd_c⁄åﬁ_ö
;

67 
i
;

68 
i
 = 0; i < 
MAX_USER_SET_CONFIG_CALLBACK
; i++) {

69 
usbd_dev
->
u£r_ˇŒback_£t_c⁄fig
[
i
] = 
NULL
;

72  
usbd_dev
;

73 
	}
}

75 
usbd_ªgi°î_ª£t_ˇŒback
(
usbd_devi˚
 *
usbd_dev
, (*
ˇŒback
)())

77 
usbd_dev
->
u£r_ˇŒback_ª£t
 = 
ˇŒback
;

78 
	}
}

80 
usbd_ªgi°î_su•íd_ˇŒback
(
usbd_devi˚
 *
usbd_dev
,

81 (*
ˇŒback
)())

83 
usbd_dev
->
u£r_ˇŒback_su•íd
 = 
ˇŒback
;

84 
	}
}

86 
usbd_ªgi°î_ªsume_ˇŒback
(
usbd_devi˚
 *
usbd_dev
,

87 (*
ˇŒback
)())

89 
usbd_dev
->
u£r_ˇŒback_ªsume
 = 
ˇŒback
;

90 
	}
}

92 
usbd_ªgi°î_sof_ˇŒback
(
usbd_devi˚
 *
usbd_dev
, (*
ˇŒback
)())

94 
usbd_dev
->
u£r_ˇŒback_sof
 = 
ˇŒback
;

95 
	}
}

97 
	$_usbd_ª£t
(
usbd_devi˚
 *
usbd_dev
)

99 
usbd_dev
->
cuºít_addªss
 = 0;

100 
usbd_dev
->
cuºít_c⁄fig
 = 0;

101 
	`usbd_ï_£tup
(
usbd_dev
, 0, 
USB_ENDPOINT_ATTR_CONTROL
, usbd_dev->
desc
->
bMaxPackëSize0
, 
NULL
);

102 
usbd_dev
->
drivî
->
	`£t_addªss
(usbd_dev, 0);

104 i‡(
usbd_dev
->
u£r_ˇŒback_ª£t
) {

105 
usbd_dev
->
	`u£r_ˇŒback_ª£t
();

107 
	}
}

110 
	$usbd_pﬁl
(
usbd_devi˚
 *
usbd_dev
)

112 
usbd_dev
->
drivî
->
	`pﬁl
(usbd_dev);

113 
	}
}

115 
	$usbd_disc⁄√˘
(
usbd_devi˚
 *
usbd_dev
, 
boﬁ
 
disc⁄√˘ed
)

118 i‡(
usbd_dev
->
drivî
->
disc⁄√˘
) {

119 
usbd_dev
->
drivî
->
	`disc⁄√˘
(usbd_dev, 
disc⁄√˘ed
);

121 
	}
}

123 
	$usbd_ï_£tup
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, uöt8_à
ty≥
,

124 
uöt16_t
 
max_size
, 
usbd_ídpoöt_ˇŒback
 
ˇŒback
)

126 
usbd_dev
->
drivî
->
	`ï_£tup
(usbd_dev, 
addr
, 
ty≥
, 
max_size
, 
ˇŒback
);

127 
	}
}

129 
uöt16_t
 
	$usbd_ï_wrôe_∑ckë
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
,

130 c⁄° *
buf
, 
uöt16_t
 
Àn
)

132  
usbd_dev
->
drivî
->
	`ï_wrôe_∑ckë
(usbd_dev, 
addr
, 
buf
, 
Àn
);

133 
	}
}

135 
uöt16_t
 
	$usbd_ï_ªad_∑ckë
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, *
buf
,

136 
uöt16_t
 
Àn
)

138  
usbd_dev
->
drivî
->
	`ï_ªad_∑ckë
(usbd_dev, 
addr
, 
buf
, 
Àn
);

139 
	}
}

141 
	$usbd_ï_°Æl_£t
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, uöt8_à
°Æl
)

143 
usbd_dev
->
drivî
->
	`ï_°Æl_£t
(usbd_dev, 
addr
, 
°Æl
);

144 
	}
}

146 
uöt8_t
 
	$usbd_ï_°Æl_gë
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
)

148  
usbd_dev
->
drivî
->
	`ï_°Æl_gë
(usbd_dev, 
addr
);

149 
	}
}

151 
	$usbd_ï_«k_£t
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, uöt8_à
«k
)

153 
usbd_dev
->
drivî
->
	`ï_«k_£t
(usbd_dev, 
addr
, 
«k
);

154 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\usb\usb_msc.c

21 
	~<°döt.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<lib›ícm3/cm3/comm⁄.h
>

25 
	~<lib›ícm3/usb/usbd.h
>

26 
	~<lib›ícm3/usb/msc.h
>

27 
	~"usb_¥iv©e.h
"

39 
	#CBW_SIGNATURE
 0x43425355

	)

40 
	#CBW_STATUS_SUCCESS
 0

	)

41 
	#CBW_STATUS_FAILED
 1

	)

42 
	#CBW_STATUS_PHASE_ERROR
 2

	)

45 
	#CSW_SIGNATURE
 0x53425355

	)

46 
	#CSW_STATUS_SUCCESS
 0

	)

47 
	#CSW_STATUS_FAILED
 1

	)

48 
	#CSW_STATUS_PHASE_ERROR
 2

	)

51 
	#SCSI_TEST_UNIT_READY
 0x00

	)

52 
	#SCSI_REQUEST_SENSE
 0x03

	)

53 
	#SCSI_FORMAT_UNIT
 0x04

	)

54 
	#SCSI_READ_6
 0x08

	)

55 
	#SCSI_WRITE_6
 0x0A

	)

56 
	#SCSI_INQUIRY
 0x12

	)

57 
	#SCSI_MODE_SENSE_6
 0x1A

	)

58 
	#SCSI_SEND_DIAGNOSTIC
 0x1D

	)

59 
	#SCSI_READ_CAPACITY
 0x25

	)

60 
	#SCSI_READ_10
 0x28

	)

66 
	#SCSI_REPORT_LUNS
 0xA0

	)

67 
	#SCSI_PREVENT_ALLOW_MEDIUM_REMOVAL
 0x1E

	)

68 
	#SCSI_MODE_SELECT_6
 0x15

	)

69 
	#SCSI_MODE_SELECT_10
 0x55

	)

70 
	#SCSI_MODE_SENSE_10
 0x5A

	)

71 
	#SCSI_READ_12
 0xA8

	)

72 
	#SCSI_READ_FORMAT_CAPACITIES
 0x23

	)

73 
	#SCSI_READ_TOC_PMA_ATIP
 0x43

	)

74 
	#SCSI_START_STOP_UNIT
 0x1B

	)

75 
	#SCSI_SYNCHRONIZE_CACHE
 0x35

	)

76 
	#SCSI_VERIFY
 0x2F

	)

77 
	#SCSI_WRITE_10
 0x2A

	)

78 
	#SCSI_WRITE_12
 0xAA

	)

81 
	esbc_£n£_key
 {

82 
	mSBC_SENSE_KEY_NO_SENSE
 = 0x00,

83 
	mSBC_SENSE_KEY_RECOVERED_ERROR
 = 0x01,

84 
	mSBC_SENSE_KEY_NOT_READY
 = 0x02,

85 
	mSBC_SENSE_KEY_MEDIUM_ERROR
 = 0x03,

86 
	mSBC_SENSE_KEY_HARDWARE_ERROR
 = 0x04,

87 
	mSBC_SENSE_KEY_ILLEGAL_REQUEST
 = 0x05,

88 
	mSBC_SENSE_KEY_UNIT_ATTENTION
 = 0x06,

89 
	mSBC_SENSE_KEY_DATA_PROTECT
 = 0x07,

90 
	mSBC_SENSE_KEY_BLANK_CHECK
 = 0x08,

91 
	mSBC_SENSE_KEY_VENDOR_SPECIFIC
 = 0x09,

92 
	mSBC_SENSE_KEY_COPY_ABORTED
 = 0x0A,

93 
	mSBC_SENSE_KEY_ABORTED_COMMAND
 = 0x0B,

94 
	mSBC_SENSE_KEY_VOLUME_OVERFLOW
 = 0x0D,

95 
	mSBC_SENSE_KEY_MISCOMPARE
 = 0x0E

98 
	esbc_asc
 {

99 
	mSBC_ASC_NO_ADDITIONAL_SENSE_INFORMATION
 = 0x00,

100 
	mSBC_ASC_PERIPHERAL_DEVICE_WRITE_FAULT
 = 0x03,

101 
	mSBC_ASC_LOGICAL_UNIT_NOT_READY
 = 0x04,

102 
	mSBC_ASC_UNRECOVERED_READ_ERROR
 = 0x11,

103 
	mSBC_ASC_INVALID_COMMAND_OPERATION_CODE
 = 0x20,

104 
	mSBC_ASC_LBA_OUT_OF_RANGE
 = 0x21,

105 
	mSBC_ASC_INVALID_FIELD_IN_CDB
 = 0x24,

106 
	mSBC_ASC_WRITE_PROTECTED
 = 0x27,

107 
	mSBC_ASC_NOT_READY_TO_READY_CHANGE
 = 0x28,

108 
	mSBC_ASC_FORMAT_ERROR
 = 0x31,

109 
	mSBC_ASC_MEDIUM_NOT_PRESENT
 = 0x3A

112 
	esbc_ascq
 {

113 
	mSBC_ASCQ_NA
 = 0x00,

114 
	mSBC_ASCQ_FORMAT_COMMAND_FAILED
 = 0x01,

115 
	mSBC_ASCQ_INITIALIZING_COMMAND_REQUIRED
 = 0x02,

116 
	mSBC_ASCQ_OPERATION_IN_PROGRESS
 = 0x07

119 
	eå™s_evít
 {

120 
	mEVENT_CBW_VALID
,

121 
	mEVENT_NEED_STATUS


124 
	susb_msc_cbw
 {

125 
uöt32_t
 
	mdCBWSig«tuª
;

126 
uöt32_t
 
	mdCBWTag
;

127 
uöt32_t
 
	mdCBWD©aTøns„rLígth
;

128 
uöt8_t
 
	mbmCBWFœgs
;

129 
uöt8_t
 
	mbCBWLUN
;

130 
uöt8_t
 
	mbCBWCBLígth
;

131 
uöt8_t
 
	mCBWCB
[16];

132 } 
__©åibuã__
((
∑cked
));

134 
	susb_msc_csw
 {

135 
uöt32_t
 
	mdCSWSig«tuª
;

136 
uöt32_t
 
	mdCSWTag
;

137 
uöt32_t
 
	mdCSWD©aResidue
;

138 
uöt8_t
 
	mbCSWSètus
;

139 } 
__©åibuã__
((
∑cked
));

141 
	ssbc_£n£_öfo
 {

142 
uöt8_t
 
	mkey
;

143 
uöt8_t
 
	masc
;

144 
uöt8_t
 
	mascq
;

147 
	susb_msc_å™s
 {

148 
uöt8_t
 
	mcbw_˙t
;

150 
usb_msc_cbw
 
	mcbw
;

151 
uöt8_t
 
	mbuf
[1];

152 } 
	mcbw
;

154 
uöt32_t
 
	mbyãs_to_ªad
;

155 
uöt32_t
 
	mbyãs_to_wrôe
;

156 
uöt32_t
 
	mbyã_cou¡
;

159 
uöt32_t
 
	mlba_°¨t
;

160 
uöt32_t
 
	mblock_cou¡
;

161 
uöt32_t
 
	mcuºít_block
;

163 
uöt8_t
 
	mmsd_buf
[512];

165 
boﬁ
 
	mcsw_vÆid
;

166 
uöt8_t
 
	mcsw_£¡
;

168 
usb_msc_csw
 
	mcsw
;

169 
uöt8_t
 
	mbuf
[1];

170 } 
	mcsw
;

173 
	s_usbd_mass_°‹age
 {

174 
usbd_devi˚
 *
	musbd_dev
;

175 
uöt8_t
 
	mï_ö
;

176 
uöt8_t
 
	mï_ö_size
;

177 
uöt8_t
 
	mï_out
;

178 
uöt8_t
 
	mï_out_size
;

180 c⁄° *
	mvíd‹_id
;

181 c⁄° *
	m¥odu˘_id
;

182 c⁄° *
	m¥odu˘_ªvisi⁄_Àvñ
;

183 
uöt32_t
 
	mblock_cou¡
;

185 (*
	mªad_block
)(
uöt32_t
 
	mlba
, 
uöt8_t
 *
	mc›y_to
);

186 (*
	mwrôe_block
)(
uöt32_t
 
	mlba
, c⁄° 
uöt8_t
 *
	mc›y_‰om
);

188 (*
	mlock
)();

189 (*
	mu∆ock
)();

191 
usb_msc_å™s
 
	må™s
;

192 
sbc_£n£_öfo
 
	m£n£
;

195 
usbd_mass_°‹age
 
	g_mass_°‹age
;

199 c⁄° 
uöt8_t
 
	g_•c3_öquúy_ª•⁄£
[36] = {

217 c⁄° 
uöt8_t
 
	g_•c3_ªque°_£n£
[18] = {

236 
	$£t_sbc_°©us
(
usbd_mass_°‹age
 *
ms
,

237 
sbc_£n£_key
 
key
,

238 
sbc_asc
 
asc
,

239 
sbc_ascq
 
ascq
)

241 
ms
->
£n£
.
key
 = (
uöt8_t
) key;

242 
ms
->
£n£
.
asc
 = (
uöt8_t
)ásc;

243 
ms
->
£n£
.
ascq
 = (
uöt8_t
)áscq;

244 
	}
}

246 
	$£t_sbc_°©us_good
(
usbd_mass_°‹age
 *
ms
)

248 
	`£t_sbc_°©us
(
ms
,

249 
SBC_SENSE_KEY_NO_SENSE
,

250 
SBC_ASC_NO_ADDITIONAL_SENSE_INFORMATION
,

251 
SBC_ASCQ_NA
);

252 
	}
}

254 
uöt8_t
 *
	$gë_cbw_buf
(
usb_msc_å™s
 *
å™s
)

256  &
å™s
->
cbw
.cbw.
CBWCB
[0];

257 
	}
}

259 
	$scsi_ªad_6
(
usbd_mass_°‹age
 *
ms
,

260 
usb_msc_å™s
 *
å™s
,

261 
å™s_evít
 
evít
)

263 i‡(
EVENT_CBW_VALID
 =
evít
) {

264 
uöt8_t
 *
buf
;

266 
buf
 = 
	`gë_cbw_buf
(
å™s
);

268 
å™s
->
lba_°¨t
 = (
buf
[2] << 8) | buf[3];

269 
å™s
->
block_cou¡
 = 
buf
[4];

270 
å™s
->
cuºít_block
 = 0;

275 
å™s
->
byãs_to_wrôe
 =Åøns->
block_cou¡
 << 9;

277 
	`£t_sbc_°©us_good
(
ms
);

279 
	}
}

281 
	$scsi_wrôe_6
(
usbd_mass_°‹age
 *
ms
,

282 
usb_msc_å™s
 *
å™s
,

283 
å™s_evít
 
evít
)

285 (Ë
ms
;

287 i‡(
EVENT_CBW_VALID
 =
evít
) {

288 
uöt8_t
 *
buf
;

290 
buf
 = 
	`gë_cbw_buf
(
å™s
);

292 
å™s
->
lba_°¨t
 = ((0x1‡& 
buf
[1]) << 16)

293 | (
buf
[2] << 8) | buf[3];

294 
å™s
->
block_cou¡
 = 
buf
[4];

295 
å™s
->
cuºít_block
 = 0;

297 
å™s
->
byãs_to_ªad
 =Åøns->
block_cou¡
 << 9;

299 
	}
}

301 
	$scsi_wrôe_10
(
usbd_mass_°‹age
 *
ms
,

302 
usb_msc_å™s
 *
å™s
,

303 
å™s_evít
 
evít
)

305 (Ë
ms
;

307 i‡(
EVENT_CBW_VALID
 =
evít
) {

308 
uöt8_t
 *
buf
;

310 
buf
 = 
	`gë_cbw_buf
(
å™s
);

312 
å™s
->
lba_°¨t
 = (
buf
[2] << 24) | (buf[3] << 16) |

313 (
buf
[4] << 8) | buf[5];

314 
å™s
->
block_cou¡
 = (
buf
[7] << 8) | buf[8];

315 
å™s
->
cuºít_block
 = 0;

317 
å™s
->
byãs_to_ªad
 =Åøns->
block_cou¡
 << 9;

319 
	}
}

321 
	$scsi_ªad_10
(
usbd_mass_°‹age
 *
ms
,

322 
usb_msc_å™s
 *
å™s
,

323 
å™s_evít
 
evít
)

325 i‡(
EVENT_CBW_VALID
 =
evít
) {

326 
uöt8_t
 *
buf
;

328 
buf
 = 
	`gë_cbw_buf
(
å™s
);

330 
å™s
->
lba_°¨t
 = (
buf
[2] << 24) | (buf[3] << 16)

331 | (
buf
[4] << 8) | buf[5];

332 
å™s
->
block_cou¡
 = (
buf
[7] << 8) | buf[8];

337 
å™s
->
byãs_to_wrôe
 =Åøns->
block_cou¡
 << 9;

339 
	`£t_sbc_°©us_good
(
ms
);

341 
	}
}

343 
	$scsi_ªad_ˇ∑côy
(
usbd_mass_°‹age
 *
ms
,

344 
usb_msc_å™s
 *
å™s
,

345 
å™s_evít
 
evít
)

347 i‡(
EVENT_CBW_VALID
 =
evít
) {

348 
å™s
->
msd_buf
[0] = 
ms
->
block_cou¡
 >> 24;

349 
å™s
->
msd_buf
[1] = 0xf‡& (
ms
->
block_cou¡
 >> 16);

350 
å™s
->
msd_buf
[2] = 0xf‡& (
ms
->
block_cou¡
 >> 8);

351 
å™s
->
msd_buf
[3] = 0xf‡& 
ms
->
block_cou¡
;

354 
å™s
->
msd_buf
[4] = 0;

355 
å™s
->
msd_buf
[5] = 0;

356 
å™s
->
msd_buf
[6] = 2;

357 
å™s
->
msd_buf
[7] = 0;

358 
å™s
->
byãs_to_wrôe
 = 8;

359 
	`£t_sbc_°©us_good
(
ms
);

361 
	}
}

363 
	$scsi_f‹m©_unô
(
usbd_mass_°‹age
 *
ms
,

364 
usb_msc_å™s
 *
å™s
,

365 
å™s_evít
 
evít
)

367 i‡(
EVENT_CBW_VALID
 =
evít
) {

368 
uöt32_t
 
i
;

370 
	`mem£t
(
å™s
->
msd_buf
, 0, 512);

372 
i
 = 0; i < 
ms
->
block_cou¡
; i++) {

373 (*
ms
->
wrôe_block
)(
i
, 
å™s
->
msd_buf
);

376 
	`£t_sbc_°©us_good
(
ms
);

378 
	}
}

380 
	$scsi_ªque°_£n£
(
usbd_mass_°‹age
 *
ms
,

381 
usb_msc_å™s
 *
å™s
,

382 
å™s_evít
 
evít
)

384 i‡(
EVENT_CBW_VALID
 =
evít
) {

385 
uöt8_t
 *
buf
;

387 
buf
 = &
å™s
->
cbw
.cbw.
CBWCB
[0];

389 
å™s
->
byãs_to_wrôe
 = 
buf
[4];

390 
	`mem˝y
(
å™s
->
msd_buf
, 
_•c3_ªque°_£n£
,

391 (
_•c3_ªque°_£n£
));

393 
å™s
->
msd_buf
[2] = 
ms
->
£n£
.
key
;

394 
å™s
->
msd_buf
[12] = 
ms
->
£n£
.
asc
;

395 
å™s
->
msd_buf
[13] = 
ms
->
£n£
.
ascq
;

397 
	}
}

399 
	$scsi_mode_£n£_6
(
usbd_mass_°‹age
 *
ms
,

400 
usb_msc_å™s
 *
å™s
,

401 
å™s_evít
 
evít
)

403 (Ë
ms
;

405 i‡(
EVENT_CBW_VALID
 =
evít
) {

407 
uöt8_t
 *
buf
;

408 
uöt8_t
 
∑ge_code
;

409 
uöt8_t
 
Æloˇti⁄_Àngth
;

411 
buf
 = &
å™s
->
cbw
.cbw.
CBWCB
[0];

412 
∑ge_code
 = 
buf
[2];

413 
Æloˇti⁄_Àngth
 = 
buf
[4];

415 i‡(0x1C =
∑ge_code
) {

417 
å™s
->
byãs_to_wrôe
 = 4;

419 
å™s
->
msd_buf
[0] = 3;

420 
å™s
->
msd_buf
[1] = 0;

421 
å™s
->
msd_buf
[2] = 0;

422 
å™s
->
csw
.csw.
dCSWD©aResidue
 = 4;

424 } i‡(0x01 =
∑ge_code
) {

425 } i‡(0x3F =
∑ge_code
) {

428 
å™s
->
csw
.csw.
bCSWSètus
 = 
CSW_STATUS_FAILED
;

429 
	`£t_sbc_°©us
(
ms
,

430 
SBC_SENSE_KEY_ILLEGAL_REQUEST
,

431 
SBC_ASC_INVALID_FIELD_IN_CDB
,

432 
SBC_ASCQ_NA
);

436 
	}
}

438 
	$scsi_öquúy
(
usbd_mass_°‹age
 *
ms
,

439 
usb_msc_å™s
 *
å™s
,

440 
å™s_evít
 
evít
)

442 i‡(
EVENT_CBW_VALID
 =
evít
) {

443 
uöt8_t
 
evpd
;

444 
uöt8_t
 *
buf
;

446 
buf
 = 
	`gë_cbw_buf
(
å™s
);

447 
evpd
 = 1 & 
buf
[1];

449 i‡(0 =
evpd
) {

450 
size_t
 
Àn
;

451 
å™s
->
byãs_to_wrôe
 = (
_•c3_öquúy_ª•⁄£
);

452 
	`mem˝y
(
å™s
->
msd_buf
, 
_•c3_öquúy_ª•⁄£
,

453 (
_•c3_öquúy_ª•⁄£
));

455 
Àn
 = 
	`°æí
(
ms
->
víd‹_id
);

456 
Àn
 = 
	`MIN
(len, 8);

457 
	`mem˝y
(&
å™s
->
msd_buf
[8], 
ms
->
víd‹_id
, 
Àn
);

459 
Àn
 = 
	`°æí
(
ms
->
¥odu˘_id
);

460 
Àn
 = 
	`MIN
(len, 16);

461 
	`mem˝y
(&
å™s
->
msd_buf
[16], 
ms
->
¥odu˘_id
, 
Àn
);

463 
Àn
 = 
	`°æí
(
ms
->
¥odu˘_ªvisi⁄_Àvñ
);

464 
Àn
 = 
	`MIN
(len, 4);

465 
	`mem˝y
(&
å™s
->
msd_buf
[32], 
ms
->
¥odu˘_ªvisi⁄_Àvñ
,

466 
Àn
);

468 
å™s
->
csw
.csw.
dCSWD©aResidue
 =

469 (
_•c3_öquúy_ª•⁄£
);

471 
	`£t_sbc_°©us_good
(
ms
);

477 
	}
}

479 
	$scsi_comm™d
(
usbd_mass_°‹age
 *
ms
,

480 
usb_msc_å™s
 *
å™s
,

481 
å™s_evít
 
evít
)

483 i‡(
EVENT_CBW_VALID
 =
evít
) {

485 
å™s
->
csw_£¡
 = 0;

486 
å™s
->
csw
.csw.
dCSWSig«tuª
 = 
CSW_SIGNATURE
;

487 
å™s
->
csw
.csw.
dCSWTag
 =Åøns->
cbw
.cbw.
dCBWTag
;

488 
å™s
->
csw
.csw.
dCSWD©aResidue
 = 0;

489 
å™s
->
csw
.csw.
bCSWSètus
 = 
CSW_STATUS_SUCCESS
;

491 
å™s
->
byãs_to_wrôe
 = 0;

492 
å™s
->
byãs_to_ªad
 = 0;

493 
å™s
->
byã_cou¡
 = 0;

496 
å™s
->
cbw
.cbw.
CBWCB
[0]) {

497 
SCSI_TEST_UNIT_READY
:

498 
SCSI_SEND_DIAGNOSTIC
:

500 
	`£t_sbc_°©us_good
(
ms
);

502 
SCSI_FORMAT_UNIT
:

503 
	`scsi_f‹m©_unô
(
ms
, 
å™s
, 
evít
);

505 
SCSI_REQUEST_SENSE
:

506 
	`scsi_ªque°_£n£
(
ms
, 
å™s
, 
evít
);

508 
SCSI_MODE_SENSE_6
:

509 
	`scsi_mode_£n£_6
(
ms
, 
å™s
, 
evít
);

511 
SCSI_READ_6
:

512 
	`scsi_ªad_6
(
ms
, 
å™s
, 
evít
);

514 
SCSI_INQUIRY
:

515 
	`scsi_öquúy
(
ms
, 
å™s
, 
evít
);

517 
SCSI_READ_CAPACITY
:

518 
	`scsi_ªad_ˇ∑côy
(
ms
, 
å™s
, 
evít
);

520 
SCSI_READ_10
:

521 
	`scsi_ªad_10
(
ms
, 
å™s
, 
evít
);

523 
SCSI_WRITE_6
:

524 
	`scsi_wrôe_6
(
ms
, 
å™s
, 
evít
);

526 
SCSI_WRITE_10
:

527 
	`scsi_wrôe_10
(
ms
, 
å™s
, 
evít
);

530 
	`£t_sbc_°©us
(
ms
, 
SBC_SENSE_KEY_ILLEGAL_REQUEST
,

531 
SBC_ASC_INVALID_COMMAND_OPERATION_CODE
,

532 
SBC_ASCQ_NA
);

534 
å™s
->
byãs_to_wrôe
 = 0;

535 
å™s
->
byãs_to_ªad
 = 0;

536 
å™s
->
csw
.csw.
bCSWSètus
 = 
CSW_STATUS_FAILED
;

539 
	}
}

544 
	$msc_d©a_rx_cb
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ï
)

546 
usbd_mass_°‹age
 *
ms
;

547 
usb_msc_å™s
 *
å™s
;

548 
Àn
, 
max_Àn
, 
À·
;

549 *
p
;

551 
ms
 = &
_mass_°‹age
;

552 
å™s
 = &
ms
->trans;

555 
À·
 = (
usb_msc_cbw
Ë- 
å™s
->
cbw_˙t
;

556 i‡(0 < 
À·
) {

557 
max_Àn
 = 
	`MIN
(
ms
->
ï_out_size
, 
À·
);

558 
p
 = &
å™s
->
cbw
.
buf
[0x1f‡&Åøns->
cbw_˙t
];

559 
Àn
 = 
	`usbd_ï_ªad_∑ckë
(
usbd_dev
, 
ï
, 
p
, 
max_Àn
);

560 
å™s
->
cbw_˙t
 +
Àn
;

562 i‡((
usb_msc_cbw
Ë=
å™s
->
cbw_˙t
) {

563 
	`scsi_comm™d
(
ms
, 
å™s
, 
EVENT_CBW_VALID
);

564 i‡(
å™s
->
byã_cou¡
 <Åøns->
byãs_to_ªad
) {

572 i‡(
å™s
->
byã_cou¡
 <Åøns->
byãs_to_ªad
) {

573 i‡(0 < 
å™s
->
block_cou¡
) {

574 i‡((0 =
å™s
->
byã_cou¡
Ë&& (
NULL
 !
ms
->
lock
)) {

575 (*
ms
->
lock
)();

579 
À·
 = 
å™s
->
byãs_to_ªad
 -Åøns->
byã_cou¡
;

580 
max_Àn
 = 
	`MIN
(
ms
->
ï_out_size
, 
À·
);

581 
p
 = &
å™s
->
msd_buf
[0x1f‡&Åøns->
byã_cou¡
];

582 
Àn
 = 
	`usbd_ï_ªad_∑ckë
(
usbd_dev
, 
ï
, 
p
, 
max_Àn
);

583 
å™s
->
byã_cou¡
 +
Àn
;

585 i‡(0 < 
å™s
->
block_cou¡
) {

586 i‡(0 =(0x1f‡& 
å™s
->
byã_cou¡
)) {

587 
uöt32_t
 
lba
;

589 
lba
 = 
å™s
->
lba_°¨t
 +Åøns->
cuºít_block
;

590 i‡(0 !(*
ms
->
wrôe_block
)(
lba
,

591 
å™s
->
msd_buf
)) {

594 
å™s
->
cuºít_block
++;

597 } i‡(
å™s
->
byã_cou¡
 <Åøns->
byãs_to_wrôe
) {

598 i‡(0 < 
å™s
->
block_cou¡
) {

599 i‡((0 =
å™s
->
byã_cou¡
Ë&& (
NULL
 !
ms
->
lock
)) {

600 (*
ms
->
lock
)();

603 i‡(0 =(0x1f‡& 
å™s
->
byã_cou¡
)) {

604 
uöt32_t
 
lba
;

606 
lba
 = 
å™s
->
lba_°¨t
 +Åøns->
cuºít_block
;

607 i‡(0 !(*
ms
->
ªad_block
)(
lba
,

608 
å™s
->
msd_buf
)) {

611 
å™s
->
cuºít_block
++;

615 
À·
 = 
å™s
->
byãs_to_wrôe
 -Åøns->
byã_cou¡
;

616 
max_Àn
 = 
	`MIN
(
ms
->
ï_out_size
, 
À·
);

617 
p
 = &
å™s
->
msd_buf
[0x1f‡&Åøns->
byã_cou¡
];

618 
Àn
 = 
	`usbd_ï_wrôe_∑ckë
(
usbd_dev
, 
ms
->
ï_ö
, 
p
, 
max_Àn
);

619 
å™s
->
byã_cou¡
 +
Àn
;

621 i‡(0 < 
å™s
->
block_cou¡
) {

622 i‡(
å™s
->
cuºít_block
 =å™s->
block_cou¡
) {

623 
uöt32_t
 
lba
;

625 
lba
 = 
å™s
->
lba_°¨t
 +Åøns->
cuºít_block
;

626 i‡(0 !(*
ms
->
wrôe_block
)(
lba
,

627 
å™s
->
msd_buf
)) {

631 
å™s
->
cuºít_block
 = 0;

632 i‡(
NULL
 !
ms
->
u∆ock
) {

633 (*
ms
->
u∆ock
)();

637 i‡(
Ál£
 =
å™s
->
csw_vÆid
) {

638 
	`scsi_comm™d
(
ms
, 
å™s
, 
EVENT_NEED_STATUS
);

639 
å™s
->
csw_vÆid
 = 
åue
;

642 
À·
 = (
usb_msc_csw
Ë- 
å™s
->
csw_£¡
;

643 i‡(0 < 
À·
) {

644 
max_Àn
 = 
	`MIN
(
ms
->
ï_out_size
, 
À·
);

645 
p
 = &
å™s
->
csw
.
buf
[å™s->
csw_£¡
];

646 
Àn
 = 
	`usbd_ï_wrôe_∑ckë
(
usbd_dev
, 
ms
->
ï_ö
, 
p
,

647 
max_Àn
);

648 
å™s
->
csw_£¡
 +
Àn
;

651 
	}
}

654 
	$msc_d©a_tx_cb
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ï
)

656 
usbd_mass_°‹age
 *
ms
;

657 
usb_msc_å™s
 *
å™s
;

658 
Àn
, 
max_Àn
, 
À·
;

659 *
p
;

661 
ms
 = &
_mass_°‹age
;

662 
å™s
 = &
ms
->trans;

664 i‡(
å™s
->
byã_cou¡
 <Åøns->
byãs_to_wrôe
) {

665 i‡(0 < 
å™s
->
block_cou¡
) {

666 i‡(0 =(0x1f‡& 
å™s
->
byã_cou¡
)) {

667 
uöt32_t
 
lba
;

669 
lba
 = 
å™s
->
lba_°¨t
 +Åøns->
cuºít_block
;

670 i‡(0 !(*
ms
->
ªad_block
)(
lba
,

671 
å™s
->
msd_buf
)) {

674 
å™s
->
cuºít_block
++;

678 
À·
 = 
å™s
->
byãs_to_wrôe
 -Åøns->
byã_cou¡
;

679 
max_Àn
 = 
	`MIN
(
ms
->
ï_out_size
, 
À·
);

680 
p
 = &
å™s
->
msd_buf
[0x1f‡&Åøns->
byã_cou¡
];

681 
Àn
 = 
	`usbd_ï_wrôe_∑ckë
(
usbd_dev
, 
ï
, 
p
, 
max_Àn
);

682 
å™s
->
byã_cou¡
 +
Àn
;

684 i‡(0 < 
å™s
->
block_cou¡
) {

685 i‡(
å™s
->
cuºít_block
 =å™s->
block_cou¡
) {

686 
å™s
->
cuºít_block
 = 0;

687 i‡(
NULL
 !
ms
->
u∆ock
) {

688 (*
ms
->
u∆ock
)();

692 i‡(
Ál£
 =
å™s
->
csw_vÆid
) {

693 
	`scsi_comm™d
(
ms
, 
å™s
, 
EVENT_NEED_STATUS
);

694 
å™s
->
csw_vÆid
 = 
åue
;

697 
À·
 = (
usb_msc_csw
Ë- 
å™s
->
csw_£¡
;

698 i‡(0 < 
À·
) {

699 
max_Àn
 = 
	`MIN
(
ms
->
ï_out_size
, 
À·
);

700 
p
 = &
å™s
->
csw
.
buf
[å™s->
csw_£¡
];

701 
Àn
 = 
	`usbd_ï_wrôe_∑ckë
(
usbd_dev
, 
ï
, 
p
, 
max_Àn
);

702 
å™s
->
csw_£¡
 +
Àn
;

703 } i‡((
usb_msc_csw
Ë=
å™s
->
csw_£¡
) {

705 
å™s
->
lba_°¨t
 = 0xffffffff;

706 
å™s
->
block_cou¡
 = 0;

707 
å™s
->
cuºít_block
 = 0;

708 
å™s
->
cbw_˙t
 = 0;

709 
å™s
->
byãs_to_ªad
 = 0;

710 
å™s
->
byãs_to_wrôe
 = 0;

711 
å™s
->
byã_cou¡
 = 0;

712 
å™s
->
csw_£¡
 = 0;

713 
å™s
->
csw_vÆid
 = 
Ál£
;

716 
	}
}

721 
	$msc_c⁄åﬁ_ªque°
(
usbd_devi˚
 *
usbd_dev
,

722 
usb_£tup_d©a
 *
ªq
, 
uöt8_t
 **
buf
,

723 
uöt16_t
 *
Àn
,

724 
usbd_c⁄åﬁ_com∂ëe_ˇŒback
 *
com∂ëe
)

726 ()
com∂ëe
;

727 ()
usbd_dev
;

729 
ªq
->
bReque°
) {

730 
USB_MSC_REQ_BULK_ONLY_RESET
:

732  
USBD_REQ_HANDLED
;

733 
USB_MSC_REQ_GET_MAX_LUN
:

735 *
buf
[0] = 0;

736 *
Àn
 = 1;

737  
USBD_REQ_HANDLED
;

740  
USBD_REQ_NOTSUPP
;

741 
	}
}

744 
	$msc_£t_c⁄fig
(
usbd_devi˚
 *
usbd_dev
, 
uöt16_t
 
wVÆue
)

746 
usbd_mass_°‹age
 *
ms
 = &
_mass_°‹age
;

748 ()
wVÆue
;

750 
	`usbd_ï_£tup
(
usbd_dev
, 
ms
->
ï_ö
, 
USB_ENDPOINT_ATTR_BULK
,

751 
ms
->
ï_ö_size
, 
msc_d©a_tx_cb
);

752 
	`usbd_ï_£tup
(
usbd_dev
, 
ms
->
ï_out
, 
USB_ENDPOINT_ATTR_BULK
,

753 
ms
->
ï_out_size
, 
msc_d©a_rx_cb
);

755 
	`usbd_ªgi°î_c⁄åﬁ_ˇŒback
(

756 
usbd_dev
,

757 
USB_REQ_TYPE_CLASS
 | 
USB_REQ_TYPE_INTERFACE
,

758 
USB_REQ_TYPE_TYPE
 | 
USB_REQ_TYPE_RECIPIENT
,

759 
msc_c⁄åﬁ_ªque°
);

760 
	}
}

786 
usbd_mass_°‹age
 *
usb_msc_öô
(
usbd_devi˚
 *
usbd_dev
,

787 
uöt8_t
 
ï_ö
, uöt8_à
ï_ö_size
,

788 
uöt8_t
 
ï_out
, uöt8_à
ï_out_size
,

789 c⁄° *
víd‹_id
,

790 c⁄° *
¥odu˘_id
,

791 c⁄° *
¥odu˘_ªvisi⁄_Àvñ
,

792 c⁄° 
uöt32_t
 
block_cou¡
,

793 (*
ªad_block
)(
uöt32_t
 
lba
,

794 
uöt8_t
 *
c›y_to
),

795 (*
wrôe_block
)(
uöt32_t
 
lba
,

796 c⁄° 
uöt8_t
 *
c›y_‰om
))

798 
_mass_°‹age
.
usbd_dev
 = usbd_dev;

799 
_mass_°‹age
.
ï_ö
 =Ép_in;

800 
_mass_°‹age
.
ï_ö_size
 =Ép_in_size;

801 
_mass_°‹age
.
ï_out
 =Ép_out;

802 
_mass_°‹age
.
ï_out_size
 =Ép_out_size;

803 
_mass_°‹age
.
víd‹_id
 = vendor_id;

804 
_mass_°‹age
.
¥odu˘_id
 =Öroduct_id;

805 
_mass_°‹age
.
¥odu˘_ªvisi⁄_Àvñ
 =Öroduct_revision_level;

806 
_mass_°‹age
.
block_cou¡
 = block_count - 1;

807 
_mass_°‹age
.
ªad_block
 =Ñead_block;

808 
_mass_°‹age
.
wrôe_block
 = write_block;

809 
_mass_°‹age
.
lock
 = 
NULL
;

810 
_mass_°‹age
.
u∆ock
 = 
NULL
;

812 
_mass_°‹age
.
å™s
.
lba_°¨t
 = 0xffffffff;

813 
_mass_°‹age
.
å™s
.
block_cou¡
 = 0;

814 
_mass_°‹age
.
å™s
.
cuºít_block
 = 0;

815 
_mass_°‹age
.
å™s
.
cbw_˙t
 = 0;

816 
_mass_°‹age
.
å™s
.
byãs_to_ªad
 = 0;

817 
_mass_°‹age
.
å™s
.
byãs_to_wrôe
 = 0;

818 
_mass_°‹age
.
å™s
.
byã_cou¡
 = 0;

819 
_mass_°‹age
.
å™s
.
csw_vÆid
 = 
Ál£
;

820 
_mass_°‹age
.
å™s
.
csw_£¡
 = 0;

822 
	`£t_sbc_°©us_good
(&
_mass_°‹age
);

824 
	`usbd_ªgi°î_£t_c⁄fig_ˇŒback
(
usbd_dev
, 
msc_£t_c⁄fig
);

826  &
_mass_°‹age
;

827 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\DESCRI~1.H

1 #i‚de‡
_DESCRIPTOR_H


2 
	#_DESCRIPTOR_H


	)

4 
	#CONCAT
(
x
, 
y
Ëx ## 
	)
y

5 
	#CONCAT_EXPANDED
(
x
, 
y
Ë
	`CONCAT
(x, y)

	)

7 
	#HID_RI_DATA_SIZE_MASK
 0x03

	)

8 
	#HID_RI_TYPE_MASK
 0x0C

	)

9 
	#HID_RI_TAG_MASK
 0xF0

	)

11 
	#HID_RI_TYPE_MAIN
 0x00

	)

12 
	#HID_RI_TYPE_GLOBAL
 0x04

	)

13 
	#HID_RI_TYPE_LOCAL
 0x08

	)

15 
	#HID_RI_DATA_BITS_0
 0x00

	)

16 
	#HID_RI_DATA_BITS_8
 0x01

	)

17 
	#HID_RI_DATA_BITS_16
 0x02

	)

18 
	#HID_RI_DATA_BITS_32
 0x03

	)

19 
	#HID_RI_DATA_BITS
(
D©aBôs
Ë
	`CONCAT_EXPANDED
(
HID_RI_DATA_BITS_
, D©aBôs)

	)

21 
	#_HID_RI_ENCODE_0
(
D©a
)

	)

22 
	#_HID_RI_ENCODE_8
(
D©a
Ë, (D©®& 0xFF)

	)

23 
	#_HID_RI_ENCODE_16
(
D©a
Ë
	`_HID_RI_ENCODE_8
(D©aË_HID_RI_ENCODE_8(D©®>> 8)

	)

24 
	#_HID_RI_ENCODE_32
(
D©a
Ë
	`_HID_RI_ENCODE_16
(D©aË_HID_RI_ENCODE_16(D©®>> 16)

	)

25 
	#_HID_RI_ENCODE
(
D©aBôs
, ...Ë
	`CONCAT_EXPANDED
(
_HID_RI_ENCODE_
, 
	`D©aBôs
(
__VA_ARGS__
))

	)

27 
	#_HID_RI_ENTRY
(
Ty≥
, 
Tag
, 
D©aBôs
, ...Ë(Ty≥ | Tag | 
	`HID_RI_DATA_BITS
(D©aBôs)Ë
	`_HID_RI_ENCODE
(D©aBôs, (
__VA_ARGS__
))

	)

29 
	#HID_IOF_CONSTANT
 (1 << 0)

	)

30 
	#HID_IOF_DATA
 (0 << 0)

	)

31 
	#HID_IOF_VARIABLE
 (1 << 1)

	)

32 
	#HID_IOF_ARRAY
 (0 << 1)

	)

33 
	#HID_IOF_RELATIVE
 (1 << 2)

	)

34 
	#HID_IOF_ABSOLUTE
 (0 << 2)

	)

35 
	#HID_IOF_WRAP
 (1 << 3)

	)

36 
	#HID_IOF_NO_WRAP
 (0 << 3)

	)

37 
	#HID_IOF_NON_LINEAR
 (1 << 4)

	)

38 
	#HID_IOF_LINEAR
 (0 << 4)

	)

39 
	#HID_IOF_NO_PREFERRED_STATE
 (1 << 5)

	)

40 
	#HID_IOF_PREFERRED_STATE
 (0 << 5)

	)

41 
	#HID_IOF_NULLSTATE
 (1 << 6)

	)

42 
	#HID_IOF_NO_NULL_POSITION
 (0 << 6)

	)

43 
	#HID_IOF_VOLATILE
 (1 << 7)

	)

44 
	#HID_IOF_NON_VOLATILE
 (0 << 7)

	)

45 
	#HID_IOF_BUFFERED_BYTES
 (1 << 8)

	)

46 
	#HID_IOF_BITFIELD
 (0 << 8)

	)

48 
	#HID_RI_INPUT
(
D©aBôs
, ...Ë
	`_HID_RI_ENTRY
(
HID_RI_TYPE_MAIN
 , 0x80, D©aBôs, 
__VA_ARGS__
)

	)

49 
	#HID_RI_OUTPUT
(
D©aBôs
, ...Ë
	`_HID_RI_ENTRY
(
HID_RI_TYPE_MAIN
 , 0x90, D©aBôs, 
__VA_ARGS__
)

	)

50 
	#HID_RI_COLLECTION
(
D©aBôs
, ...Ë
	`_HID_RI_ENTRY
(
HID_RI_TYPE_MAIN
 , 0xA0, D©aBôs, 
__VA_ARGS__
)

	)

51 
	#HID_RI_FEATURE
(
D©aBôs
, ...Ë
	`_HID_RI_ENTRY
(
HID_RI_TYPE_MAIN
 , 0xB0, D©aBôs, 
__VA_ARGS__
)

	)

52 
	#HID_RI_END_COLLECTION
(
D©aBôs
, ...Ë
	`_HID_RI_ENTRY
(
HID_RI_TYPE_MAIN
 , 0xC0, D©aBôs, 
__VA_ARGS__
)

	)

53 
	#HID_RI_USAGE_PAGE
(
D©aBôs
, ...Ë
	`_HID_RI_ENTRY
(
HID_RI_TYPE_GLOBAL
, 0x00, D©aBôs, 
__VA_ARGS__
)

	)

54 
	#HID_RI_LOGICAL_MINIMUM
(
D©aBôs
, ...Ë
	`_HID_RI_ENTRY
(
HID_RI_TYPE_GLOBAL
, 0x10, D©aBôs, 
__VA_ARGS__
)

	)

55 
	#HID_RI_LOGICAL_MAXIMUM
(
D©aBôs
, ...Ë
	`_HID_RI_ENTRY
(
HID_RI_TYPE_GLOBAL
, 0x20, D©aBôs, 
__VA_ARGS__
)

	)

56 
	#HID_RI_PHYSICAL_MINIMUM
(
D©aBôs
, ...Ë
	`_HID_RI_ENTRY
(
HID_RI_TYPE_GLOBAL
, 0x30, D©aBôs, 
__VA_ARGS__
)

	)

57 
	#HID_RI_PHYSICAL_MAXIMUM
(
D©aBôs
, ...Ë
	`_HID_RI_ENTRY
(
HID_RI_TYPE_GLOBAL
, 0x40, D©aBôs, 
__VA_ARGS__
)

	)

58 
	#HID_RI_UNIT_EXPONENT
(
D©aBôs
, ...Ë
	`_HID_RI_ENTRY
(
HID_RI_TYPE_GLOBAL
, 0x50, D©aBôs, 
__VA_ARGS__
)

	)

59 
	#HID_RI_UNIT
(
D©aBôs
, ...Ë
	`_HID_RI_ENTRY
(
HID_RI_TYPE_GLOBAL
, 0x60, D©aBôs, 
__VA_ARGS__
)

	)

60 
	#HID_RI_REPORT_SIZE
(
D©aBôs
, ...Ë
	`_HID_RI_ENTRY
(
HID_RI_TYPE_GLOBAL
, 0x70, D©aBôs, 
__VA_ARGS__
)

	)

61 
	#HID_RI_REPORT_ID
(
D©aBôs
, ...Ë
	`_HID_RI_ENTRY
(
HID_RI_TYPE_GLOBAL
, 0x80, D©aBôs, 
__VA_ARGS__
)

	)

62 
	#HID_RI_REPORT_COUNT
(
D©aBôs
, ...Ë
	`_HID_RI_ENTRY
(
HID_RI_TYPE_GLOBAL
, 0x90, D©aBôs, 
__VA_ARGS__
)

	)

63 
	#HID_RI_PUSH
(
D©aBôs
, ...Ë
	`_HID_RI_ENTRY
(
HID_RI_TYPE_GLOBAL
, 0xA0, D©aBôs, 
__VA_ARGS__
)

	)

64 
	#HID_RI_POP
(
D©aBôs
, ...Ë
	`_HID_RI_ENTRY
(
HID_RI_TYPE_GLOBAL
, 0xB0, D©aBôs, 
__VA_ARGS__
)

	)

65 
	#HID_RI_USAGE
(
D©aBôs
, ...Ë
	`_HID_RI_ENTRY
(
HID_RI_TYPE_LOCAL
 , 0x00, D©aBôs, 
__VA_ARGS__
)

	)

66 
	#HID_RI_USAGE_MINIMUM
(
D©aBôs
, ...Ë
	`_HID_RI_ENTRY
(
HID_RI_TYPE_LOCAL
 , 0x10, D©aBôs, 
__VA_ARGS__
)

	)

67 
	#HID_RI_USAGE_MAXIMUM
(
D©aBôs
, ...Ë
	`_HID_RI_ENTRY
(
HID_RI_TYPE_LOCAL
 , 0x20, D©aBôs, 
__VA_ARGS__
)

	)

70 
	#CD_A_RESERVED
 (1<<7)

	)

71 
	#CD_A_SELFPOWERED
 (1<<6)

	)

72 
	#CD_A_REMOTEWAKEUP
 (1<<5)

	)

75 
	#CD_MP_100MA
 50

	)

78 
	#ID_IS_NONE
 0

	)

79 
	#ID_IS_BOOT
 1

	)

82 
	#ID_IP_NONE
 0

	)

83 
	#ID_IP_KEYBOARD
 1

	)

84 
	#ID_IP_MOUSE
 2

	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\USB_KE~1.H

1 #i‚de‡
_KEYCODE_H


2 
	#_KEYCODE_H


	)

12 
	ehid_keybﬂrd_key∑d_ußge
 {

13 
	mEVENT_NONE
 = 0,

14 
	mEVENT_ERRORROLLOVER
,

15 
	mEVENT_POSTFAIL
,

16 
	mEVENT_ERRORUNDEFINED
,

17 
	mKEY_A
,

18 
	mKEY_B
,

19 
	mKEY_C
,

20 
	mKEY_D
,

21 
	mKEY_E
,

22 
	mKEY_F
,

23 
	mKEY_G
,

24 
	mKEY_H
,

25 
	mKEY_I
,

26 
	mKEY_J
,

27 
	mKEY_K
,

28 
	mKEY_L
,

29 
	mKEY_M
,

30 
	mKEY_N
,

31 
	mKEY_O
,

32 
	mKEY_P
,

33 
	mKEY_Q
,

34 
	mKEY_R
,

35 
	mKEY_S
,

36 
	mKEY_T
,

37 
	mKEY_U
,

38 
	mKEY_V
,

39 
	mKEY_W
,

40 
	mKEY_X
,

41 
	mKEY_Y
,

42 
	mKEY_Z
,

43 
	mKEY_1
,

44 
	mKEY_2
,

45 
	mKEY_3
,

46 
	mKEY_4
,

47 
	mKEY_5
,

48 
	mKEY_6
,

49 
	mKEY_7
,

50 
	mKEY_8
,

51 
	mKEY_9
,

52 
	mKEY_0
,

53 
	mKEY_ENTER
,

54 
	mKEY_ESC
,

55 
	mKEY_BACKSPACE
,

56 
	mKEY_TAB
,

57 
	mKEY_SPACE
,

58 
	mKEY_MINUS
,

59 
	mKEY_EQUAL
,

60 
	mKEY_LEFTBRACE
,

61 
	mKEY_RIGHTBRACE
,

62 
	mKEY_BACKSLASH
,

63 
	mKEY_NUMBER
,

64 
	mKEY_SEMICOLON
,

65 
	mKEY_QUOTE
,

66 
	mKEY_BACKTICK
,

67 
	mKEY_COMMA
,

68 
	mKEY_PERIOD
,

69 
	mKEY_SLASH
,

70 
	mKEY_CAPS_LOCK
,

71 
	mKEY_F1
,

72 
	mKEY_F2
,

73 
	mKEY_F3
,

74 
	mKEY_F4
,

75 
	mKEY_F5
,

76 
	mKEY_F6
,

77 
	mKEY_F7
,

78 
	mKEY_F8
,

79 
	mKEY_F9
,

80 
	mKEY_F10
,

81 
	mKEY_F11
,

82 
	mKEY_F12
,

83 
	mKEY_PRINTSCREEN
,

84 
	mKEY_SCROLL_LOCK
,

85 
	mKEY_PAUSE
,

86 
	mKEY_INSERT
,

87 
	mKEY_HOME
,

88 
	mKEY_PAGE_UP
,

89 
	mKEY_DELETE
,

90 
	mKEY_END
,

91 
	mKEY_PAGE_DOWN
,

92 
	mKEY_RIGHT
,

93 
	mKEY_LEFT
,

94 
	mKEY_DOWN
,

95 
	mKEY_UP
,

96 
	mKEY_NUM_LOCK
,

97 
	mKEY_PAD_SLASH
,

98 
	mKEY_PAD_ASTERISK
,

99 
	mKEY_PAD_MINUS
,

100 
	mKEY_PAD_PLUS
,

101 
	mKEY_PAD_ENTER
,

102 
	mKEY_PAD_1
,

103 
	mKEY_PAD_2
,

104 
	mKEY_PAD_3
,

105 
	mKEY_PAD_4
,

106 
	mKEY_PAD_5
,

107 
	mKEY_PAD_6
,

108 
	mKEY_PAD_7
,

109 
	mKEY_PAD_8
,

110 
	mKEY_PAD_9
,

111 
	mKEY_PAD_0
,

112 
	mKEY_PAD_PERIOD
,

113 
	mKEY_ISO_SLASH
,

114 
	mKEY_APP
,

115 
	mEVENT_STATUS
,

116 
	mKEY_PAD_EQUAL
,

117 
	mKEY_F13
,

118 
	mKEY_F14
,

119 
	mKEY_F15
,

120 
	mKEY_F16
,

121 
	mKEY_F17
,

122 
	mKEY_F18
,

123 
	mKEY_F19
,

124 
	mKEY_F20
,

125 
	mKEY_F21
,

126 
	mKEY_F22
,

127 
	mKEY_F23
,

128 
	mKEY_F24
,

129 
	mKEY_EXEC
,

130 
	mKEY_HELP
,

131 
	mKEY_MENU
,

132 
	mKEY_SELECT
,

133 
	mKEY_STOP
,

134 
	mKEY_AGAIN
,

135 
	mKEY_UNDO
,

136 
	mKEY_CUT
,

137 
	mKEY_COPY
,

138 
	mKEY_PASTE
,

139 
	mKEY_FIND
,

140 
	mKEY_MUTE
,

141 
	mKEY_VOL_UP
,

142 
	mKEY_VOL_DOWN
,

143 
	mKEY_CAPS_TLOCK
,

144 
	mKEY_NUM_TLOCK
,

145 
	mKEY_SCROLL_TLOCK
,

146 
	mKEY_PAD_COMMA
,

147 
	mKEY_PAD_EQUAL_AS
,

148 
	mKEY_INTER1
,

149 
	mKEY_INTER2
,

150 
	mKEY_INTER3
,

151 
	mKEY_INTER4
,

152 
	mKEY_INTER5
,

153 
	mKEY_INTER6
,

154 
	mKEY_INTER7
,

155 
	mKEY_INTER8
,

156 
	mKEY_INTER9
,

157 
	mKEY_LANG1
,

158 
	mKEY_LANG2
,

159 
	mKEY_LANG3
,

160 
	mKEY_LANG4
,

161 
	mKEY_LANG5
,

162 
	mKEY_LANG6
,

163 
	mKEY_LANG7
,

164 
	mKEY_LANG8
,

165 
	mKEY_LANG9
,

166 
	mKEY_ALT_ERASE
,

167 
	mKEY_SYSREQ_ATT
,

168 
	mKEY_CANCEL
,

169 
	mKEY_CLEAR
,

170 
	mKEY_PRIOR
,

171 
	mKEY_RETURN
,

172 
	mKEY_SEPARATOR
,

173 
	mKEY_OUT
,

174 
	mKEY_OPER
,

175 
	mKEY_CLEAR_AGAIN
,

176 
	mKEY_CRSEL_PROPS
,

177 
	mKEY_EXSEL
,

181 
	mKEY_PAD_00
 = 0xB0,

182 
	mKEY_PAD_000
,

183 
	mKEY_1000_SEP
,

184 
	mKEY_DECIMAL_SEP
,

185 
	mKEY_CURRENCY_MAIN
,

186 
	mKEY_CURRENCY_SUB
,

187 
	mKEY_PAD_LPAREN
,

188 
	mKEY_PAD_RPAREN
,

189 
	mKEY_PAD_LBRACE
,

190 
	mKEY_PAD_RBRACE
,

191 
	mKEY_PAD_TAB
,

192 
	mKEY_PAD_BACKSPACE
,

193 
	mKEY_PAD_A
,

194 
	mKEY_PAD_B
,

195 
	mKEY_PAD_C
,

196 
	mKEY_PAD_D
,

197 
	mKEY_PAD_E
,

198 
	mKEY_PAD_F
,

199 
	mKEY_PAD_XOR
,

200 
	mKEY_PAD_CHEVRON
,

201 
	mKEY_PAD_PERCENT
,

202 
	mKEY_PAD_LTHAN
,

203 
	mKEY_PAD_GTHAN
,

204 
	mKEY_PAD_BITAND
,

205 
	mKEY_PAD_AND
,

206 
	mKEY_PAD_BITOR
,

207 
	mKEY_PAD_OR
,

208 
	mKEY_PAD_COLON
,

209 
	mKEY_PAD_POUND
,

210 
	mKEY_PAD_SPACE
,

211 
	mKEY_PAD_AT
,

212 
	mKEY_PAD_EXCLAIM
,

213 
	mKEY_PAD_MEM_STORE
,

214 
	mKEY_PAD_MEM_RECALL
,

215 
	mKEY_PAD_MEM_CLEAR
,

216 
	mKEY_PAD_MEM_ADD
,

217 
	mKEY_PAD_MEM_SUB
,

218 
	mKEY_PAD_MEM_MULT
,

219 
	mKEY_PAD_MEM_DIV
,

220 
	mKEY_PAD_PLUS_MINUS
,

221 
	mKEY_PAD_CLEAR
,

222 
	mKEY_PAD_CLEAR_ENTRY
,

223 
	mKEY_PAD_BINARY
,

224 
	mKEY_PAD_OCTAL
,

225 
	mKEY_PAD_DECIMAL
,

226 
	mKEY_PAD_HEX
,

230 
	mKEY_LCTRL
 = 0xE0,

231 
	mKEY_LSHIFT
,

232 
	mKEY_LALT
,

233 
	mKEY_LGUI
,

234 
	mKEY_RCTRL
,

235 
	mKEY_RSHIFT
,

236 
	mKEY_RALT
,

237 
	mKEY_RGUI
,

242 
	#MODIFIER_BIT
(
mod
Ë(1<<(mod & 0x07))

	)

244 
	ehid_sy°em_ußge
 {

248 
	mSYSTEM_START
 = 0x003D,

249 
	mSYSTEM_SELECT
,

253 
	mSYSTEM_POWER
 = 0x0081,

254 
	mSYSTEM_SLEEP
,

255 
	mSYSTEM_WAKEUP
,

256 
	mSYSTEM_CONTEXTMENU
,

257 
	mSYSTEM_MAINMENU
,

258 
	mSYSTEM_APPMENU
,

259 
	mSYSTEM_MENUHELP
,

260 
	mSYSTEM_MENUEXIT
,

261 
	mSYSTEM_MENUSELECT
,

262 
	mSYSTEM_MENURIGHT
,

263 
	mSYSTEM_MENULEFT
,

264 
	mSYSTEM_MENUUP
,

265 
	mSYSTEM_MENUDOWN
,

266 
	mSYSTEM_COLDRESTART
,

267 
	mSYSTEM_WARMRESTART
,

268 
	mSYSTEM_DPADUP
,

269 
	mSYSTEM_DPADDOWN
,

270 
	mSYSTEM_DPADRIGHT
,

271 
	mSYSTEM_DPADLEFT
,

274 
	ehid_c⁄sumî_ußge
 {

276 
	mCONSUMER_POWER
 = 0x30,

277 
	mCONSUMER_RESET
,

278 
	mCONSUMER_SLEEP
,

279 
	mCONSUMER_SLEEPAFTER
,

280 
	mCONSUMER_SLEEPMODE
,

281 
	mCONSUMER_ILLUMINATION
,

282 
	mCONSUMER_FUNCBTNS
,

286 
	mCONSUMER_MENU
 = 0x40,

287 
	mCONSUMER_MENUPICK
,

288 
	mCONSUMER_MENUUP
,

289 
	mCONSUMER_MENUDOWN
,

290 
	mCONSUMER_MENULEFT
,

291 
	mCONSUMER_MENURIGHT
,

292 
	mCONSUMER_MENUESCAPE
,

293 
	mCONSUMER_MENUVALINC
,

294 
	mCONSUMER_MENUVALDEC
,

298 
	mCONSUMER_DATAONSCREEN
 = 0x60,

299 
	mCONSUMER_CC
,

300 
	mCONSUMER_CCSELECT
,

301 
	mCONSUMER_VCRTV
,

302 
	mCONSUMER_BROADCASTMODE
,

303 
	mCONSUMER_SNAPSHOT
,

304 
	mCONSUMER_STILL
,

308 
	mCONSUMER_SELECTION
 = 0x80,

309 
	mCONSUMER_ASSIGNSELECTION
,

310 
	mCONSUMER_MODESTEP
,

311 
	mCONSUMER_RECALLLAST
,

312 
	mCONSUMER_ENTERCHANNEL
,

313 
	mCONSUMER_ORDERMOVIE
,

314 
	mCONSUMER_CHANNEL
,

315 
	mCONSUMER_MEDIASELECTION
,

316 
	mCONSUMER_MEDIASELECTCOMPUTER
,

317 
	mCONSUMER_MEDIASELECTTV
,

318 
	mCONSUMER_MEDIASELECTWWW
,

319 
	mCONSUMER_MEDIASELECTDVD
,

320 
	mCONSUMER_MEDIASELECTTELEPHONE
,

321 
	mCONSUMER_MEDIASELECTPROGRAMGUIDE
,

322 
	mCONSUMER_MEDIASELECTVIDEOPHONE
,

323 
	mCONSUMER_MEDIASELECTGAMES
,

324 
	mCONSUMER_MEDIASELECTMESSAGES
 = 0x90,

325 
	mCONSUMER_MEDIASELECTCD
,

326 
	mCONSUMER_MEDIASELECTVCR
,

327 
	mCONSUMER_MEDIASELECTTUNER
,

328 
	mCONSUMER_QUIT
,

329 
	mCONSUMER_HELP
,

330 
	mCONSUMER_MEDIASELECTTAPE
,

331 
	mCONSUMER_MEDIASELECTCABLE
,

332 
	mCONSUMER_MEDIASELECTSATELLITE
,

333 
	mCONSUMER_MEDIASELECTSECURITY
,

334 
	mCONSUMER_MEDIASELECTHOME
,

335 
	mCONSUMER_MEDIASELECTCALL
,

336 
	mCONSUMER_CHANNELINC
,

337 
	mCONSUMER_CHANNELDEC
,

338 
	mCONSUMER_MEDIASELECTSAP
,

342 
	mCONSUMER_VCRPLUS
 = 0xA0,

343 
	mCONSUMER_ONCE
,

344 
	mCONSUMER_DAILY
,

345 
	mCONSUMER_WEEKLY
,

346 
	mCONSUMER_MONTHLY
,

350 
	mCONSUMER_PLAY
 = 0xB0,

351 
	mCONSUMER_PAUSE
,

352 
	mCONSUMER_RECORD
,

353 
	mCONSUMER_FASTFORWARD
,

354 
	mCONSUMER_REWIND
,

355 
	mCONSUMER_SCANNEXTTRACK
,

356 
	mCONSUMER_SCANPREVIOUSTRACK
,

357 
	mCONSUMER_STOP
,

358 
	mCONSUMER_EJECT
,

359 
	mCONSUMER_RANDOMPLAY
,

360 
	mCONSUMER_SELECTDISC
,

361 
	mCONSUMER_ENTERDISC
,

362 
	mCONSUMER_REPEAT
,

363 
	mCONSUMER_TRACKING
,

364 
	mCONSUMER_TRACKNORMAL
,

365 
	mCONSUMER_SLOWTRACKING
,

366 
	mCONSUMER_FRAMEFORWARD
,

367 
	mCONSUMER_FRAMEBACK
,

368 
	mCONSUMER_MARK
,

369 
	mCONSUMER_CLEARMARK
,

370 
	mCONSUMER_REPEATFROMMARK
,

371 
	mCONSUMER_RETURNTOMARK
,

372 
	mCONSUMER_SEARCHMARKFORWARD
,

373 
	mCONSUMER_SEARCHMARKBACKWARDS
,

374 
	mCONSUMER_COUNTERRESET
,

375 
	mCONSUMER_SHOWCOUNTER
,

376 
	mCONSUMER_TRACKINGINC
,

377 
	mCONSUMER_TRACKINGDEC
,

378 
	mCONSUMER_STOPEJECT
,

379 
	mCONSUMER_PLAYPAUSE
,

380 
	mCONSUMER_PLAYSKIP
,

384 
	mCONSUMER_VOLUME
 = 0xE0,

385 
	mCONSUMER_BALANCE
,

386 
	mCONSUMER_MUTE
,

387 
	mCONSUMER_BASS
,

388 
	mCONSUMER_TREBLE
,

389 
	mCONSUMER_BASSBOOST
,

390 
	mCONSUMER_SURROUNDMODE
,

391 
	mCONSUMER_LOUDNESS
,

392 
	mCONSUMER_MPX
,

393 
	mCONSUMER_VOLUMEINC
,

394 
	mCONSUMER_VOLUMEDEC
,

408 
	mCONSUMER_APPLICATIONLAUNCHBUTTONS
 = 0x180,

409 
	mCONSUMER_AL_CONFIGURATION
,

410 
	mCONSUMER_AL_PROGRAMMABLEBUTTON
,

411 
	mCONSUMER_AL_CONSUMERCONTROL
,

412 
	mCONSUMER_AL_WORDPROCESSOR
,

413 
	mCONSUMER_AL_TEXTEDITOR
,

414 
	mCONSUMER_AL_SPREADSHEET
,

415 
	mCONSUMER_AL_GRAPHICSEDITOR
,

416 
	mCONSUMER_AL_PRESENTATIONAPP
,

417 
	mCONSUMER_AL_DATABASEAPP
,

418 
	mCONSUMER_AL_EMAILREADER
,

419 
	mCONSUMER_AL_NEWSREADER
,

420 
	mCONSUMER_AL_VOICEMAIL
,

421 
	mCONSUMER_AL_ADDRESSBOOK
,

422 
	mCONSUMER_AL_CALENDAR
,

423 
	mCONSUMER_AL_TASKMANAGER
,

424 
	mCONSUMER_AL_JOURNAL
 = 0x190,

425 
	mCONSUMER_AL_FINANCE
,

426 
	mCONSUMER_AL_CALCULATOR
,

427 
	mCONSUMER_AL_PLAYBACK
,

428 
	mCONSUMER_AL_LOCALBROWSER
,

429 
	mCONSUMER_AL_BROWSER
,

430 
	mCONSUMER_AL_INTERNETBROWSER
,

431 
	mCONSUMER_AL_REMOTENETWORKING
,

432 
	mCONSUMER_AL_CONFERENCE
,

433 
	mCONSUMER_AL_CHAT
,

434 
	mCONSUMER_AL_DIALER
,

435 
	mCONSUMER_AL_LOGON
,

436 
	mCONSUMER_AL_LOGOFF
,

437 
	mCONSUMER_AL_LOGONLOGOFF
,

438 
	mCONSUMER_AL_TERMINALLOCK
,

439 
	mCONSUMER_AL_CONTROLPANEL
,

440 
	mCONSUMER_AL_COMMANDLINE
,

441 
	mCONSUMER_AL_PROCESSMANAGER
,

442 
	mCONSUMER_AL_SELECTTASK
,

443 
	mCONSUMER_AL_NEXTTASK
,

444 
	mCONSUMER_AL_PREVIOUSTASK
,

445 
	mCONSUMER_AL_PREEMPTIVEHALT
,

446 
	mCONSUMER_AL_HELPCENTER
,

447 
	mCONSUMER_AL_DOCUMENTS
,

448 
	mCONSUMER_AL_THESAURUS
,

449 
	mCONSUMER_AL_DICTIONARY
,

450 
	mCONSUMER_AL_DESKTOP
,

451 
	mCONSUMER_AL_SPELLCHECK
,

452 
	mCONSUMER_AL_GRAMMARCHECK
,

453 
	mCONSUMER_AL_WIRELESSSTATUS
,

454 
	mCONSUMER_AL_KEYBOARDLAYOUT
,

455 
	mCONSUMER_AL_VIRUSPROTECTION
,

456 
	mCONSUMER_AL_ENCRYPTION
,

457 
	mCONSUMER_AL_SCREENSAVER
,

458 
	mCONSUMER_AL_ALARMS
,

459 
	mCONSUMER_AL_CLOCK
,

460 
	mCONSUMER_AL_FILEBROWSER
,

461 
	mCONSUMER_AL_POWERSTATUS
,

462 
	mCONSUMER_AL_IMAGEBROWSER
,

463 
	mCONSUMER_AL_AUDIOBROWSER
,

464 
	mCONSUMER_AL_MOVIEBROWSER
,

465 
	mCONSUMER_AL_DIGITALRIGHTSMANAGER
,

466 
	mCONSUMER_AL_DIGITALWALLET
,

470 
	mCONSUMER_AL_IM
 = 0x1bc,

471 
	mCONSUMER_AL_INFO
,

475 
	mCONSUMER_GENERICGUIAPPLICATION
 = 0x200,

476 
	mCONSUMER_AC_NEW
,

477 
	mCONSUMER_AC_OPEN
,

478 
	mCONSUMER_AC_CLOSE
,

479 
	mCONSUMER_AC_EXIT
,

480 
	mCONSUMER_AC_MAXIMIZE
,

481 
	mCONSUMER_AC_MINIMIZE
,

482 
	mCONSUMER_AC_SAVE
,

483 
	mCONSUMER_AC_PRINT
,

484 
	mCONSUMER_AC_PROPERTIES
,

485 
	mCONSUMER_AC_UNDO
,

486 
	mCONSUMER_AC_COPY
,

487 
	mCONSUMER_AC_CUT
,

488 
	mCONSUMER_AC_PASTE
,

489 
	mCONSUMER_AC_SELECTALL
,

490 
	mCONSUMER_AC_FIND
,

491 
	mCONSUMER_AC_FINDREPLACE
,

492 
	mCONSUMER_AC_SEARCH
,

493 
	mCONSUMER_AC_GOTO
,

494 
	mCONSUMER_AC_HOME
,

495 
	mCONSUMER_AC_BACK
,

496 
	mCONSUMER_AC_FORWARD
,

497 
	mCONSUMER_AC_STOP
,

498 
	mCONSUMER_AC_REFRESH
,

499 
	mCONSUMER_AC_PREVIOUSLINK
,

500 
	mCONSUMER_AC_NEXTLINK
,

501 
	mCONSUMER_AC_BOOKMARKS
,

502 
	mCONSUMER_AC_HISTORY
,

503 
	mCONSUMER_AC_SUBSCRIPTIONS
,

504 
	mCONSUMER_AC_ZOOMIN
,

505 
	mCONSUMER_AC_ZOOMOUT
,

506 
	mCONSUMER_AC_ZOOM
,

508 
	mCONSUMER_AC_SCROLLUP
 = 0x233,

509 
	mCONSUMER_AC_SCROLLDOWN
,

510 
	mCONSUMER_AC_SCROLL
,

511 
	mCONSUMER_AC_PANLEFT
,

512 
	mCONSUMER_AC_PANRIGHT
,

513 
	mCONSUMER_AC_PAN
,

514 
	mCONSUMER_AC_NEWWINDOW
,

515 
	mCONSUMER_AC_TILEHORIZONTALLY
,

516 
	mCONSUMER_AC_TILEVERTICALLY
,

517 
	mCONSUMER_AC_FORMAT
,

518 
	mCONSUMER_AC_EDIT
,

520 
	mCONSUMER_AC_CANCEL
 = 0x25f,

522 
	mCONSUMER_AC_INSERT
 = 0x269,

523 
	mCONSUMER_AC_DELETE
,

525 
	mCONSUMER_AC_REDO
 = 0x279,

527 
	mCONSUMER_AC_REPLY
 = 0x289,

528 
	mCONSUMER_AC_FORWARDMSG
 = 0x28b,

529 
	mCONSUMER_AC_SEND
,

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\clock.h

1 #i‚de‡
_CLOCK_H


2 
	#_CLOCK_H


	)

4 
	~<°dboﬁ.h
>

5 
	~<°döt.h
>

7 
˛ock_öô
();

8 
uöt32_t
 
˛ock_now
();

9 
uöt32_t
 
timî_£t
(uöt32_à
dñay
);

10 
boﬁ
 
timî_∑s£d
(
uöt32_t
 
timî
);

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\config.h

28 #i‚de‡
_CONFIG_H


29 
	#_CONFIG_H


	)

31 
	~"usb.h
"

33 
	#SERIAL_BUF_SIZEIN
 (
EP_SIZE_SERIALDATAOUT
)

	)

34 
	#SERIAL_BUF_SIZEOUT
 (
EP_SIZE_SERIALDATAIN
)

	)

45 
	#ROWS_NUM
 5

	)

46 
	#ROWS_GPIO
 
GPIOA


	)

47 
	#ROWS_RCC
 
RCC_GPIOA


	)

48 
	#ROWS_BV
 0b11111

	)

50 
	#COLS_NUM
 5

	)

51 
	#COLS_GPIO
 
GPIOB


	)

52 
	#COLS_RCC
 
RCC_GPIOB


	)

53 
	#COLS_BV
 0b11000111

	)

54 
	#COLS_DECODE
(
x
Ë(((x >> 3Ë& 0b11000Ë| (x & 0b111))

	)

56 
	#DEBOUNCE_MS
 10

	)

58 
	#LEDS_GPIO
 
GPIOC


	)

59 
	#LEDS_RCC
 
RCC_GPIOC


	)

60 
	#LEDS_BV
 (
GPIO13
 | 
GPIO14
 | 
GPIO15
)

	)

61 
	#LED1IO
 
GPIO13


	)

62 
	#LED2IO
 
GPIO14


	)

63 
	#LED3IO
 
GPIO15


	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\elog.h

1 #i‚de‡
_LOG_H


2 
	#_LOG_H


	)

4 
	~<°döt.h
>

5 
	~"£rül.h
"

6 
	~<°dio.h
>

8 
ñog_°¨t
(c⁄° *
«me
, 
uöt16_t
 
löe
);

10 
	#ñog
 
	`ñog_°¨t
(
__FILE__
, 
__LINE__
), 
¥ötf


	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\extrakey.h

1 #i‚de‡
_EXTRAKEY_H


2 
	#_EXTRAKEY_H


	)

4 
	~<°döt.h
>

5 
	~"keym≠.h
"

6 
	~"usb.h
"

8 
uöt8_t
 
exåakey_idÀ
;

10 
ªp‹t_exåakey_t
 *
exåakey_ªp‹t
();

11 
exåakey_c⁄sumî_evít
(
evít_t
 *
evít
, 
boﬁ
 
¥es£d
);

12 
exåakey_sy°em_evít
(
evít_t
 *
evít
, 
boﬁ
 
¥es£d
);

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\hid.h

4 #i‚de‡
_HID_H


5 
	#_HID_H


	)

8 
	#USBHID_REQ_GET_REPORT
 0x01

	)

9 
	#USBHID_REQ_GET_IDLE
 0x02

	)

10 
	#USBHID_REQ_GET_PROTOCOL
 0x03

	)

11 
	#USBHID_REQ_SET_REPORT
 0x09

	)

12 
	#USBHID_REQ_SET_IDLE
 0x0a

	)

13 
	#USBHID_REQ_SET_PROTOCOL
 0x0b

	)

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\keyboard.h

1 #i‚de‡
_KEYBOARD_H


2 
	#_KEYBOARD_H


	)

4 
	~<°döt.h
>

5 
	~"keym≠.h
"

6 
	~"usb.h
"

8 
boﬁ
 
keybﬂrd_a˘ive
;

9 
uöt8_t
 
keybﬂrd_idÀ
;

10 
boﬁ
 
keybﬂrd_dúty
;

11 
boﬁ
 
nkro_dúty
;

12 
ªp‹t_keybﬂrd_t
 
	gkeybﬂrd_°©e
;

13 
ªp‹t_nkro_t
 
	gnkro_°©e
;

15 
keybﬂrd_£t_¥Ÿocﬁ
(
uöt8_t
 
¥Ÿocﬁ
);

16 
uöt8_t
 *
keybﬂrd_gë_¥Ÿocﬁ
();

17 
ªp‹t_keybﬂrd_t
 *
keybﬂrd_ªp‹t
();

18 
keybﬂrd_evít
(
evít_t
 *
evít
, 
boﬁ
 
¥es£d
);

19 
keybﬂrd_add_key
(
uöt8_t
 
key
);

20 
keybﬂrd_dñ_key
(
uöt8_t
 
key
);

21 
keybﬂrd_£t_Àds
(
uöt8_t
 
Àds
);

22 
keybﬂrd_add_modifõr
(
uöt8_t
 
modifõr
);

23 
keybﬂrd_dñ_modifõr
(
uöt8_t
 
modifõr
);

25 
uöt8_t
 
nkro_idÀ
;

26 
ªp‹t_nkro_t
 *
nkro_ªp‹t
();

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\keymap.h

16 #i‚de‡
_KEYMAP_H


17 
	#_KEYMAP_H


	)

18 
	~"c⁄fig.h
"

21 
uöt8_t
 
	mty≥
;

23 
uöt8_t
 
	md©a
[3];

25 
uöt8_t
 
	mem±y1
;

26 
uöt8_t
 
	mmod
;

27 
uöt8_t
 
	mcode
;

28 } 
__©åibuã__
 ((
∑cked
)Ë
	mkey
;

30 
uöt8_t
 
	mem±y2
;

31 
uöt16_t
 
	mcode
;

32 } 
__©åibuã__
 ((
∑cked
)Ë
	mexåa
;

34 
uöt8_t
 
	mbuâ⁄
;

35 
öt8_t
 
	mx
;

36 
öt8_t
 
	my
;

37 } 
__©åibuã__
 ((
∑cked
)Ë
	mmou£
;

39 
uöt8_t
 
	mbuâ⁄
;

40 
öt8_t
 
	mh
;

41 
öt8_t
 
	mv
;

42 } 
__©åibuã__
 ((
∑cked
)Ë
	mwhìl
;

44 
uöt8_t
 
	mem±y3
;

45 
uöt8_t
 
	mem±y4
;

46 
uöt8_t
 
	mnumbî
;

47 } 
__©åibuã__
 ((
∑cked
)Ë
	mœyî
;

49 } 
	t__©åibuã__
 ((
	t∑cked
)Ë
	tevít_t
;

51 
evít_t
 
keym≠
[][
ROWS_NUM
][
COLS_NUM
];

54 
	mKMT_KEY
,

55 
	mKMT_LAYER
,

56 
	mKMT_CONSUMER
,

57 
	mKMT_SYSTEM
,

58 
	mKMT_MOUSE
,

59 
	mKMT_WHEEL


62 
	#_K
(
Key
Ë{.
ty≥
 = 
KMT_KEY
, .
key
 = { .
em±y1
 = 0, .
mod
 = 0, .
code
 = 
KEY_
##Key }}

	)

63 
	#_KC
(
Code
Ë{.
ty≥
 = 
KMT_KEY
, .
key
 = { .
em±y1
 = 0, .
mod
 = 0, .
code
 = 0x##Codê}}

	)

64 
	#_S
(
Mod
Ë{.
ty≥
 = 
KMT_KEY
, .
key
 = { .
em±y1
 = 0, .
code
 = 0, .
mod
 = Mod }}

	)

65 
	#_M
(
X
,
Y
Ë{.
ty≥
 = 
KMT_MOUSE
, .
mou£
 = {.
buâ⁄
 = 0, .
x
 = X, .
y
 = Y }}

	)

66 
	#_B
(
Buâ⁄
Ë{.
ty≥
 = 
KMT_MOUSE
, .
mou£
 = {.
buâ⁄
 = Buâ⁄, .
x
 = 0, .
y
 = 0}}

	)

67 
	#_W
(
H
,
V
Ë{.
ty≥
 = 
KMT_WHEEL
, .
whìl
 = {.
buâ⁄
 = 0, .
h
 = H, .
v
 = V }}

	)

68 
	#_C
(
Key
Ë{.
ty≥
 = 
KMT_CONSUMER
, .
exåa
 = { .
em±y2
 = 0, .
code
 = 
CONSUMER_
##Key }}

	)

69 
	#_Y
(
Key
Ë{.
ty≥
 = 
KMT_SYSTEM
, .
exåa
 = { .
em±y2
 = 0, .
code
 = 
SYSTEM_
##Key }}

	)

70 
	#_L
(
Layî
Ë{.
ty≥
 = 
KMT_LAYER
, .
œyî
 = { .
numbî
 = Layî }}

	)

72 
keym≠_evít
(
uöt16_t
 
row
, uöt16_à
cﬁ
, 
boﬁ
 
¥es£d
);

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\mouse.h

1 #i‚de‡
_MOUSE_H


2 
	#_MOUSE_H


	)

4 
	~<°döt.h
>

5 
	~"keym≠.h
"

6 
	~"usb.h
"

8 
uöt8_t
 
mou£_idÀ
;

10 
ªp‹t_mou£_t
 *
mou£_ªp‹t
();

11 
mou£_evít
(
evít_t
 *
evít
, 
boﬁ
 
¥es£d
);

12 
whìl_evít
(
evít_t
 *
evít
, 
boﬁ
 
¥es£d
);

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\ring.h

1 #i‚de‡
_RING_H


2 
	#_RING_H


	)

4 
	~<°döt.h
>

6 
öt32_t
 
	trög_size_t
;

8 
	srög
 {

9 
uöt8_t
 *
	md©a
;

10 
rög_size_t
 
	msize
;

11 
uöt32_t
 
	mbegö
;

12 
uöt32_t
 
	míd
;

13 } 
	trög_t
;

15 
	#RING_SIZE
(
RING
Ë((RING)->
size
 - 1)

	)

16 
	#RING_DATA
(
RING
Ë(RING)->
d©a


	)

17 
	#RING_EMPTY
(
RING
Ë((RING)->
begö
 =(RING)->
íd
)

	)

19 
rög_öô
(
rög_t
 *
rög
, 
uöt8_t
 *
buf
, 
rög_size_t
 
size
);

20 
öt32_t
 
rög_wrôe_ch
(
rög_t
 *
rög
, 
uöt8_t
 
ch
);

21 
öt32_t
 
rög_wrôe
(
rög_t
 *
rög
, 
uöt8_t
 *
d©a
, 
rög_size_t
 
size
);

22 
öt32_t
 
rög_ªad_ch
(
rög_t
 *
rög
, 
uöt8_t
 *
ch
);

23 
öt32_t
 
rög_ªad
(
rög_t
 *
rög
, 
uöt8_t
 *
d©a
, 
rög_size_t
 
size
);

24 
öt32_t
 
rög_ªad_c⁄töeous
(
rög_t
 *
rög
, 
uöt8_t
 **
d©a
);

25 
uöt32_t
 
rög_m¨k
(
rög_t
 *
rög
);

26 
uöt32_t
 
rög_m¨kÀn
(
rög_t
 *
rög
, uöt32_à
m¨k
);

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\serial.h

1 #i‚de‡
_SERIAL_H


2 
	#_SERIAL_H


	)

4 
	~<°d¨g.h
>

5 
	~<°dboﬁ.h
>

6 
	~<°döt.h
>

8 
	~"rög.h
"

10 
boﬁ
 
£rül_a˘ive
;

12 
£rül_ö
(
uöt8_t
 *
buf
, 
uöt16_t
 
Àn
);

13 
£rül_out
();

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\usb.h

1 #i‚de‡
_USB_H


2 
	#_USB_H


	)

3 
	~<lib›ícm3/usb/usbd.h
>

23 
	#IF_KEYBOARD
 0

	)

24 
	#IF_MOUSE
 1

	)

25 
	#IF_EXTRAKEY
 2

	)

26 
	#IF_NKRO
 3

	)

27 
	#IF_SERIALCOMM
 4

	)

28 
	#IF_SERIALDATA
 5

	)

29 
	#IF_MAX
 6

	)

31 
	#EP_KEYBOARD
 1

	)

32 
	#EP_MOUSE
 2

	)

33 
	#EP_EXTRAKEY
 3

	)

34 
	#EP_NKRO
 4

	)

35 
	#EP_SERIALCOMM
 5

	)

36 
	#EP_SERIALDATAIN
 6

	)

37 
	#EP_SERIALDATAOUT
 7

	)

39 
	#EP_SIZE_KEYBOARD
 8

	)

40 
	#EP_SIZE_MOUSE
 5

	)

41 
	#EP_SIZE_EXTRAKEY
 3

	)

42 
	#EP_SIZE_NKRO
 29

	)

44 
	#EP_SIZE_SERIALCOMM
 16

	)

45 
	#EP_SIZE_SERIALDATAIN
 64

	)

46 
	#EP_SIZE_SERIALDATAOUT
 32

	)

48 
	#STRI_MANUFACTURER
 1

	)

49 
	#STRI_PRODUCT
 2

	)

50 
	#STRI_SERIAL
 3

	)

51 
	#STRI_KEYBOARD
 4

	)

52 
	#STRI_MOUSE
 5

	)

53 
	#STRI_EXTRAKEY
 6

	)

54 
	#STRI_NKRO
 7

	)

55 
	#STRI_COMMAND
 8

	)

56 
	#STRI_MAX
 8

	)

58 
	#REPORTID_SYSTEM
 1

	)

59 
	#REPORTID_CONSUMER
 2

	)

61 
	#SEND_RETRIES
 10

	)

67 
	#EP_SIZE_ALIGN
(
x
Ë((x + 0b111Ë& ~0b111)

	)

70 
uöt8_t
 
	møw
[
EP_SIZE_KEYBOARD
];

72 
uöt8_t
 
	mmods
;

73 
uöt8_t
 
	mª£rved
;

74 
uöt8_t
 
	mkeys
[
EP_SIZE_KEYBOARD
 - 2];

76 } 
	t__©åibuã__
 ((
	t∑cked
)Ë
	tªp‹t_keybﬂrd_t
;

79 
uöt8_t
 
	møw
[
EP_SIZE_MOUSE
];

81 
uöt8_t
 
	mbuâ⁄s
;

82 
öt8_t
 
	mx
;

83 
öt8_t
 
	my
;

84 
öt8_t
 
	mv
;

85 
öt8_t
 
	mh
;

87 } 
	t__©åibuã__
 ((
	t∑cked
)Ë
	tªp‹t_mou£_t
;

90 
uöt8_t
 
	møw
[
EP_SIZE_EXTRAKEY
];

92 
uöt8_t
 
	mid
;

93 
uöt8_t
 
	mcodñ
;

94 
uöt8_t
 
	mcodeh
;

96 } 
	t__©åibuã__
 ((
	t∑cked
)Ë
	tªp‹t_exåakey_t
;

99 
uöt8_t
 
	møw
[
EP_SIZE_NKRO
];

101 
uöt8_t
 
	mmods
;

102 
uöt8_t
 
	mbôs
[
EP_SIZE_NKRO
 - 1];

104 } 
	t__©åibuã__
 ((
	t∑cked
)Ë
	tªp‹t_nkro_t
;

107 vﬁ©ûê
uöt32_t
 
usb_ms
;

109 
usb_öô
();

110 
usb_pﬁl
();

111 
uöt32_t
 
usb_now
();

113 
usb_upd©e_keybﬂrd
(
ªp‹t_keybﬂrd_t
 *);

114 
usb_upd©e_mou£
(
ªp‹t_mou£_t
 *);

115 
usb_upd©e_exåakey
(
ªp‹t_exåakey_t
 *);

116 
usb_upd©e_nkro
(
ªp‹t_nkro_t
 *);

118 
cdˇcm_d©a_rx_cb
(
usbd_devi˚
 *
dev
, 
uöt8_t
 
ï
);

119 
cdˇcm_d©a_wx
(
uöt8_t
 *
buf
, 
uöt16_t
 
Àn
);

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\src\MEBA8B~1.C

13 
	~<lib›ícm3/°m32/rcc.h
>

14 
	~<lib›ícm3/°m32/gpio.h
>

15 
	~<lib›ícm3/°m32/ußπ.h
>

16 
	~<lib›ícm3/°m32/adc.h
>

17 
	~<lib›ícm3/°m32/timî.h
>

18 
	~<lib›ícm3/°m32/Êash.h
>

19 
	~<lib›ícm3/cm3/nvic.h
>

20 
	~<lib›ícm3/°m32/dma.h
>

21 
	~<lib›ícm3/cm3/dwt.h
>

22 
	~<lib›ícm3/cm3/scb.h
>

23 
	~<lib›ícm3/cm3/ve˘‹.h
>

25 
	~<°dio.h
>

26 
	~<m©h.h
>

28 
	~"˛ock.h
"

29 
	~"usb.h
"

30 
	~"ñog.h
"

31 
	~"keybﬂrd.h
"

32 
	~"keym≠.h
"

33 
	~"usb_keycode.h
"

36 
	#NOP
(Ë
	`__asm
("n›")

	)

37 
	#NOP_A
(Ë{ }

	)

38 
	#NOP_B
(Ë{ }

	)

39 
	#NOP_C
(Ë{ }

	)

41 
	#_FOR_CHANNEL_
(
ö°
Ë
ch™√l
 = 0; ch™√»< 
CHANNEL_N
; ch™√l++Ë{ in° }

	)

44 
	#GPIO_PINMODE
(
pö
, 
mode
Ë((modeË<< ((’öË& (8-1))*4))

	)

45 
	#GPIO_PINMODE_AIN
(
pö
Ë
	`GPIO_PINMODE
(pin, 0b0000)

46 
	#GPIO_PINMODE_IPUD
(
pö
Ë
	`GPIO_PINMODE
(pin, 0b1000)

47 

	)

48 
	#GPIO_PINMODE_OPP2M
(
pö
Ë
	`GPIO_PINMODE
(pin, 0b0010)

49 
	#GPIO_PINMODE_OPP10M
(
pö
Ë
	`GPIO_PINMODE
(pin, 0b0001)

50 
	#GPIO_PINMODE_OPP50M
(
pö
Ë
	`GPIO_PINMODE
(pin, 0b0011)

51 

	)

52 
	#GPIO_PINMODE_OPP2M_ALL
 \

53 –
	`GPIO_PINMODE_OPP2M
(0) \

54 | 
	`GPIO_PINMODE_OPP2M
(1) \

55 | 
	`GPIO_PINMODE_OPP2M
(2) \

56 | 
	`GPIO_PINMODE_OPP2M
(3) \

57 | 
	`GPIO_PINMODE_OPP2M
(4) \

58 | 
	`GPIO_PINMODE_OPP2M
(5) \

59 | 
	`GPIO_PINMODE_OPP2M
(6) \

60 | 
	`GPIO_PINMODE_OPP2M
(7) \

61 )

	)

63 
	#GPIO_PINMODE_MASK
(
pö
Ë(0b1111 << ((’öË& (8-1))*4))

	)

64 
	#GPIO_MEASURE_PIN
(
pö
Ë(
	`GPIO_PINMODE_AIN
’öË| (
GPIO_PINMODE_OPP2M_ALL
 & ~
	`GPIO_PINMODE_MASK
’ö)))

	)

67 
	#ADC1_CR2_BASE
 \

69 
ADC_CR2_ADON
 \

70 | 
ADC_CR2_CONT
 \

71 | 
ADC_CR2_ALIGN_LEFT
 \

72 | 
ADC_CR2_EXTSEL_SWSTART
 \

73 | 
ADC_CR2_JEXTSEL_JSWSTART
 \

74 | 
ADC_CR2_JEXTTRIG
 \

75 )

	)

77 
	#STAT_N
 (1024L*2)

	)

78 
	#CALIBRATE_N
 (1024L)

	)

79 
	#AVERAGE
 (128)

	)

80 
	#SCALE
 (
AVERAGE
*8)

	)

81 
	#CHANNEL_N
 8

	)

83 
	#THRESHOLD
 50*
SCALE


	)

87 
	#ARR_VALUE
 (180*2-1)

88 
	#PSC_VALUE
 (1*1-1)

90 
	#CCR1_VALUE
 200

	)

92 
	#CCR2_VALUE
 10

	)

94 
	#CCR3_VALUE
 201

	)

98 
	#DMA_CCR_SRC_PERIPHERAL
 ((
uöt32_t
)(0x00000000))

	)

99 
	#DMA1_CH1
 
DMA1
, 
DMA_CHANNEL1


	)

100 
	#DMA1_CH2
 
DMA1
, 
DMA_CHANNEL2


	)

101 
	#DMA1_CH4
 
DMA1
, 
DMA_CHANNEL4


	)

102 
	#DMA1_CH5
 
DMA1
, 
DMA_CHANNEL5


	)

103 
	#DMA1_CH7
 
DMA1
, 
DMA_CHANNEL7


	)

106 
	#DMA1_CHANNEL4_CCR_BASE
 \

108 
DMA_CCR_SRC_PERIPHERAL
 \

109 | 
DMA_CCR_PINC
 \

110 | 
DMA_CCR_MINC
 \

111 | 
DMA_CCR_PSIZE_32BIT
 \

112 | 
DMA_CCR_MSIZE_32BIT
 \

113 | 
DMA_CCR_PL_MEDIUM
 \

114 | 
DMA_CCR_MEM2MEM
 \

115 )

	)

119 
UART1_Inô_A9A10
();

120 
PrötADC1Info
();

121 
PrötSy°emInfo
();

123 vﬁ©ûê
uöt32_t
 
	gÊag
 = 0;

126 
öt32_t
 
	gch™√lD©a
[
CHANNEL_N
*3];

127 
	#ch™√lVÆue
 (
ch™√lD©a
 + 0*
CHANNEL_N
)

	)

128 
	#ch™√lAccSum
 (
ch™√lD©a
 + 1*
CHANNEL_N
)

	)

129 
	#ch™√lBa£löe
 (
ch™√lD©a
 + 2*
CHANNEL_N
)

	)

131 
uöt32_t
 
	gGPIOA_CRL_mem
[1] = { 
GPIO_PINMODE_OPP2M_ALL
 };

132 
uöt32_t
 
	gTIM2_SR_mem
[1] = { 0 };

133 
uöt32_t
 
	gADC1_JSQR_mem
[
CHANNEL_N
] =

135 (
ADC_CHANNEL0
 << (5*3)),

136 (
ADC_CHANNEL1
 << (5*3)),

137 (
ADC_CHANNEL2
 << (5*3)),

138 (
ADC_CHANNEL3
 << (5*3)),

139 (
ADC_CHANNEL4
 << (5*3)),

140 (
ADC_CHANNEL5
 << (5*3)),

141 (
ADC_CHANNEL6
 << (5*3)),

142 (
ADC_CHANNEL7
 << (5*3)),

145 
ve˘‹_èbÀ_t
 
__©åibuã__
((
	$Æig√d
(512))Ë
Ve˘‹TabÀRAM
;

148 
evít_t
 
key
[8] =

150 
	`_K
(
A
), _K(
B
), _K(
C
), _K(
D
), _K(
E
), _K(
F
), _K(
G
), _K(
H
)

153 
	}
};

155 
	$keybﬂrd_evít_touch
(
evít_t
 *
evít
, 
boﬁ
 
¥es£d
)

157 
uöt8_t
 
key
 = 
evít
->key.
code
;

159 
	`ñog
("key %02x %d\n", 
key
, 
¥es£d
);

161 
key
) {

162 
KEY_LCTRL
 ... 
KEY_RGUI
:

163 i‡(
¥es£d
) {

164 
	`keybﬂrd_add_modifõr
(
key
);

166 
	`keybﬂrd_dñ_modifõr
(
key
);

171 i‡(
¥es£d
) {

172 
	`keybﬂrd_add_key
(
key
);

174 
	`keybﬂrd_dñ_key
(
key
);

184 i‡(
nkro_dúty
) {

185 
	`usb_upd©e_nkro
(&
nkro_°©e
);

186 
nkro_dúty
 = 
Ál£
;

188 
	}
}

192 
	$dñay_us
(
uöt32_t
 
mi¸os
)

194 
uöt32_t
 
t0
 = 
	`dwt_ªad_cy˛e_cou¡î
();

195 
uöt32_t
 
dñè
 = 72 * 
mi¸os
;

196 (
	`dwt_ªad_cy˛e_cou¡î
(Ë- 
t0
Ë< 
dñè
);

197 
	}
}

199 
	$dñay_ms
(
ms
)

201 ; 
ms
; ms--)

203 
	`dñay_us
(1000);

205 
	}
}

208 
uöt64_t
 
	$dwt_Cy˛eCou¡64
()

210 
uöt64_t
 
œ°_cy˛e_cou¡_64
 = 0;

211 
œ°_cy˛e_cou¡_64
 +
DWT_CYCCNT
 - (
uöt32_t
)(last_cycle_count_64);

212  
œ°_cy˛e_cou¡_64
;

213 
	}
}

215 
uöt64_t
 
	$dwt_Mûlis
()

217  
	`dwt_Cy˛eCou¡64
() / 72000;

218 
	}
}

220 
uöt64_t
 
	$dwt_Mi¸os
()

222  
	`dwt_Cy˛eCou¡64
() / 72;

223 
	}
}

227 
	$RCC_C⁄fig
()

230 
	`rcc_˛ock_£tup_ö_h£_8mhz_out_72mhz
();

231 
	`Êash_£t_ws
(
FLASH_ACR_LATENCY_1WS
);

234 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_GPIOA
);

235 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_GPIOB
);

236 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_GPIOC
);

237 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_AFIO
);

240 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_TIM2
);

243 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_ADC1
);

244 
	`adc_powî_off
(
ADC1
);

245 
	`rcc_≥rùh_ª£t_pul£
(
RST_ADC1
);

246 
	`rcc_£t_ad˝ª
(
RCC_CFGR_ADCPRE_PCLK2_DIV2
);

249 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_DMA1
);

250 
	}
}

254 
	$GPIO_C⁄fig
()

258 
	`gpio_£t_mode
(
GPIOA
, 
GPIO_MODE_INPUT
, 
GPIO_CNF_INPUT_ANALOG
,

259 
GPIO0
 | 
GPIO1
 | 
GPIO2
 | 
GPIO3
 |

260 
GPIO4
 | 
GPIO5
 | 
GPIO6
 | 
GPIO7
);

261 
GPIOA_ODR
 |
GPIO0
 | 
GPIO1
 | 
GPIO2
 | 
GPIO3
 | 
GPIO4
 | 
GPIO5
 | 
GPIO6
 | 
GPIO7
;

263 
	`gpio_£t_mode
(
GPIOA
, 
GPIO_MODE_OUTPUT_2_MHZ
, 
GPIO_CNF_OUTPUT_PUSHPULL
, 
GPIO8
);

264 
	`gpio_£t
(
GPIOA
, 
GPIO8
);

266 
	`gpio_£t_mode
(
GPIOB
, 
GPIO_MODE_INPUT
, 
GPIO_CNF_INPUT_ANALOG
, 
GPIO1
);

267 
	`gpio_£t_mode
(
GPIOB
, 
GPIO_MODE_OUTPUT_2_MHZ
, 
GPIO_CNF_OUTPUT_PUSHPULL
, 
GPIO2
);

268 
GPIOB_ODR
 |= 0x04;

271 
	`gpio_£t_mode
(
GPIOA
, 
GPIO_MODE_INPUT
, 
GPIO_CNF_INPUT_PULL_UPDOWN
,

272 
GPIO11
 | 
GPIO12
 | 
GPIO13
 | 
GPIO14
 | 
GPIO15
);

274 
	`gpio_£t_mode
(
GPIOB
, 
GPIO_MODE_INPUT
, 
GPIO_CNF_INPUT_PULL_UPDOWN
,

275 
GPIO1
 | 
GPIO3
 | 
GPIO4
 | 
GPIO5
 |

276 
GPIO6
 | 
GPIO7
 | 
GPIO8
 | 
GPIO9
 |

277 
GPIO10
 | 
GPIO11
 | 
GPIO12
 | 
GPIO13
 |

278 
GPIO14
 | 
GPIO15
);

280 
	`gpio_£t_mode
(
GPIOC
, 
GPIO_MODE_INPUT
, 
GPIO_CNF_INPUT_PULL_UPDOWN
,

281 
GPIO13
 | 
GPIO14
 | 
GPIO15
);

282 
	}
}

286 
	$UART1_Inô_A9A10
(
baudøã
)

288 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_USART1
);

289 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_GPIOA
);

292 
	`gpio_£t_mode
(
GPIOA
, 
GPIO_MODE_OUTPUT_2_MHZ
,

293 
GPIO_CNF_OUTPUT_ALTFN_PUSHPULL
, 
GPIO_USART1_TX
);

294 
	`gpio_£t_mode
(
GPIOA
, 
GPIO_MODE_INPUT
,

295 
GPIO_CNF_INPUT_FLOAT
, 
GPIO_USART1_RX
);

298 
	`ußπ_£t_baudøã
(
USART1
, 
baudøã
);

299 
	`ußπ_£t_d©abôs
(
USART1
, 8);

300 
	`ußπ_£t_°›bôs
(
USART1
, 
USART_STOPBITS_1
);

301 
	`ußπ_£t_∑rôy
(
USART1
, 
USART_PARITY_NONE
);

302 
	`ußπ_£t_Êow_c⁄åﬁ
(
USART1
, 
USART_FLOWCONTROL_NONE
);

303 
	`ußπ_£t_mode
(
USART1
, 
USART_MODE_TX_RX
);

306 
	`ußπ_íabÀ
(
USART1
);

310 
	`£tbuf
(
°dout
, 
NULL
);

312 
	}
}

316 
	$_wrôe
(
fûe
, *
±r
, 
Àn
)

318 
i
 = 
Àn
; i > 0; i--)

320 (
USART1_SR
 & 
USART_CR1_TXEIE
) == 0);

321 
USART1_DR
 = *
±r
++;

323  
Àn
;

324 
	}
}

328 
	$usb_wakeup_i§
() {

329 
	`usb_pﬁl
();

330 
Êag
 = 1;

331 
	}
}

333 
	$usb_Õ_ˇn_rx0_i§
() {

334 
	`usb_pﬁl
();

335 
Êag
 = 1;

336 
	}
}

340 
	$DMAch™√l4_c⁄fig
()

342 
	`dma_ch™√l_ª£t
(
DMA1_CH4
);

344 
	`dma_£t_≥rùhîÆ_addªss
(
DMA1_CH4
, (
öt32_t
)
ch™√lAccSum
);

345 
	`dma_£t_≥rùhîÆ_size
(
DMA1_CH4
, 
DMA_CCR_PSIZE_32BIT
);

346 
	`dma_íabÀ_≥rùhîÆ_ö¸emít_mode
(
DMA1_CH4
);

348 
	`dma_£t_mem‹y_addªss
(
DMA1_CH4
, (
öt32_t
)
ch™√lVÆue
);

349 
	`dma_£t_mem‹y_size
(
DMA1_CH4
, 
DMA_CCR_MSIZE_32BIT
);

350 
	`dma_íabÀ_mem‹y_ö¸emít_mode
(
DMA1_CH4
);

352 
	`dma_£t_numbî_of_d©a
(
DMA1_CH4
, 
CHANNEL_N
*2);

353 
	`dma_£t_ªad_‰om_≥rùhîÆ
(
DMA1_CH4
);

354 
	`dma_£t_¥i‹ôy
(
DMA1_CH4
, 
DMA_CCR_PL_MEDIUM
);

355 
	`dma_íabÀ_mem2mem_mode
(
DMA1_CH4
);

357 
	}
}

359 
	$DMAch™√l2_TIM2_UP_c⁄fig
()

361 
	`dma_ch™√l_ª£t
(
DMA1_CH2
);

363 
	`dma_£t_mem‹y_addªss
(
DMA1_CH2
, (
uöt32_t
)
ADC1_JSQR_mem
);

364 
	`dma_£t_mem‹y_size
(
DMA1_CH2
, 
DMA_CCR_MSIZE_32BIT
);

365 
	`dma_íabÀ_mem‹y_ö¸emít_mode
(
DMA1_CH2
);

367 
	`dma_£t_≥rùhîÆ_addªss
(
DMA1_CH2
, (
uöt32_t
)&
ADC1_JSQR
);

368 
	`dma_£t_≥rùhîÆ_size
(
DMA1_CH2
, 
DMA_CCR_PSIZE_32BIT
);

369 
	`dma_dißbÀ_≥rùhîÆ_ö¸emít_mode
(
DMA1_CH2
);

371 
	`dma_£t_numbî_of_d©a
(
DMA1_CH2
, 
CHANNEL_N
);

372 
	`dma_£t_ªad_‰om_mem‹y
(
DMA1_CH2
);

373 
	`dma_£t_¥i‹ôy
(
DMA1_CH2
, 
DMA_CCR_PL_MEDIUM
);

376 
	`dma_íabÀ_cúcuœr_mode
(
DMA1_CH2
);

378 
	`dma_íabÀ_ch™√l
(
DMA1_CH2
);

380 
	}
}

382 
	$DMAch™√l7_TIM2_CH2_c⁄fig
()

384 
	`dma_ch™√l_ª£t
(
DMA1_CH7
);

386 
	`dma_£t_mem‹y_addªss
(
DMA1_CH7
, (
uöt32_t
)
TIM2_SR_mem
);

387 
	`dma_£t_mem‹y_size
(
DMA1_CH7
, 
DMA_CCR_MSIZE_32BIT
);

388 
	`dma_dißbÀ_mem‹y_ö¸emít_mode
(
DMA1_CH7
);

390 
	`dma_£t_≥rùhîÆ_addªss
(
DMA1_CH7
, (
uöt32_t
)&
TIM2_SR
);

391 
	`dma_£t_≥rùhîÆ_size
(
DMA1_CH7
, 
DMA_CCR_PSIZE_32BIT
);

392 
	`dma_dißbÀ_≥rùhîÆ_ö¸emít_mode
(
DMA1_CH7
);

394 
	`dma_£t_numbî_of_d©a
(
DMA1_CH7
, 1);

395 
	`dma_£t_ªad_‰om_mem‹y
(
DMA1_CH7
);

396 
	`dma_£t_¥i‹ôy
(
DMA1_CH7
, 
DMA_CCR_PL_MEDIUM
);

399 
	`dma_íabÀ_cúcuœr_mode
(
DMA1_CH7
);

401 
	`dma_íabÀ_ch™√l
(
DMA1_CH7
);

403 
	}
}

405 
	$DMAch™√l5_TIM2_CH1_c⁄fig
()

407 
	`dma_ch™√l_ª£t
(
DMA1_CH5
);

409 
	`dma_£t_mem‹y_addªss
(
DMA1_CH5
, (
uöt32_t
)
GPIOA_CRL_mem
);

410 
	`dma_£t_mem‹y_size
(
DMA1_CH5
, 
DMA_CCR_MSIZE_32BIT
);

411 
	`dma_dißbÀ_mem‹y_ö¸emít_mode
(
DMA1_CH5
);

413 
	`dma_£t_≥rùhîÆ_addªss
(
DMA1_CH5
, (
uöt32_t
)&
GPIOA_CRL
);

414 
	`dma_£t_≥rùhîÆ_size
(
DMA1_CH5
, 
DMA_CCR_PSIZE_32BIT
);

415 
	`dma_dißbÀ_≥rùhîÆ_ö¸emít_mode
(
DMA1_CH5
);

417 
	`dma_£t_numbî_of_d©a
(
DMA1_CH5
, 1);

418 
	`dma_£t_ªad_‰om_mem‹y
(
DMA1_CH5
);

419 
	`dma_£t_¥i‹ôy
(
DMA1_CH5
, 
DMA_CCR_PL_MEDIUM
);

422 
	`dma_íabÀ_cúcuœr_mode
(
DMA1_CH5
);

424 
	`dma_íabÀ_ch™√l
(
DMA1_CH5
);

425 
	}
}

427 (*
	gtim2_i§_func
)();

428 
uöt32_t
 
	gtim2_i§_ch™√l_x_mem
[
CHANNEL_N
];

429 
	$DMAch™√l1_TIM2_CH3_c⁄fig
()

431 
	`dma_ch™√l_ª£t
(
DMA1_CH1
);

433 
	`dma_£t_mem‹y_addªss
(
DMA1_CH1
, (
uöt32_t
)
tim2_i§_ch™√l_x_mem
);

434 
	`dma_£t_mem‹y_size
(
DMA1_CH1
, 
DMA_CCR_MSIZE_32BIT
);

435 
	`dma_íabÀ_mem‹y_ö¸emít_mode
(
DMA1_CH1
);

437 
	`dma_£t_≥rùhîÆ_addªss
(
DMA1_CH1
, (
uöt32_t
)&
tim2_i§_func
);

438 
	`dma_£t_≥rùhîÆ_size
(
DMA1_CH1
, 
DMA_CCR_PSIZE_32BIT
);

439 
	`dma_dißbÀ_≥rùhîÆ_ö¸emít_mode
(
DMA1_CH1
);

441 
	`dma_£t_numbî_of_d©a
(
DMA1_CH1
, 
CHANNEL_N
);

442 
	`dma_£t_ªad_‰om_mem‹y
(
DMA1_CH1
);

443 
	`dma_£t_¥i‹ôy
(
DMA1_CH1
, 
DMA_CCR_PL_MEDIUM
);

446 
	`dma_íabÀ_cúcuœr_mode
(
DMA1_CH1
);

448 
	`dma_íabÀ_ch™√l
(
DMA1_CH1
);

450 
	}
}

452 
	$ADC_C⁄fig
()

454 
	`adc_£t_duÆ_mode
(
ADC_CR1_DUALMOD_IND
);

455 
	`adc_£t_À·_Æig√d
(
ADC1
);

458 
uöt8_t
 
ªguœrCh™√ls
[] = {
ADC_CHANNEL9
};

459 
	`adc_£t_ªguœr_£quí˚
(
ADC1
, 1, 
ªguœrCh™√ls
);

460 
	`adc_£t_ßm∂e_time
(
ADC1
, 
ªguœrCh™√ls
[0], 
ADC_SMPR_SMP_239DOT5CYC
);

461 
	`adc_íabÀ_exã∫Æ_åiggî_ªguœr
(
ADC1
, 
ADC_CR2_EXTSEL_SWSTART
);

462 
	`adc_£t_c⁄töuous_c⁄vîsi⁄_mode
(
ADC1
);

465 
uöt8_t
 
öje˘edCh™√ls
[] = {
ADC_CHANNEL0
};

466 
	`adc_£t_öje˘ed_£quí˚
(
ADC1
, 1, 
öje˘edCh™√ls
);

468 
	`_FOR_CHANNEL_
–
	`adc_£t_ßm∂e_time
(
ADC1
, 
ch™√l
, 
ADC_SMPR_SMP_1DOT5CYC
); )

470 
	`adc_íabÀ_exã∫Æ_åiggî_öje˘ed
(
ADC1
, 
ADC_CR2_JEXTSEL_JSWSTART
);

472 
	`adc_powî_⁄
(
ADC1
);

473 
	`adc_ª£t_ˇlibøti⁄
(
ADC1
);

474 
	`adc_ˇlibøti⁄
(
ADC1
);

476 
	`adc_°¨t_c⁄vîsi⁄_ªguœr
(
ADC1
);

477 
	}
}

479 
	$NVIC_C⁄gfig
()

481 
	`scb_£t_¥i‹ôy_groupög
(
SCB_AIRCR_PRIGROUP_GROUP16_NOSUB
);

483 
	`nvic_íabÀ_úq
(
NVIC_TIM2_IRQ
);

484 
	`nvic_£t_¥i‹ôy
(
NVIC_TIM2_IRQ
, 0 << 4);

486 
	`nvic_íabÀ_úq
(
NVIC_USB_LP_CAN_RX0_IRQ
);

487 
	`nvic_£t_¥i‹ôy
(
NVIC_USB_LP_CAN_RX0_IRQ
, 4 << 4);

489 
	`nvic_íabÀ_úq
(
NVIC_USB_WAKEUP_IRQ
);

490 
	`nvic_£t_¥i‹ôy
(
NVIC_USB_WAKEUP_IRQ
, 5 << 4);

492 
	}
}

495 
	$TIM2_C⁄fig
()

497 
TIM2_PSC
 = 
PSC_VALUE
;

498 
TIM2_ARR
 = 
ARR_VALUE
;

501 
TIM2_CCR1
 = 
CCR1_VALUE
;

502 
TIM2_DIER
 |
TIM_DIER_CC1DE
;

505 
TIM2_CCR2
 = 
CCR2_VALUE
;

506 
TIM2_DIER
 |
TIM_DIER_CC2DE
;

507 
	`timî_íabÀ_úq
(
TIM2
, 
TIM_SR_CC2IF
);

510 
TIM2_CCR3
 = 
CCR3_VALUE
;

511 
TIM2_DIER
 |
TIM_DIER_CC3DE
;

514 
TIM2_DIER
 |
TIM_DIER_UDE
;

516 
TIM2_CR1
 = 
TIM_CR1_DIR_UP
 | 
TIM_CR1_CEN
;

517 
	}
}

519 
__©åibuã__
((
	$Æig√d
(16))Ë
	`tim2_i§_ch™√l_0
();

520 (*
tim2_i§_func
)(Ë
tim2_i§_ch™√l_0
;

523 
uöt32_t
 
TCNT_vÆue_mö
 = 1000000;

524 
uöt32_t
 
TCNT_vÆue_max
 = 0;

525 
uöt32_t
 
sumTCNT_vÆue
;

526 
uöt32_t
 
cou¡_TCNT
 = 0;

528 
	`__©åibuã__
((
	$Æig√d
(16))Ë
	$tim2_i§_ch™√l_7
()

533 
ch™√lAccSum
[6] +
ADC1_JDR1
;

534 
	`NOP_A
();

535 
ADC1_CR2
 = 
ADC_CR2_JSWSTART
 | 
ADC1_CR2_BASE
;

536 
	`NOP_B
();

537 
GPIOA_CRL
 = 
	`GPIO_MEASURE_PIN
(7);

538 
	`NOP_C
();

540 
uöt32_t
 
TCNT_vÆue
 = 
TIM2_CNT
;

541 if(
TCNT_vÆue
 < 
TCNT_vÆue_mö
) TCNT_value_min = TCNT_value;

542 if(
TCNT_vÆue
 > 
TCNT_vÆue_max
) TCNT_value_max = TCNT_value;

543 
sumTCNT_vÆue
 +
TCNT_vÆue
;

544 
cou¡_TCNT
 += 1;

552 
°ï
 = 0;

553 i‡((--
°ï
) < 0)

555 
°ï
 = 
AVERAGE
 - 1;

556 
DMA1_CCR4
 = 
DMA1_CHANNEL4_CCR_BASE
 | 
DMA_CCR_EN
;

561 
	}
}

563 
__©åibuã__
((
	$Æig√d
(16))Ë
	$tim2_i§_ch™√l_6
()

565 
ch™√lAccSum
[5] +
ADC1_JDR1
;

566 
	`NOP_A
();

567 
ADC1_CR2
 = 
ADC_CR2_JSWSTART
 | 
ADC1_CR2_BASE
;

568 
	`NOP_B
();

569 
GPIOA_CRL
 = 
	`GPIO_MEASURE_PIN
(6);

571 
uöt32_t
 
TCNT_vÆue
 = 
TIM2_CNT
;

572 if(
TCNT_vÆue
 < 
TCNT_vÆue_mö
) TCNT_value_min = TCNT_value;

573 if(
TCNT_vÆue
 > 
TCNT_vÆue_max
) TCNT_value_max = TCNT_value;

574 
sumTCNT_vÆue
 +
TCNT_vÆue
;

575 
cou¡_TCNT
 += 1;

576 
	}
}

578 
__©åibuã__
((
	$Æig√d
(16))Ë
	$tim2_i§_ch™√l_5
()

580 
ch™√lAccSum
[4] +
ADC1_JDR1
;

581 
	`NOP_A
();

582 
ADC1_CR2
 = 
ADC_CR2_JSWSTART
 | 
ADC1_CR2_BASE
;

583 
	`NOP_B
();

584 
GPIOA_CRL
 = 
	`GPIO_MEASURE_PIN
(5);

586 
uöt32_t
 
TCNT_vÆue
 = 
TIM2_CNT
;

587 if(
TCNT_vÆue
 < 
TCNT_vÆue_mö
) TCNT_value_min = TCNT_value;

588 if(
TCNT_vÆue
 > 
TCNT_vÆue_max
) TCNT_value_max = TCNT_value;

589 
sumTCNT_vÆue
 +
TCNT_vÆue
;

590 
cou¡_TCNT
 += 1;

591 
	}
}

593 
__©åibuã__
((
	$Æig√d
(16))Ë
	$tim2_i§_ch™√l_4
()

595 
ch™√lAccSum
[3] +
ADC1_JDR1
;

596 
	`NOP_A
();

597 
ADC1_CR2
 = 
ADC_CR2_JSWSTART
 | 
ADC1_CR2_BASE
;

598 
	`NOP_B
();

599 
GPIOA_CRL
 = 
	`GPIO_MEASURE_PIN
(4);

601 
uöt32_t
 
TCNT_vÆue
 = 
TIM2_CNT
;

602 if(
TCNT_vÆue
 < 
TCNT_vÆue_mö
) TCNT_value_min = TCNT_value;

603 if(
TCNT_vÆue
 > 
TCNT_vÆue_max
) TCNT_value_max = TCNT_value;

604 
sumTCNT_vÆue
 +
TCNT_vÆue
;

605 
cou¡_TCNT
 += 1;

606 
	}
}

608 
__©åibuã__
((
	$Æig√d
(16))Ë
	$tim2_i§_ch™√l_3
()

610 
ch™√lAccSum
[2] +
ADC1_JDR1
;

611 
	`NOP_A
();

612 
ADC1_CR2
 = 
ADC_CR2_JSWSTART
 | 
ADC1_CR2_BASE
;

613 
	`NOP_B
();

614 
GPIOA_CRL
 = 
	`GPIO_MEASURE_PIN
(3);

616 
uöt32_t
 
TCNT_vÆue
 = 
TIM2_CNT
;

617 if(
TCNT_vÆue
 < 
TCNT_vÆue_mö
) TCNT_value_min = TCNT_value;

618 if(
TCNT_vÆue
 > 
TCNT_vÆue_max
) TCNT_value_max = TCNT_value;

619 
sumTCNT_vÆue
 +
TCNT_vÆue
;

620 
cou¡_TCNT
 += 1;

621 
	}
}

623 
__©åibuã__
((
	$Æig√d
(16))Ë
	$tim2_i§_ch™√l_2
()

625 
ch™√lAccSum
[1] +
ADC1_JDR1
;

626 
	`NOP_A
();

627 
ADC1_CR2
 = 
ADC_CR2_JSWSTART
 | 
ADC1_CR2_BASE
;

628 
	`NOP_B
();

629 
GPIOA_CRL
 = 
	`GPIO_MEASURE_PIN
(2);

631 
uöt32_t
 
TCNT_vÆue
 = 
TIM2_CNT
;

632 if(
TCNT_vÆue
 < 
TCNT_vÆue_mö
) TCNT_value_min = TCNT_value;

633 if(
TCNT_vÆue
 > 
TCNT_vÆue_max
) TCNT_value_max = TCNT_value;

634 
sumTCNT_vÆue
 +
TCNT_vÆue
;

635 
cou¡_TCNT
 += 1;

636 
	}
}

638 
__©åibuã__
((
	$Æig√d
(16))Ë
	$tim2_i§_ch™√l_1
()

640 
ch™√lAccSum
[0] +
ADC1_JDR1
;

641 
	`NOP_A
();

642 
ADC1_CR2
 = 
ADC_CR2_JSWSTART
 | 
ADC1_CR2_BASE
;

643 
	`NOP_B
();

644 
GPIOA_CRL
 = 
	`GPIO_MEASURE_PIN
(1);

646 
uöt32_t
 
TCNT_vÆue
 = 
TIM2_CNT
;

647 if(
TCNT_vÆue
 < 
TCNT_vÆue_mö
) TCNT_value_min = TCNT_value;

648 if(
TCNT_vÆue
 > 
TCNT_vÆue_max
) TCNT_value_max = TCNT_value;

649 
sumTCNT_vÆue
 +
TCNT_vÆue
;

650 
cou¡_TCNT
 += 1;

651 
	}
}

653 
__©åibuã__
((
	$Æig√d
(16))Ë
	$tim2_i§_ch™√l_0
()

655 
ch™√lAccSum
[7] +
ADC1_JDR1
;

656 
	`NOP_A
();

657 
ADC1_CR2
 = 
ADC_CR2_JSWSTART
 | 
ADC1_CR2_BASE
;

658 
	`NOP_B
();

659 
GPIOA_CRL
 = 
	`GPIO_MEASURE_PIN
(0);

661 
uöt32_t
 
TCNT_vÆue
 = 
TIM2_CNT
;

662 if(
TCNT_vÆue
 < 
TCNT_vÆue_mö
) TCNT_value_min = TCNT_value;

663 if(
TCNT_vÆue
 > 
TCNT_vÆue_max
) TCNT_value_max = TCNT_value;

664 
sumTCNT_vÆue
 +
TCNT_vÆue
;

665 
cou¡_TCNT
 += 1;

666 
	}
}

668 
__©åibuã__
((
	$Æig√d
(16))Ë
	$tim2_i§
()

670 (*
tim2_i§_func
)();

671 
	}
}

673 
uöt32_t
 
	$DMA_Waô
()

675 
uöt32_t
 
IdÀCou¡
 = 0;

676 (
DMA1_ISR
 & 
DMA_ISR_TCIF4
) == 0)

678 
IdÀCou¡
++;

680 
DMA1_IFCR
 = 
DMA_IFCR_CTCIF4
;

681 
DMA1_CCR4
 = 
DMA1_CHANNEL4_CCR_BASE
;

682 
DMA1_CNDTR4
 = 
CHANNEL_N
*2;

683  
IdÀCou¡
;

684 
	}
}

687 
	$Do_TB_PS_dñè
()

689 
uöt32_t
 
œ°Mûlis
 = 0;

690 
	`DMA_Waô
();

691 
	`DMA_Waô
();

693 
öt32_t
 
dñè_sum
 = 0;

694 
öt64_t
 
sum
[
CHANNEL_N
] = {0, 0, 0, 0, 0, 0, 0, 0};

695 
uöt64_t
 
sum2
[
CHANNEL_N
] = {0, 0, 0, 0, 0, 0, 0, 0};

696 
SNR
[
CHANNEL_N
];

698 
uöt32_t
 
IdÀCou¡_sum
 = 0;

699 
uöt32_t
 
IdÀCou¡_mö
, 
IdÀCou¡_max
;

700 
IdÀCou¡_mö
 = 2000000;

701 
IdÀCou¡_max
 = 0;

702 
i
 = 0; i < 
STAT_N
; i++)

704 
uöt32_t
 
ãmp
 = 
	`DMA_Waô
();

705 
IdÀCou¡_sum
 +
ãmp
;

706 if(
IdÀCou¡_mö
 > 
ãmp
) IdleCount_min =Åemp;

707 if(
IdÀCou¡_max
 < 
ãmp
) IdleCount_max =Åemp;

709 
dñè_sum
 = 0;

710 
	`_FOR_CHANNEL_
–
dñè_sum
 +
ch™√lVÆue
[
ch™√l
]; )

720 
ch™√l
 = 0; ch™√»< 
CHANNEL_N
; channel++)

722 
öt64_t
 
d
 = 
ch™√lVÆue
[
ch™√l
];

723 
sum
[
ch™√l
] +
d
;

724 
sum2
[
ch™√l
] +
d
*d;

734 
ch™√l
 = 0; channel < 8; channel++)

736 i‡(
ch™√lVÆue
[
ch™√l
] >
THRESHOLD
)

738 
	`keybﬂrd_evít_touch
(&
key
[
ch™√l
], 
åue
);

739 
GPIOB_ODR
 |= 0x04;

744 
	`keybﬂrd_evít_touch
(&
key
[
ch™√l
], 
Ál£
);

745 
GPIOB_ODR
 &= ~0x04;

752 
	`usb_upd©e_keybﬂrd
(&
keybﬂrd_°©e
);

753 
	`¥ötf
("usb_now = %d\n", 
	`usb_now
());

758 
	`¥ötf
("IdÀCou¡ = %6ld\t", 
IdÀCou¡_sum
 / (
STAT_N
 * 
AVERAGE
));

759 
	`¥ötf
("mö = %6ld\t", 
IdÀCou¡_mö
 / 
AVERAGE
);

760 
	`¥ötf
("max = %6ld\n", 
IdÀCou¡_max
 / 
AVERAGE
);

762 
uöt32_t
 
œ°Mi¸os
 = 0;

763 
uöt32_t
 
t
 = 
	`dwt_Mi¸os
();

764 
uöt32_t
 
Rï‹tPîiod
 = 
t
 - 
œ°Mi¸os
;

765 
Rï‹tR©e
 = (1000000.0*
STAT_N
Ë/ 
Rï‹tPîiod
;

766 
œ°Mi¸os
 = 
t
;

767 
	`¥ötf
("%11.3f\t", 1.0*
Rï‹tPîiod
/1e6);

768 
	`¥ötf
("%10.1f\t", 
Rï‹tR©e
);

769 
	`¥ötf
("%10ld\t", (
öt32_t
)
dñè_sum
);

770 
	`¥ötf
("%10.3f\n", (
dñè_sum
)*1.0/(
SCALE
*
CHANNEL_N
));

771 
	`¥ötf
("------------------\n");

772 
ch™√l
 = 0; ch™√»< 
CHANNEL_N
; channel++)

774 
TB_dñè
 = (1.0 * 
sum
[
ch™√l
]Ë/ 
STAT_N
;

775 
PS_dñè
 = 
	`sqπ
–
	`Ábs
–(()
sum2
[
ch™√l
]*
STAT_N
Ë- (Ë
sum
[channel]*sum[channel]) ) / STAT_N;

776 
SNR
 = 
	`Ábs
(
TB_dñè
Ë/ 
PS_dñè
;

777 
ba£löe_n‹mÆized
 = (Ë1.0* (-
ch™√lBa£löe
[
ch™√l
]);

779 
TB_dñè
 /
SCALE
;

780 
PS_dñè
 /
SCALE
;

781 
ba£löe_n‹mÆized
 /
SCALE
;

783 
	`¥ötf
("%12.1f\t", 
ba£löe_n‹mÆized
);

784 
	`¥ötf
("%8.2f\t", 
TB_dñè
);

785 
	`¥ötf
("%8.2f\t", 
PS_dñè
);

786 
	`¥ötf
("%8.2f\t\n", 
SNR
);

789 
	`¥ötf
("TCNT_TB = %d\t", 
sumTCNT_vÆue
 / 
cou¡_TCNT
);

790 
	`¥ötf
("TCNT_mö = %d\t", 
TCNT_vÆue_mö
);

791 
	`¥ötf
("TCNT_max = %d\n", 
TCNT_vÆue_max
);

793 
	`¥ötf
("------------------------------------------------------------------\n");

800 
	}
}

804 
	$Ba£löeCÆibøã
()

806 
	`_FOR_CHANNEL_
–
ch™√lBa£löe
[
ch™√l
] = 0; )

809 
i
 = 0; i < 10; i++)

811 
	`DMA_Waô
();

817 
uöt64_t
 
sum_ba£löe
[
CHANNEL_N
] = {0, 0, 0, 0, 0, 0, 0, 0};

818 
i
 = 0; i < 
CALIBRATE_N
; i++)

820 
	`DMA_Waô
();

821 
	`_FOR_CHANNEL_
–
sum_ba£löe
[
ch™√l
] +
ch™√lVÆue
[channel]; )

824 
	`_FOR_CHANNEL_
–
ch™√lBa£löe
[
ch™√l
] = 0 - (
sum_ba£löe
[ch™√l] + 
CALIBRATE_N
/2) / CALIBRATE_N; )

827 
	`_FOR_CHANNEL_
–
	`¥ötf
("%ld\t", -
ch™√lBa£löe
[
ch™√l
] / 
SCALE
); )

828 
	`¥ötf
("\n");

830 
	}
}

833 
uöt32_t
 
	gtim2_i§_ch™√l_x_mem
[
CHANNEL_N
] =

835 &
tim2_i§_ch™√l_0
,

836 &
tim2_i§_ch™√l_1
,

837 &
tim2_i§_ch™√l_2
,

838 &
tim2_i§_ch™√l_3
,

839 &
tim2_i§_ch™√l_4
,

840 &
tim2_i§_ch™√l_5
,

841 &
tim2_i§_ch™√l_6
,

842 &
tim2_i§_ch™√l_7
,

845 
	$maö
()

847 
	`dwt_íabÀ_cy˛e_cou¡î
();

848 
	`˛ock_öô
();

849 
	`RCC_C⁄fig
();

850 
	`GPIO_C⁄fig
();

851 
£rül_a˘ive
 = 
Ál£
;

852 
	`UART1_Inô_A9A10
(250000);

853 
	`usb_öô
();

854 
	`DMAch™√l4_c⁄fig
();

855 
	`DMAch™√l2_TIM2_UP_c⁄fig
();

856 
	`DMAch™√l7_TIM2_CH2_c⁄fig
();

857 
	`DMAch™√l5_TIM2_CH1_c⁄fig
();

858 
	`DMAch™√l1_TIM2_CH3_c⁄fig
();

859 
	`ADC_C⁄fig
();

860 
	`TIM2_C⁄fig
();

861 
	`NVIC_C⁄gfig
();

863 
	`PrötSy°emInfo
();

865 
	`Ba£löeCÆibøã
();

867 
TCNT_vÆue_mö
 = 1000000; 
TCNT_vÆue_max
 = 0; 
sumTCNT_vÆue
 = 0; 
cou¡_TCNT
 = 0;

869 
ch™√l
 = 0; ch™√»< 
CHANNEL_N
; channel++)

871 
	`¥ötf
("tim2_i§_ch™√l_x_mem[%d] = %X\n", 
ch™√l
, 
tim2_i§_ch™√l_x_mem
[channel] );

874 
åue
)

876 
	`Do_TB_PS_dñè
();

885 
	}
}

889 
	$PrötADC1Info
()

891 
	`¥ötf
("ADC1 Init:\n");

892 
	`¥ötf
("RCC_CFGR = %08lX\n", 
RCC_CFGR
);

893 
	`¥ötf
("CR1 = %08lX\n", 
ADC1_CR1
);

894 
	`¥ötf
("CR2 = %08lX\n", 
ADC1_CR2
);

895 
	`¥ötf
("SMPR1 = %08lX\n", 
ADC1_SMPR1
);

896 
	`¥ötf
("SMPR2 = %08lX\n", 
ADC1_SMPR2
);

897 
	`¥ötf
("SQR1 = %08lX\n", 
ADC1_SQR1
);

898 
	`¥ötf
("SQR2 = %08lX\n", 
ADC1_SQR2
);

899 
	`¥ötf
("SQR3 = %08lX\n", 
ADC1_SQR3
);

900 
	`¥ötf
("JSQR = %08lX\n", 
ADC1_JSQR
);

901 
	`¥ötf
("\n");

902 
	}
}

904 
	$PrötSy°emInfo
()

906 
	`¥ötf
("SystemInfo:\n");

907 
	`¥ötf
("SCB_VTOR = %08X\n", 
SCB_VTOR
);

908 
	`¥ötf
("&SCB_VTOR = %08X\n", &
SCB_VTOR
);

909 
	`¥ötf
("FLASH_BASE = %08X\n", 
FLASH_BASE
);

910 
	`¥ötf
("Ve˘‹TabÀRAM sizê%d\n", (
Ve˘‹TabÀRAM
));

911 
	`¥ötf
("&Ve˘‹TabÀRAM = %08X\n", &
Ve˘‹TabÀRAM
);

914 
ve˘‹_èbÀ_t
 *
Ve˘‹TabÀFœsh
 = (ve˘‹_èbÀ_t*)(
FLASH_BASE
 + 
SCB_VTOR
);

917 vﬁ©ûê
uöt32_t
 *
§c
, *
de°
;

918 
§c
 = 
Ve˘‹TabÀFœsh
;

919 
de°
 = &
Ve˘‹TabÀRAM
;

920 
i
 = 0; i < (
Ve˘‹TabÀRAM
)/4; i++, 
§c
++, 
de°
++) {

921 *
de°
 = *
§c
;

924 
	`¥ötf
("NVIC_TIM2_IRQ = %08X\n", 
Ve˘‹TabÀFœsh
->
úq
[
NVIC_TIM2_IRQ
]);

925 
	`¥ötf
("Ve˘‹TabÀRAM = %08X\n", 
Ve˘‹TabÀRAM
.
úq
[
NVIC_TIM2_IRQ
]);

926 
	`¥ötf
("tim2_i§ = %08X\n", &
tim2_i§
);

927 
	`¥ötf
("\n");

929 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\src\USB_SRC\clock.c

6 
	~<lib›ícm3/°m32/rcc.h
>

7 
	~<lib›ícm3/cm3/sy°ick.h
>

8 
	~<lib›ícm3/cm3/nvic.h
>

10 
	~"˛ock.h
"

12 vﬁ©ûê
uöt32_t
 
	gsy°em_ms
 = 0;

15 
	$sys_tick_h™dÀr
()

17 
sy°em_ms
++;

18 
	}
}

21 
	$˛ock_öô
()

23 
	`sy°ick_£t_ªlﬂd
(
rcc_ahb_‰equícy
 / 1000);

24 
STK_CVR
 = 0;

25 
	`sy°ick_£t_˛ocksour˚
(
STK_CSR_CLKSOURCE_AHB
);

26 
	`sy°ick_cou¡î_íabÀ
();

27 
	`sy°ick_öãºu±_íabÀ
();

28 
	}
}

30 
uöt32_t


31 
	$˛ock_now
()

33  
sy°em_ms
;

34 
	}
}

36 
uöt32_t


37 
	$timî_£t
(
uöt32_t
 
dñay
)

39  
sy°em_ms
 + 
dñay
;

40 
	}
}

42 
boﬁ


43 
	$timî_∑s£d
(
uöt32_t
 
timî
)

45  (
timî
 < 
sy°em_ms
);

46 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\src\USB_SRC\debug.c

10 
	~<lib›ícm3/cm3/scb.h
>

12 
h¨dÁu…_discovîy
(
scb_ex˚±i⁄_°ack_‰ame
 *
‰ame
);

13 
	$h¨dÁu…_discovîy
(
scb_ex˚±i⁄_°ack_‰ame
 *
‰ame
)

15 vﬁ©ûê
uöt32_t
 
_CFSR
;

16 vﬁ©ûê
uöt32_t
 
_HFSR
;

17 vﬁ©ûê
uöt32_t
 
_DFSR
;

18 vﬁ©ûê
uöt32_t
 
_AFSR
;

19 vﬁ©ûê
uöt32_t
 
_BFAR
;

20 vﬁ©ûê
uöt32_t
 
_MMAR
;

22 ()(
‰ame
);

29 
_CFSR
 = 
SCB_CFSR
;

30 
_HFSR
 = 
SCB_HFSR
;

31 
_DFSR
 = 
SCB_DFSR
;

32 
_AFSR
 = 
SCB_AFSR
;

39 i‡(
_CFSR
 & 
SCB_CFSR_MMARVALID
)

40 
_MMAR
 = 
SCB_MMFAR
;

42 
_MMAR
 = 0;

44 i‡(
_CFSR
 & 
SCB_CFSR_BFARVALID
)

45 
_BFAR
 = 
SCB_BFAR
;

47 
_BFAR
 = 0;

49 (
_CFSR
);

50 (
_HFSR
);

51 (
_DFSR
);

52 (
_AFSR
);

53 (
_BFAR
);

54 (
_MMAR
);

56 
	`__asm
("BKPT #0\n") ;

57 
	}
}

59 
__©åibuã__
((
«ked
)Ë
h¨dÁu…_h™dÀr
();

60 
__©åibuã__
((
«ked
)Ë
	$h¨dÁu…_h™dÀr
()

62 
__asm
 volatile (

76 
	}
}

78 #¥agm®
wók
 
h¨d_Áu…_h™dÀr
 = 
h¨dÁu…_h™dÀr


	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\src\USB_SRC\elog.c

6 
	~"˛ock.h
"

7 
	~"ñog.h
"

9 
	$ñog_°¨t
(c⁄° *
«me
, 
uöt16_t
 
löe
)

12 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\src\USB_SRC\extrakey.c

8 
	~"ñog.h
"

9 
	~"exåakey.h
"

11 
uöt8_t
 
	gexåakey_idÀ
 = 0;

13 
ªp‹t_exåakey_t
 
	g°©e
;

15 
ªp‹t_exåakey_t
 *

16 
	$exåakey_ªp‹t
()

18  &
°©e
;

19 
	}
}

22 
	$exåakey_c⁄sumî_evít
(
evít_t
 *
evít
, 
boﬁ
 
¥es£d
)

24 
°©e
.
id
 = 
REPORTID_CONSUMER
;

26 
	`ñog
("exåakey c⁄sumî %04x %d\n", 
evít
->
exåa
.
code
, 
¥es£d
);

28 i‡(
¥es£d
) {

29 
°©e
.
codñ
 = 
evít
->
exåa
.
code
 & 0xff;

30 
°©e
.
codeh
 = 
evít
->
exåa
.
code
 >> 8;

32 
°©e
.
codñ
 = sèã.
codeh
 = 0;

35 
	`usb_upd©e_exåakey
(&
°©e
);

36 
	}
}

39 
	$exåakey_sy°em_evít
(
evít_t
 *
evít
, 
boﬁ
 
¥es£d
)

41 
°©e
.
id
 = 
REPORTID_SYSTEM
;

43 
	`ñog
("exåakey c⁄sumî %04x %d\n", 
evít
->
exåa
.
code
, 
¥es£d
);

45 i‡(
¥es£d
) {

46 
°©e
.
codñ
 = 
evít
->
exåa
.
code
 & 0xff;

47 
°©e
.
codeh
 = 
evít
->
exåa
.
code
 >> 8;

49 
°©e
.
codñ
 = sèã.
codeh
 = 0;

52 
	`usb_upd©e_exåakey
(&
°©e
);

53 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\src\USB_SRC\keyboard.c

8 
	~"usb.h
"

9 
	~"keybﬂrd.h
"

10 
	~"usb_keycode.h
"

12 
	~"ñog.h
"

15 
ªp‹t_keybﬂrd_t
 
	gkeybﬂrd_°©e
;

17 
boﬁ
 
	gkeybﬂrd_dúty
 = 
Ál£
;

18 
boﬁ
 
	gkeybﬂrd_a˘ive
 = 
Ál£
;

19 
uöt8_t
 
	gkeybﬂrd_idÀ
 = 0;

22 
ªp‹t_nkro_t
 
	gnkro_°©e
;

23 
boﬁ
 
	gnkro_a˘ive
 = 
Ál£
;

25 
boﬁ
 
	gnkro_dúty
 = 
Ál£
;

26 
uöt8_t
 
	gnkro_idÀ
 = 0;

29 
	$keybﬂrd_£t_¥Ÿocﬁ
(
uöt8_t
 
¥Ÿocﬁ
)

31 
nkro_a˘ive
 = (
¥Ÿocﬁ
 == 1);

32 
	}
}

34 
uöt8_t
 *

35 
	$keybﬂrd_gë_¥Ÿocﬁ
()

37  (
uöt8_t
 *Ë&
nkro_a˘ive
;

38 
	}
}

39 
ªp‹t_keybﬂrd_t
 *

40 
	$keybﬂrd_ªp‹t
()

42  &
keybﬂrd_°©e
;

43 
	}
}

45 
ªp‹t_nkro_t
 *

46 
	$nkro_ªp‹t
()

48  &
nkro_°©e
;

49 
	}
}

52 
	$keybﬂrd_£t_Àds
(
uöt8_t
 
Àds
)

55 
	}
}

58 
	$keybﬂrd_evít
(
evít_t
 *
evít
, 
boﬁ
 
¥es£d
)

60 
uöt8_t
 
key
 = 
evít
->key.
code
;

62 
	`ñog
("key %02x %d\n", 
key
, 
¥es£d
);

64 
key
) {

65 
KEY_LCTRL
 ... 
KEY_RGUI
:

66 i‡(
¥es£d
) {

67 
	`keybﬂrd_add_modifõr
(
key
);

69 
	`keybﬂrd_dñ_modifõr
(
key
);

74 i‡(
¥es£d
) {

75 
	`keybﬂrd_add_key
(
key
);

77 
	`keybﬂrd_dñ_key
(
key
);

82 i‡(
keybﬂrd_dúty
) {

83 
	`usb_upd©e_keybﬂrd
(&
keybﬂrd_°©e
);

84 
keybﬂrd_dúty
 = 
Ál£
;

87 i‡(
nkro_dúty
) {

88 
	`usb_upd©e_nkro
(&
nkro_°©e
);

89 
nkro_dúty
 = 
Ál£
;

91 
	}
}

94 
	$keybﬂrd_add_key
(
uöt8_t
 
key
)

96 
uöt8_t
 
i
;

97 
uöt8_t
 
k
;

99 i‡(
nkro_a˘ive
) {

105 
k
 = 
key
 - 
KEY_A
;

106 i‡((
k
 >> 3Ë< (
nkro_°©e
.
bôs
)) {

107 
nkro_°©e
.
bôs
[
k
 >> 3] |= (1 << (k & 0x07));

108 
nkro_dúty
 = 
åue
;

114 
i
 = 0; i < (
keybﬂrd_°©e
.
keys
); i++) {

115 i‡((
keybﬂrd_°©e
.
keys
[
i
] == 0) ||

116 (
keybﬂrd_°©e
.
keys
[
i
] =
key
)) {

117 
keybﬂrd_°©e
.
keys
[
i
] = 
key
;

118 
keybﬂrd_dúty
 = 
åue
;

122 
	}
}

125 
	$keybﬂrd_dñ_key
(
uöt8_t
 
key
)

127 
uöt8_t
 
i
;

128 
uöt8_t
 
k
;

130 i‡(
nkro_a˘ive
) {

131 
k
 = 
key
 - 
KEY_A
;

132 i‡((
k
 >> 3Ë< (
nkro_°©e
.
bôs
)) {

133 
nkro_°©e
.
bôs
[
k
 >> 3] &= ~(1 << (k & 0x07));

134 
nkro_dúty
 = 
åue
;

141 
i
 = 0; i < (
keybﬂrd_°©e
.
keys
); i++) {

142 i‡(
keybﬂrd_°©e
.
keys
[
i
] =
key
) {

143 
keybﬂrd_°©e
.
keys
[
i
] = 0;

144 
keybﬂrd_dúty
 = 
åue
;

148 
	}
}

151 
	$keybﬂrd_add_modifõr
(
uöt8_t
 
modifõr
)

153 
keybﬂrd_°©e
.
mods
 |
	`MODIFIER_BIT
(
modifõr
);

154 
nkro_°©e
.
mods
 |
	`MODIFIER_BIT
(
modifõr
);

156 i‡(
nkro_a˘ive
) {

157 
nkro_dúty
 = 
åue
;

159 
keybﬂrd_dúty
 = 
åue
;

161 
	}
}

164 
	$keybﬂrd_dñ_modifõr
(
uöt8_t
 
modifõr
)

166 
keybﬂrd_°©e
.
mods
 &~
	`MODIFIER_BIT
(
modifõr
);

167 
nkro_°©e
.
mods
 &~
	`MODIFIER_BIT
(
modifõr
);

169 i‡(
nkro_a˘ive
) {

170 
nkro_dúty
 = 
åue
;

172 
keybﬂrd_dúty
 = 
åue
;

174 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\src\USB_SRC\keymap.c

8 
	~<°döt.h
>

9 
	~"keym≠.h
"

10 
	~"usb_keycode.h
"

11 
	~"c⁄fig.h
"

13 
	~"keybﬂrd.h
"

14 
	~"mou£.h
"

15 
	~"exåakey.h
"

17 
evít_t
 
	gkeym≠
[][
ROWS_NUM
][
COLS_NUM
] =

20 { 
_K
(
F13
), _K(
F14
), _K(
F15
), _K(
F16
), _K(
F17
) },

21 { 
_K
(
F18
), _K(
F19
), _K(
F20
), _K(
F21
), _K(
F22
) },

22 { 
_C
(
VOLUMEINC
), _C(
VOLUMEDEC
), _C(
PLAY
), _C(
FASTFORWARD
), _C(
MUTE
) },

23 { 
_K
(
PAD_1
), _K(
PAD_2
), _K(
PAD_3
), _K(
PAD_4
), _K(
PAD_5
) },

24 { 
_K
(
PAD_6
), _K(
PAD_7
), _K(
PAD_8
), _K(
PAD_9
), _K(
PAD_0
) }

28 
uöt8_t
 
	gœyî
 = 0;

31 
	$keym≠_evít
(
uöt16_t
 
row
, uöt16_à
cﬁ
, 
boﬁ
 
¥es£d
)

33 
evít_t
 *
evít
 = &
keym≠
[
œyî
][
row
][
cﬁ
];

35 
evít
->
ty≥
) {

36 
KMT_KEY
:

37 
	`keybﬂrd_evít
(
evít
, 
¥es£d
);

40 
KMT_MOUSE
:

41 
	`mou£_evít
(
evít
, 
¥es£d
);

44 
KMT_WHEEL
:

45 
	`whìl_evít
(
evít
, 
¥es£d
);

48 
KMT_CONSUMER
:

49 
	`exåakey_c⁄sumî_evít
(
evít
, 
¥es£d
);

52 
KMT_SYSTEM
:

53 
	`exåakey_sy°em_evít
(
evít
, 
¥es£d
);

56 
KMT_LAYER
:

57 
œyî
 = 
evít
->œyî.
numbî
 % ((
keym≠
));

60 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\src\USB_SRC\mouse.c

8 
	~"mou£.h
"

10 
ªp‹t_mou£_t
 
	g°©e
;

11 
uöt8_t
 
	gmou£_idÀ
 = 0;

13 
ªp‹t_mou£_t
 *

14 
	$mou£_ªp‹t
()

16  &
°©e
;

17 
	}
}

20 
	$mou£_evít
(
evít_t
 *
evít
, 
boﬁ
 
¥es£d
)

22 i‡(
¥es£d
) {

23 
°©e
.
buâ⁄s
 = 
evít
->
mou£
.
buâ⁄
;

24 
°©e
.
x
 = 
evít
->
mou£
.x;

25 
°©e
.
y
 = 
evít
->
mou£
.y;

26 
°©e
.
h
 = sèã.
v
 = 0;

27 
	`usb_upd©e_mou£
(&
°©e
);

29 
	}
}

32 
	$whìl_evít
(
evít_t
 *
evít
, 
boﬁ
 
¥es£d
)

34 i‡(
¥es£d
) {

35 
°©e
.
buâ⁄s
 = 
evít
->
whìl
.
buâ⁄
;

36 
°©e
.
h
 = 
evít
->
whìl
.h;

37 
°©e
.
v
 = 
evít
->
whìl
.v;

38 
°©e
.
x
 = sèã.
y
 = 0;

39 
	`usb_upd©e_mou£
(&
°©e
);

41 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\src\USB_SRC\ring.c

7 
	~"rög.h
"

10 
	$rög_öô
(
rög_t
 *
rög
, 
uöt8_t
 *
buf
, 
rög_size_t
 
size
)

12 
rög
->
d©a
 = 
buf
;

13 
rög
->
size
 = size;

14 
rög
->
begö
 = 0;

15 
rög
->
íd
 = 0;

16 
	}
}

18 
öt32_t


19 
	$rög_wrôe_ch
(
rög_t
 *
rög
, 
uöt8_t
 
ch
)

21 i‡(((
rög
->
íd
 + 1Ë%Ñög->
size
Ë!rög->
begö
) {

22 
rög
->
d©a
[rög->
íd
++] = 
ch
;

23 
rög
->
íd
 %rög->
size
;

24  (
uöt32_t
)
ch
;

28 
	}
}

30 
öt32_t


31 
	$rög_wrôe
(
rög_t
 *
rög
, 
uöt8_t
 *
d©a
, 
rög_size_t
 
size
)

33 
öt32_t
 
i
;

35 
i
 = 0; i < 
size
; i++) {

36 i‡(
	`rög_wrôe_ch
(
rög
, 
d©a
[
i
]) < 0)

37  -
i
;

40  
i
;

41 
	}
}

43 
öt32_t


44 
	$rög_ªad_ch
(
rög_t
 *
rög
, 
uöt8_t
 *
ch
)

46 
öt32_t
 
ªt
 = -1;

48 i‡(
rög
->
begö
 !rög->
íd
) {

49 
ªt
 = 
rög
->
d©a
[rög->
begö
++];

50 
rög
->
begö
 %rög->
size
;

51 i‡(
ch
)

52 *
ch
 = 
ªt
;

55  
ªt
;

56 
	}
}

58 
öt32_t


59 
	$rög_ªad
(
rög_t
 *
rög
, 
uöt8_t
 *
d©a
, 
rög_size_t
 
size
)

61 
öt32_t
 
i
;

63 
i
 = 0; i < 
size
; i++) {

64 i‡(
	`rög_ªad_ch
(
rög
, 
d©a
 + 
i
) < 0)

65  
i
;

68  -
i
;

69 
	}
}

71 
öt32_t


72 
	$rög_ªad_c⁄töeous
(
rög_t
 *
rög
, 
uöt8_t
 **
d©a
)

74 
öt32_t
 
i
;

76 *
d©a
 = &
rög
->d©a[rög->
begö
];

78 i‡(
rög
->
begö
 =rög->
íd
) {

80 } i‡(
rög
->
begö
 >Ñög->
íd
) {

81 
i
 = 
rög
->
size
 -Ñög->
begö
;

82 
rög
->
begö
 = 0;

83 } i‡(
rög
->
begö
 <Ñög->
íd
) {

84 
i
 = 
rög
->
íd
 -Ñög->
begö
;

85 
rög
->
begö
 =Ñög->
íd
;

88  
i
;

89 
	}
}

91 
uöt32_t


92 
	$rög_m¨k
(
rög_t
 *
rög
)

94  
rög
->
íd
;

95 
	}
}

97 
uöt32_t


98 
	$rög_m¨kÀn
(
rög_t
 *
rög
, 
uöt32_t
 
m¨k
)

100  (((
rög
->
íd
 - 
m¨k
Ë+Ñög->
size
) %Ñing->size);

101 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\src\USB_SRC\serial.c

1 
	~<°rög.h
>

2 
	~<°d¨g.h
>

3 
	~<°dio.h
>

5 
	~"c⁄fig.h
"

6 
	~"rög.h
"

7 
	~"£rül.h
"

10 
rög
 
	gouçut_rög
;

11 
rög
 
	göput_rög
;

14 
boﬁ
 
	g£rül_a˘ive
;

15 
uöt32_t
 
	gtimî_out
 = 0;

26 
boﬁ
 
nkro_a˘ive
;

28 
	$£rül_ö
(
uöt8_t
 *
buf
, 
uöt16_t
 
Àn
)

30 
	`rög_wrôe
(&
öput_rög
, 
buf
, 
Àn
);

32 i‡(
buf
 && 
Àn
 > 0) {

33 i‡(
buf
[0] == 'n')

34 
nkro_a˘ive
 ^= 1;

39 
	`¥ötf
("nkrÿ%d\r", 
nkro_a˘ive
);

40 
	}
}

42 
	$£rül_out
()

44 
uöt8_t
 *
buf
;

45 
öt32_t
 
Àn
;

46 
uöt32_t
 
now
 = 
	`usb_now
();

48 i‡(
timî_out
 =
now
)

51 i‡(
	`RING_EMPTY
(&
ouçut_rög
))

54 
Àn
 = 
	`rög_ªad_c⁄töeous
(&
ouçut_rög
, &
buf
);

55 
	`cdˇcm_d©a_wx
(
buf
, 
Àn
);

56 
timî_out
 = 
now
;

57 
	}
}

	@C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\src\USB_SRC\usb.c

13 
	~<°dlib.h
>

14 
	~<°dio.h
>

16 
	~<lib›ícm3/cm3/nvic.h
>

17 
	~<lib›ícm3/cm3/sy°ick.h
>

18 
	~<lib›ícm3/°m32/rcc.h
>

19 
	~<lib›ícm3/°m32/•i.h
>

20 
	~<lib›ícm3/°m32/°_usbfs.h
>

21 
	~<lib›ícm3/usb/usbd.h
>

22 
	~<lib›ícm3/usb/hid.h
>

23 
	~<lib›ícm3/usb/cdc.h
>

24 
	~<lib›ícm3/°m32/gpio.h
>

25 
	~"des¸ùt‹.h
"

26 
	~"hid.h
"

27 
	~"usb.h
"

28 
	~"£rül.h
"

29 
	~"keybﬂrd.h
"

30 
	~"mou£.h
"

31 
	~"exåakey.h
"

32 
	~"ñog.h
"

33 
	~"usb_keycode.h
"

35 
usbd_devi˚
 *
	gusbd_dev
;

36 vﬁ©ûê
uöt32_t
 
	gusb_ms
 = 0;

70 c⁄° 
uöt8_t
 
	gkeybﬂrd_ªp‹t_des¸ùt‹
[] = {

71 
HID_RI_USAGE_PAGE
(8, 0x01),

72 
HID_RI_USAGE
(8, 0x06),

73 
HID_RI_COLLECTION
(8, 0x01),

74 
HID_RI_USAGE_PAGE
(8, 0x07),

75 
HID_RI_USAGE_MINIMUM
(8, 0xE0),

76 
HID_RI_USAGE_MAXIMUM
(8, 0xE7),

77 
HID_RI_LOGICAL_MINIMUM
(8, 0x00),

78 
HID_RI_LOGICAL_MAXIMUM
(8, 0x01),

79 
HID_RI_REPORT_COUNT
(8, 0x08),

80 
HID_RI_REPORT_SIZE
(8, 0x01),

81 
HID_RI_INPUT
(8, 
HID_IOF_DATA
 | 
HID_IOF_VARIABLE
 | 
HID_IOF_ABSOLUTE
),

83 
HID_RI_REPORT_COUNT
(8, 0x01),

84 
HID_RI_REPORT_SIZE
(8, 0x08),

85 
HID_RI_INPUT
(8, 
HID_IOF_CONSTANT
),

87 
HID_RI_USAGE_PAGE
(8, 0x08),

88 
HID_RI_USAGE_MINIMUM
(8, 0x01),

89 
HID_RI_USAGE_MAXIMUM
(8, 0x05),

90 
HID_RI_REPORT_COUNT
(8, 0x05),

91 
HID_RI_REPORT_SIZE
(8, 0x01),

92 
HID_RI_OUTPUT
(8, 
HID_IOF_DATA
 | 
HID_IOF_VARIABLE
 | 
HID_IOF_ABSOLUTE
 | 
HID_IOF_NON_VOLATILE
),

93 
HID_RI_REPORT_COUNT
(8, 0x01),

94 
HID_RI_REPORT_SIZE
(8, 0x03),

95 
HID_RI_OUTPUT
(8, 
HID_IOF_CONSTANT
),

97 
HID_RI_USAGE_PAGE
(8, 0x07),

98 
HID_RI_USAGE_MINIMUM
(8, 0x00),

99 
HID_RI_USAGE_MAXIMUM
(8, 0xFF),

100 
HID_RI_LOGICAL_MINIMUM
(8, 0x00),

101 
HID_RI_LOGICAL_MAXIMUM
(8, 0xFF),

102 
HID_RI_REPORT_COUNT
(8, 0x06),

103 
HID_RI_REPORT_SIZE
(8, 0x08),

104 
HID_RI_INPUT
(8, 
HID_IOF_DATA
 | 
HID_IOF_ARRAY
 | 
HID_IOF_ABSOLUTE
),

105 
HID_RI_END_COLLECTION
(0),

109 
usb_hid_des¸ùt‹
 
	mhid_des¸ùt‹
;

111 
uöt8_t
 
	mbRï‹tDes¸ùt‹Ty≥
;

112 
uöt16_t
 
	mwDes¸ùt‹Lígth
;

113 } 
__©åibuã__
((
∑cked
)Ë
	mhid_ªp‹t
;

114 } 
__©åibuã__
((
∑cked
)Ë
	gkeybﬂrd_fun˘i⁄
 = {

115 .
hid_des¸ùt‹
 = {

116 .
bLígth
 = (
keybﬂrd_fun˘i⁄
),

117 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_HID
,

118 .
	gbcdHID
 = 0x0111,

119 .
	gbCou¡ryCode
 = 0,

120 .
	gbNumDes¸ùt‹s
 = 1,

122 .
	ghid_ªp‹t
 = {

123 .
bRï‹tDes¸ùt‹Ty≥
 = 
USB_DT_REPORT
,

124 .
	gwDes¸ùt‹Lígth
 = (
keybﬂrd_ªp‹t_des¸ùt‹
),

128 c⁄° 
usb_ídpoöt_des¸ùt‹
 
	gkeybﬂrd_ídpoöt
 = {

129 .
bLígth
 = 
USB_DT_ENDPOINT_SIZE
,

130 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_ENDPOINT
,

131 .
	gbEndpoötAddªss
 = 
USB_ENDPOINT_ADDR_IN
(
EP_KEYBOARD
),

132 .
	gbmAâribuãs
 = (
USB_ENDPOINT_ATTR_INTERRUPT
 |

133 
USB_ENDPOINT_ATTR_NOSYNC
 |

134 
USB_ENDPOINT_ATTR_DATA
),

135 .
	gwMaxPackëSize
 = 
EP_SIZE_KEYBOARD
,

136 .
	gbI¡îvÆ
 = 0x0A,

139 c⁄° 
usb_öãrÁ˚_des¸ùt‹
 
	gkeybﬂrd_iÁ˚
 = {

140 .
bLígth
 = 
USB_DT_INTERFACE_SIZE
,

141 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_INTERFACE
,

142 .
	gbI¡îÁ˚Numbî
 = 
IF_KEYBOARD
,

143 .
	gbA…î«ãSëtög
 = 0,

144 .
	gbNumEndpoöts
 = 1,

145 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_HID
,

146 .
	gbI¡îÁ˚SubCœss
 = 
ID_IS_BOOT
,

147 .
	gbI¡îÁ˚PrŸocﬁ
 = 
ID_IP_KEYBOARD
,

148 .
	giI¡îÁ˚
 = 
STRI_KEYBOARD
,

150 .
	gídpoöt
 = &
keybﬂrd_ídpoöt
,

152 .
	gexåa
 = &
keybﬂrd_fun˘i⁄
,

153 .
	gexåÆí
 = (
keybﬂrd_fun˘i⁄
),

168 c⁄° 
uöt8_t
 
	gmou£_ªp‹t_des¸ùt‹
[] = {

169 
HID_RI_USAGE_PAGE
(8, 0x01),

170 
HID_RI_USAGE
(8, 0x02),

171 
HID_RI_COLLECTION
(8, 0x01),

172 
HID_RI_USAGE
(8, 0x01),

173 
HID_RI_COLLECTION
(8, 0x00),

175 
HID_RI_USAGE_PAGE
(8, 0x09),

176 
HID_RI_USAGE_MINIMUM
(8, 0x01),

177 
HID_RI_USAGE_MAXIMUM
(8, 0x05),

178 
HID_RI_LOGICAL_MINIMUM
(8, 0x00),

179 
HID_RI_LOGICAL_MAXIMUM
(8, 0x01),

180 
HID_RI_REPORT_COUNT
(8, 0x05),

181 
HID_RI_REPORT_SIZE
(8, 0x01),

182 
HID_RI_INPUT
(8, 
HID_IOF_DATA
 | 
HID_IOF_VARIABLE
 | 
HID_IOF_ABSOLUTE
),

183 
HID_RI_REPORT_COUNT
(8, 0x01),

184 
HID_RI_REPORT_SIZE
(8, 0x03),

185 
HID_RI_INPUT
(8, 
HID_IOF_CONSTANT
),

187 
HID_RI_USAGE_PAGE
(8, 0x01),

188 
HID_RI_USAGE
(8, 0x30),

189 
HID_RI_USAGE
(8, 0x31),

190 
HID_RI_LOGICAL_MINIMUM
(8, -127),

191 
HID_RI_LOGICAL_MAXIMUM
(8, 127),

192 
HID_RI_REPORT_COUNT
(8, 0x02),

193 
HID_RI_REPORT_SIZE
(8, 0x08),

194 
HID_RI_INPUT
(8, 
HID_IOF_DATA
 | 
HID_IOF_VARIABLE
 | 
HID_IOF_RELATIVE
),

196 
HID_RI_USAGE
(8, 0x38),

197 
HID_RI_LOGICAL_MINIMUM
(8, -127),

198 
HID_RI_LOGICAL_MAXIMUM
(8, 127),

199 
HID_RI_REPORT_COUNT
(8, 0x01),

200 
HID_RI_REPORT_SIZE
(8, 0x08),

201 
HID_RI_INPUT
(8, 
HID_IOF_DATA
 | 
HID_IOF_VARIABLE
 | 
HID_IOF_RELATIVE
),

203 
HID_RI_USAGE_PAGE
(8, 0x0C),

204 
HID_RI_USAGE
(16, 0x0238),

205 
HID_RI_LOGICAL_MINIMUM
(8, -127),

206 
HID_RI_LOGICAL_MAXIMUM
(8, 127),

207 
HID_RI_REPORT_COUNT
(8, 0x01),

208 
HID_RI_REPORT_SIZE
(8, 0x08),

209 
HID_RI_INPUT
(8, 
HID_IOF_DATA
 | 
HID_IOF_VARIABLE
 | 
HID_IOF_RELATIVE
),

211 
HID_RI_END_COLLECTION
(0),

212 
HID_RI_END_COLLECTION
(0),

216 
usb_hid_des¸ùt‹
 
	mhid_des¸ùt‹
;

218 
uöt8_t
 
	mbRï‹tDes¸ùt‹Ty≥
;

219 
uöt16_t
 
	mwDes¸ùt‹Lígth
;

220 } 
__©åibuã__
((
∑cked
)Ë
	mhid_ªp‹t
;

221 } 
__©åibuã__
((
∑cked
)Ë
	gmou£_fun˘i⁄
 = {

222 .
hid_des¸ùt‹
 = {

223 .
bLígth
 = (
mou£_fun˘i⁄
),

224 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_HID
,

225 .
	gbcdHID
 = 0x0111,

226 .
	gbCou¡ryCode
 = 0,

227 .
	gbNumDes¸ùt‹s
 = 1,

229 .
	ghid_ªp‹t
 = {

230 .
bRï‹tDes¸ùt‹Ty≥
 = 
USB_DT_REPORT
,

231 .
	gwDes¸ùt‹Lígth
 = (
mou£_ªp‹t_des¸ùt‹
),

235 c⁄° 
usb_ídpoöt_des¸ùt‹
 
	gmou£_ídpoöt
 = {

236 .
bLígth
 = 
USB_DT_ENDPOINT_SIZE
,

237 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_ENDPOINT
,

238 .
	gbEndpoötAddªss
 = 
USB_ENDPOINT_ADDR_IN
(
EP_MOUSE
),

239 .
	gbmAâribuãs
 = (
USB_ENDPOINT_ATTR_INTERRUPT
 |

240 
USB_ENDPOINT_ATTR_NOSYNC
 |

241 
USB_ENDPOINT_ATTR_DATA
),

242 .
	gwMaxPackëSize
 = 
EP_SIZE_MOUSE
,

243 .
	gbI¡îvÆ
 = 0x0A,

246 c⁄° 
usb_öãrÁ˚_des¸ùt‹
 
	gmou£_iÁ˚
 = {

247 .
bLígth
 = 
USB_DT_INTERFACE_SIZE
,

248 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_INTERFACE
,

249 .
	gbI¡îÁ˚Numbî
 = 
IF_MOUSE
,

250 .
	gbA…î«ãSëtög
 = 0,

251 .
	gbNumEndpoöts
 = 1,

252 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_HID
,

253 .
	gbI¡îÁ˚SubCœss
 = 
ID_IS_BOOT
,

254 .
	gbI¡îÁ˚PrŸocﬁ
 = 
ID_IP_MOUSE
,

255 .
	giI¡îÁ˚
 = 
STRI_MOUSE
,

257 .
	gídpoöt
 = &
mou£_ídpoöt
,

259 .
	gexåa
 = &
mou£_fun˘i⁄
,

260 .
	gexåÆí
 = (
mou£_fun˘i⁄
),

272 c⁄° 
uöt8_t
 
	gexåakey_ªp‹t_des¸ùt‹
[] = {

273 
HID_RI_USAGE_PAGE
(8, 0x01),

274 
HID_RI_USAGE
(8, 0x80),

275 
HID_RI_COLLECTION
(8, 0x01),

276 
HID_RI_REPORT_ID
(8, 
REPORTID_SYSTEM
),

277 
HID_RI_USAGE_MINIMUM
(16, 
SYSTEM_START
),

278 
HID_RI_USAGE_MAXIMUM
(16, 
SYSTEM_DPADLEFT
),

279 
HID_RI_LOGICAL_MINIMUM
(16, 
SYSTEM_START
),

280 
HID_RI_LOGICAL_MAXIMUM
(16, 
SYSTEM_DPADLEFT
),

281 
HID_RI_REPORT_SIZE
(8, 16),

282 
HID_RI_REPORT_COUNT
(8, 1),

283 
HID_RI_INPUT
(8, 
HID_IOF_DATA
 | 
HID_IOF_ARRAY
 | 
HID_IOF_ABSOLUTE
),

284 
HID_RI_END_COLLECTION
(0),

286 
HID_RI_USAGE_PAGE
(8, 0x0C),

287 
HID_RI_USAGE
(8, 0x01),

288 
HID_RI_COLLECTION
(8, 0x01),

289 
HID_RI_REPORT_ID
(8, 
REPORTID_CONSUMER
),

290 
HID_RI_USAGE_MINIMUM
(16, 
CONSUMER_POWER
),

291 
HID_RI_USAGE_MAXIMUM
(16, 
CONSUMER_AC_SEND
),

292 
HID_RI_LOGICAL_MINIMUM
(16, 
CONSUMER_POWER
),

293 
HID_RI_LOGICAL_MAXIMUM
(16, 
CONSUMER_AC_SEND
),

294 
HID_RI_REPORT_SIZE
(8, 16),

295 
HID_RI_REPORT_COUNT
(8, 1),

296 
HID_RI_INPUT
(8, 
HID_IOF_DATA
 | 
HID_IOF_ARRAY
 | 
HID_IOF_ABSOLUTE
),

297 
HID_RI_END_COLLECTION
(0),

301 
usb_hid_des¸ùt‹
 
	mhid_des¸ùt‹
;

303 
uöt8_t
 
	mbRï‹tDes¸ùt‹Ty≥
;

304 
uöt16_t
 
	mwDes¸ùt‹Lígth
;

305 } 
__©åibuã__
((
∑cked
)Ë
	mhid_ªp‹t
;

306 } 
__©åibuã__
((
∑cked
)Ë
	gexåakey_fun˘i⁄
 = {

307 .
hid_des¸ùt‹
 = {

308 .
bLígth
 = (
exåakey_fun˘i⁄
),

309 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_HID
,

310 .
	gbcdHID
 = 0x0111,

311 .
	gbCou¡ryCode
 = 0,

312 .
	gbNumDes¸ùt‹s
 = 1,

314 .
	ghid_ªp‹t
 = {

315 .
bRï‹tDes¸ùt‹Ty≥
 = 
USB_DT_REPORT
,

316 .
	gwDes¸ùt‹Lígth
 = (
exåakey_ªp‹t_des¸ùt‹
),

320 c⁄° 
usb_ídpoöt_des¸ùt‹
 
	gexåakey_ídpoöt
 = {

321 .
bLígth
 = 
USB_DT_ENDPOINT_SIZE
,

322 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_ENDPOINT
,

323 .
	gbEndpoötAddªss
 = 
USB_ENDPOINT_ADDR_IN
(
EP_EXTRAKEY
),

324 .
	gbmAâribuãs
 = (
USB_ENDPOINT_ATTR_INTERRUPT
 |

325 
USB_ENDPOINT_ATTR_NOSYNC
 |

326 
USB_ENDPOINT_ATTR_DATA
),

327 .
	gwMaxPackëSize
 = 
EP_SIZE_EXTRAKEY
,

328 .
	gbI¡îvÆ
 = 0x0A,

331 c⁄° 
usb_öãrÁ˚_des¸ùt‹
 
	gexåakey_iÁ˚
 = {

332 .
bLígth
 = 
USB_DT_INTERFACE_SIZE
,

333 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_INTERFACE
,

334 .
	gbI¡îÁ˚Numbî
 = 
IF_EXTRAKEY
,

335 .
	gbA…î«ãSëtög
 = 0,

336 .
	gbNumEndpoöts
 = 1,

337 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_HID
,

338 .
	gbI¡îÁ˚SubCœss
 = 
ID_IS_NONE
,

339 .
	gbI¡îÁ˚PrŸocﬁ
 = 
ID_IP_NONE
,

340 .
	giI¡îÁ˚
 = 
STRI_EXTRAKEY
,

342 .
	gídpoöt
 = &
exåakey_ídpoöt
,

344 .
	gexåa
 = &
exåakey_fun˘i⁄
,

345 .
	gexåÆí
 = (
exåakey_fun˘i⁄
),

375 c⁄° 
uöt8_t
 
	gnkro_ªp‹t_des¸ùt‹
[] =

377 
HID_RI_USAGE_PAGE
(8, 0x01),

378 
HID_RI_USAGE
(8, 0x06),

379 
HID_RI_COLLECTION
(8, 0x01),

380 
HID_RI_USAGE_PAGE
(8, 0x07),

381 
HID_RI_USAGE_MINIMUM
(8, 0xE0),

382 
HID_RI_USAGE_MAXIMUM
(8, 0xE7),

383 
HID_RI_LOGICAL_MINIMUM
(8, 0x00),

384 
HID_RI_LOGICAL_MAXIMUM
(8, 0x01),

385 
HID_RI_REPORT_COUNT
(8, 0x08),

386 
HID_RI_REPORT_SIZE
(8, 0x01),

387 
HID_RI_INPUT
(8, 
HID_IOF_DATA
 | 
HID_IOF_VARIABLE
 | 
HID_IOF_ABSOLUTE
),

389 
HID_RI_USAGE_PAGE
(8, 0x08),

390 
HID_RI_USAGE_MINIMUM
(8, 0x01),

391 
HID_RI_USAGE_MAXIMUM
(8, 0x05),

392 
HID_RI_REPORT_COUNT
(8, 0x05),

393 
HID_RI_REPORT_SIZE
(8, 0x01),

394 
HID_RI_OUTPUT
(8, 
HID_IOF_DATA
 | 
HID_IOF_VARIABLE
 | 
HID_IOF_ABSOLUTE
 | 
HID_IOF_NON_VOLATILE
),

395 
HID_RI_REPORT_COUNT
(8, 0x01),

396 
HID_RI_REPORT_SIZE
(8, 0x03),

397 
HID_RI_OUTPUT
(8, 
HID_IOF_CONSTANT
),

399 
HID_RI_USAGE_PAGE
(8, 0x07),

400 
HID_RI_USAGE_MINIMUM
(8, 
KEY_A
),

401 
HID_RI_USAGE_MAXIMUM
(8, ((
EP_SIZE_NKRO
 -1 ) * 8Ë+ 
KEY_A
 - 1),

402 
HID_RI_LOGICAL_MINIMUM
(8, 0x00),

403 
HID_RI_LOGICAL_MAXIMUM
(8, 0x01),

404 
HID_RI_REPORT_COUNT
(8, (
EP_SIZE_NKRO
 - 1) * 8),

405 
HID_RI_REPORT_SIZE
(8, 0x01),

406 
HID_RI_INPUT
(8, 
HID_IOF_DATA
 | 
HID_IOF_VARIABLE
 | 
HID_IOF_ABSOLUTE
),

407 
HID_RI_END_COLLECTION
(0),

411 
usb_hid_des¸ùt‹
 
	mhid_des¸ùt‹
;

413 
uöt8_t
 
	mbRï‹tDes¸ùt‹Ty≥
;

414 
uöt16_t
 
	mwDes¸ùt‹Lígth
;

415 } 
__©åibuã__
((
∑cked
)Ë
	mhid_ªp‹t
;

416 } 
__©åibuã__
((
∑cked
)Ë
	gnkro_fun˘i⁄
 = {

417 .
hid_des¸ùt‹
 = {

418 .
bLígth
 = (
nkro_fun˘i⁄
),

419 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_HID
,

420 .
	gbcdHID
 = 0x0111,

421 .
	gbCou¡ryCode
 = 0,

422 .
	gbNumDes¸ùt‹s
 = 1,

424 .
	ghid_ªp‹t
 = {

425 .
bRï‹tDes¸ùt‹Ty≥
 = 
USB_DT_REPORT
,

426 .
	gwDes¸ùt‹Lígth
 = (
nkro_ªp‹t_des¸ùt‹
),

430 c⁄° 
usb_ídpoöt_des¸ùt‹
 
	gnkro_ídpoöt
 = {

431 .
bLígth
 = 
USB_DT_ENDPOINT_SIZE
,

432 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_ENDPOINT
,

433 .
	gbEndpoötAddªss
 = 
USB_ENDPOINT_ADDR_IN
(
EP_NKRO
),

434 .
	gbmAâribuãs
 = (
USB_ENDPOINT_ATTR_INTERRUPT
 |

435 
USB_ENDPOINT_ATTR_NOSYNC
 |

436 
USB_ENDPOINT_ATTR_DATA
),

437 .
	gwMaxPackëSize
 = 
EP_SIZE_NKRO
,

438 .
	gbI¡îvÆ
 = 0x01,

441 c⁄° 
usb_öãrÁ˚_des¸ùt‹
 
	gnkro_iÁ˚
 = {

442 .
bLígth
 = 
USB_DT_INTERFACE_SIZE
,

443 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_INTERFACE
,

444 .
	gbI¡îÁ˚Numbî
 = 
IF_NKRO
,

445 .
	gbA…î«ãSëtög
 = 0,

446 .
	gbNumEndpoöts
 = 1,

447 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_HID
,

448 .
	gbI¡îÁ˚SubCœss
 = 
ID_IS_NONE
,

449 .
	gbI¡îÁ˚PrŸocﬁ
 = 
ID_IP_NONE
,

450 .
	giI¡îÁ˚
 = 
STRI_NKRO
,

452 .
	gídpoöt
 = &
nkro_ídpoöt
,

454 .
	gexåa
 = &
nkro_fun˘i⁄
,

455 .
	gexåÆí
 = (
nkro_fun˘i⁄
),

464 c⁄° 
usb_ídpoöt_des¸ùt‹
 
	gcomm_ídpoöt
[] = {{

465 .
bLígth
 = 
USB_DT_ENDPOINT_SIZE
,

466 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_ENDPOINT
,

467 .
	gbEndpoötAddªss
 = 
USB_ENDPOINT_ADDR_IN
(
EP_SERIALCOMM
),

468 .
	gbmAâribuãs
 = 
USB_ENDPOINT_ATTR_INTERRUPT
,

469 .
	gwMaxPackëSize
 = 
EP_SIZE_SERIALCOMM
,

470 .
	gbI¡îvÆ
 = 0xff,

473 c⁄° 
usb_ídpoöt_des¸ùt‹
 
	gd©a_ídpoöt
[] = {{

474 .
bLígth
 = 
USB_DT_ENDPOINT_SIZE
,

475 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_ENDPOINT
,

476 .
	gbEndpoötAddªss
 = 
USB_ENDPOINT_ADDR_OUT
(
EP_SERIALDATAOUT
),

477 .
	gbmAâribuãs
 = 
USB_ENDPOINT_ATTR_BULK
,

478 .
	gwMaxPackëSize
 = 
EP_SIZE_SERIALDATAOUT
,

479 .
	gbI¡îvÆ
 = 0x0a,

481 .
	gbLígth
 = 
USB_DT_ENDPOINT_SIZE
,

482 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_ENDPOINT
,

483 .
	gbEndpoötAddªss
 = 
USB_ENDPOINT_ADDR_IN
(
EP_SERIALDATAIN
),

484 .
	gbmAâribuãs
 = 
USB_ENDPOINT_ATTR_BULK
,

485 .
	gwMaxPackëSize
 = 
EP_SIZE_SERIALDATAIN
,

486 .
	gbI¡îvÆ
 = 0x0a,

490 
usb_cdc_hódî_des¸ùt‹
 
	mhódî
;

491 
usb_cdc_ˇŒ_m™agemít_des¸ùt‹
 
	mˇŒ_mgmt
;

492 
usb_cdc_acm_des¸ùt‹
 
	macm
;

493 
usb_cdc_uni⁄_des¸ùt‹
 
	mcdc_uni⁄
;

494 } 
__©åibuã__
((
∑cked
)Ë
	gcdˇcm_fun˘i⁄Æ_des¸ùt‹s
 = {

495 .
hódî
 = {

496 .
bFun˘i⁄Lígth
 = (
usb_cdc_hódî_des¸ùt‹
),

497 .
	gbDes¸ùt‹Ty≥
 = 
CS_INTERFACE
,

498 .
	gbDes¸ùt‹Subty≥
 = 
USB_CDC_TYPE_HEADER
,

499 .
	gbcdCDC
 = 0x0110,

501 .
	gˇŒ_mgmt
 = {

502 .
bFun˘i⁄Lígth
 =

503 (
usb_cdc_ˇŒ_m™agemít_des¸ùt‹
),

504 .
	gbDes¸ùt‹Ty≥
 = 
CS_INTERFACE
,

505 .
	gbDes¸ùt‹Subty≥
 = 
USB_CDC_TYPE_CALL_MANAGEMENT
,

506 .
	gbmC≠abûôõs
 = 0,

507 .
	gbD©aI¡îÁ˚
 = 
IF_SERIALDATA
,

509 .
	gacm
 = {

510 .
bFun˘i⁄Lígth
 = (
usb_cdc_acm_des¸ùt‹
),

511 .
	gbDes¸ùt‹Ty≥
 = 
CS_INTERFACE
,

512 .
	gbDes¸ùt‹Subty≥
 = 
USB_CDC_TYPE_ACM
,

513 .
	gbmC≠abûôõs
 = 0,

515 .
	gcdc_uni⁄
 = {

516 .
bFun˘i⁄Lígth
 = (
usb_cdc_uni⁄_des¸ùt‹
),

517 .
	gbDes¸ùt‹Ty≥
 = 
CS_INTERFACE
,

518 .
	gbDes¸ùt‹Subty≥
 = 
USB_CDC_TYPE_UNION
,

519 .
	gbC⁄åﬁI¡îÁ˚
 = 
IF_SERIALCOMM
,

520 .
	gbSub‹dö©eI¡îÁ˚0
 = 
IF_SERIALDATA
,

524 c⁄° 
usb_öãrÁ˚_des¸ùt‹
 
	gcdc_comm_iÁ˚
[] = {{

525 .
bLígth
 = 
USB_DT_INTERFACE_SIZE
,

526 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_INTERFACE
,

527 .
	gbI¡îÁ˚Numbî
 = 
IF_SERIALCOMM
,

528 .
	gbA…î«ãSëtög
 = 0,

529 .
	gbNumEndpoöts
 = 1,

530 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_CDC
,

531 .
	gbI¡îÁ˚SubCœss
 = 
USB_CDC_SUBCLASS_ACM
,

532 .
	gbI¡îÁ˚PrŸocﬁ
 = 
USB_CDC_PROTOCOL_AT
,

533 .
	giI¡îÁ˚
 = 
STRI_COMMAND
,

535 .
	gídpoöt
 = 
comm_ídpoöt
,

537 .
	gexåa
 = &
cdˇcm_fun˘i⁄Æ_des¸ùt‹s
,

538 .
	gexåÆí
 = (
cdˇcm_fun˘i⁄Æ_des¸ùt‹s
),

541 c⁄° 
usb_öãrÁ˚_des¸ùt‹
 
	gcdc_d©a_iÁ˚
[] = {{

542 .
bLígth
 = 
USB_DT_INTERFACE_SIZE
,

543 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_INTERFACE
,

544 .
	gbI¡îÁ˚Numbî
 = 
IF_SERIALDATA
,

545 .
	gbA…î«ãSëtög
 = 0,

546 .
	gbNumEndpoöts
 = 2,

547 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_DATA
,

548 .
	gbI¡îÁ˚SubCœss
 = 0,

549 .
	gbI¡îÁ˚PrŸocﬁ
 = 0,

550 .
	giI¡îÁ˚
 = 
STRI_COMMAND
,

552 .
	gídpoöt
 = 
d©a_ídpoöt
,

555 c⁄° 
usb_öãrÁ˚
 
	giÁ˚s
[] = {{

556 .
num_Æt£âög
 = 1,

557 .
	gÆt£âög
 = &
keybﬂrd_iÁ˚
,

559 .
	gnum_Æt£âög
 = 1,

560 .
	gÆt£âög
 = &
mou£_iÁ˚
,

562 .
	gnum_Æt£âög
 = 1,

563 .
	gÆt£âög
 = &
exåakey_iÁ˚
,

565 .
	gnum_Æt£âög
 = 1,

566 .
	gÆt£âög
 = &
nkro_iÁ˚
,

568 .
	gnum_Æt£âög
 = 1,

569 .
	gÆt£âög
 = 
cdc_comm_iÁ˚
,

571 .
	gnum_Æt£âög
 = 1,

572 .
	gÆt£âög
 = 
cdc_d©a_iÁ˚
,

575 c⁄° 
usb_devi˚_des¸ùt‹
 
	gdev_des¸ùt‹
 = {

576 .
bLígth
 = 
USB_DT_DEVICE_SIZE
,

577 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_DEVICE
,

578 .
	gbcdUSB
 = 0x0110,

579 .
	gbDevi˚Cœss
 = 0,

580 .
	gbDevi˚SubCœss
 = 0,

581 .
	gbDevi˚PrŸocﬁ
 = 0,

582 .
	gbMaxPackëSize0
 = 64,

583 .
	gidVíd‹
 = 0xDEAD,

584 .
	gidProdu˘
 = 0xBEEF,

585 .
	gbcdDevi˚
 = 0x010,

586 .
	giM™uÁ˘uªr
 = 
STRI_MANUFACTURER
,

587 .
	giProdu˘
 = 
STRI_PRODUCT
,

588 .
	giSîülNumbî
 = 
STRI_SERIAL
,

589 .
	gbNumC⁄figuøti⁄s
 = 1,

593 c⁄° 
usb_c⁄fig_des¸ùt‹
 
	gc⁄fig
 = {

594 .
bLígth
 = 
USB_DT_CONFIGURATION_SIZE
,

595 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_CONFIGURATION
,

596 .
	gwTŸÆLígth
 = 0,

597 .
	gbNumI¡îÁ˚s
 = 3,

598 .
	gbC⁄figuøti⁄VÆue
 = 1,

599 .
	giC⁄figuøti⁄
 = 0,

600 .
	gbmAâribuãs
 = (
CD_A_RESERVED
 | 
CD_A_REMOTEWAKEUP
),

601 .
	gbMaxPowî
 = 
CD_MP_100MA
,

603 .
	göãrÁ˚
 = 
iÁ˚s
,

606 c⁄° *
	gusb_°rögs
[] = {

617 
usb_c⁄åﬁ_ªque°
(
usbd_devi˚
 *
dev
, 
usb_£tup_d©a
 *
ªq
, 
uöt8_t
 **
buf
,

618 
uöt16_t
 *
Àn
, (**
com∂ëe
)(
usbd_devi˚
 *
dev
, 
usb_£tup_d©a
 *
ªq
))

620 ()
com∂ëe
;

621 ()
buf
;

622 ()
dev
;

624 i‡(
ªq
->
bReque°
 =
USB_REQ_GET_DESCRIPTOR
) {

625 
uöt8_t
 
dty≥
 = (
ªq
->
wVÆue
 >> 8);

627 i‡(
dty≥
 =
USB_DT_REPORT
) {

628 
ªq
->
wIndex
) {

629 
IF_KEYBOARD
:

630 *
buf
 = (
uöt8_t
 *Ë&
keybﬂrd_ªp‹t_des¸ùt‹
;

631 *
Àn
 = (
keybﬂrd_ªp‹t_des¸ùt‹
);

632  
USBD_REQ_HANDLED
;

635 
IF_MOUSE
:

636 *
buf
 = (
uöt8_t
 *Ë&
mou£_ªp‹t_des¸ùt‹
;

637 *
Àn
 = (
mou£_ªp‹t_des¸ùt‹
);

638  
USBD_REQ_HANDLED
;

641 
IF_EXTRAKEY
:

642 *
buf
 = (
uöt8_t
 *Ë&
exåakey_ªp‹t_des¸ùt‹
;

643 *
Àn
 = (
exåakey_ªp‹t_des¸ùt‹
);

644  
USBD_REQ_HANDLED
;

647 
IF_NKRO
:

648 *
buf
 = (
uöt8_t
 *Ë&
nkro_ªp‹t_des¸ùt‹
;

649 *
Àn
 = (
nkro_ªp‹t_des¸ùt‹
);

650  
USBD_REQ_HANDLED
;

654 } i‡(
ªq
->
bReque°
 =
USBHID_REQ_GET_REPORT
) {

655 
ªq
->
wIndex
) {

656 
IF_KEYBOARD
:

657 *
buf
 = (
uöt8_t
 *Ë
	`keybﬂrd_ªp‹t
();

658 *
Àn
 = (
ªp‹t_keybﬂrd_t
);

659  
USBD_REQ_HANDLED
;

662 
IF_MOUSE
:

663 *
buf
 = (
uöt8_t
 *Ë
	`mou£_ªp‹t
();

664 *
Àn
 = (
ªp‹t_mou£_t
);

665  
USBD_REQ_HANDLED
;

668 
IF_EXTRAKEY
:

669 *
buf
 = (
uöt8_t
 *Ë
	`exåakey_ªp‹t
();

670 *
Àn
 = (
ªp‹t_exåakey_t
);

671  
USBD_REQ_HANDLED
;

674 
IF_NKRO
:

675 *
buf
 = (
uöt8_t
 *Ë
	`nkro_ªp‹t
();

676 *
Àn
 = (
ªp‹t_nkro_t
);

677  
USBD_REQ_HANDLED
;

680 } i‡(
ªq
->
bReque°
 =
USBHID_REQ_SET_REPORT
) {

681 
ªq
->
wIndex
) {

682 
IF_KEYBOARD
:

683 
IF_NKRO
:

684 i‡(
Àn
 && *À¿&& 
buf
 && *buf)

685 
	`keybﬂrd_£t_Àds
(**
buf
);

686  
USBD_REQ_HANDLED
;

689 } i‡(
ªq
->
bReque°
 =
USBHID_REQ_GET_IDLE
) {

690 
ªq
->
wIndex
) {

691 
IF_KEYBOARD
:

692 *
buf
 = &
keybﬂrd_idÀ
;

693 *
Àn
 = (
keybﬂrd_idÀ
);

694  
USBD_REQ_HANDLED
;

697 
IF_MOUSE
:

698 *
buf
 = &
mou£_idÀ
;

699 *
Àn
 = (
mou£_idÀ
);

700  
USBD_REQ_HANDLED
;

703 
IF_EXTRAKEY
:

704 *
buf
 = &
exåakey_idÀ
;

705 *
Àn
 = (
exåakey_idÀ
);

706  
USBD_REQ_HANDLED
;

709 
IF_NKRO
:

710 *
buf
 = &
nkro_idÀ
;

711 *
Àn
 = (
nkro_idÀ
);

712  
USBD_REQ_HANDLED
;

715 } i‡(
ªq
->
bReque°
 =
USBHID_REQ_SET_IDLE
) {

716 
uöt8_t
 
idÀøã
 = (
ªq
->
wVÆue
 >> 8);

718 
ªq
->
wIndex
) {

719 
IF_KEYBOARD
:

720 
keybﬂrd_idÀ
 = 
idÀøã
;

721  
USBD_REQ_HANDLED
;

724 
IF_MOUSE
:

725 
mou£_idÀ
 = 
idÀøã
;

726  
USBD_REQ_HANDLED
;

729 
IF_EXTRAKEY
:

730 
exåakey_idÀ
 = 
idÀøã
;

731  
USBD_REQ_HANDLED
;

734 
IF_NKRO
:

735 
nkro_idÀ
 = 
idÀøã
;

736  
USBD_REQ_HANDLED
;

739 } i‡(
ªq
->
bReque°
 =
USBHID_REQ_GET_PROTOCOL
) {

740 
ªq
->
wIndex
) {

741 
IF_KEYBOARD
:

742 
IF_NKRO
:

743 *
buf
 = 
	`keybﬂrd_gë_¥Ÿocﬁ
();

744 *
Àn
 = 1;

745  
USBD_REQ_HANDLED
;

747 } i‡(
ªq
->
bReque°
 =
USBHID_REQ_SET_PROTOCOL
) {

748 
ªq
->
wIndex
) {

749 
IF_KEYBOARD
:

750 
IF_NKRO
:

751 
	`keybﬂrd_£t_¥Ÿocﬁ
(
ªq
->
wVÆue
);

752  
USBD_REQ_HANDLED
;

754 } i‡((
ªq
->
bReque°
 =
USB_CDC_REQ_SET_CONTROL_LINE_STATE
) ||

755 (
ªq
->
bReque°
 =
USB_CDC_REQ_SET_LINE_CODING
)) {

757 
keybﬂrd_a˘ive
 = 
£rül_a˘ive
 = 
åue
;

758  
USBD_REQ_HANDLED
;

760  
USBD_REQ_NEXT_CALLBACK
;

761 
	}
}

763 
uöt16_t
 
	$usb_wrôe_∑ckë
(
usbd_devi˚
 *
dev
, 
uöt8_t
 
addr
, c⁄° * 
buf
, 
uöt16_t
 
Àn
)

765 
åõs
 = 0;

766 
uöt16_t
 
wÀn
;

768 
wÀn
 = 
	`usbd_ï_wrôe_∑ckë
(
dev
, 
addr
, 
buf
, 
Àn
);

769 (
wÀn
 =0Ë&& (
åõs
 < 
SEND_RETRIES
);

770 
åõs
++);

772  
wÀn
;

773 
	}
}

775 
	$usb_upd©e_keybﬂrd
(
ªp‹t_keybﬂrd_t
 *
ªp‹t
)

777 
	`usb_wrôe_∑ckë
(
usbd_dev
, 
EP_KEYBOARD
, 
ªp‹t
->
øw
, 
EP_SIZE_KEYBOARD
);

778 
	}
}

780 
	$usb_upd©e_mou£
(
ªp‹t_mou£_t
 *
ªp‹t
)

782 
	`usb_wrôe_∑ckë
(
usbd_dev
, 
EP_MOUSE
, &
ªp‹t
->
øw
, 
EP_SIZE_MOUSE
);

783 
	}
}

785 
	$usb_upd©e_exåakey
(
ªp‹t_exåakey_t
 *
ªp‹t
)

787 
	`usb_wrôe_∑ckë
(
usbd_dev
, 
EP_EXTRAKEY
, &
ªp‹t
->
øw
, 
EP_SIZE_EXTRAKEY
);

788 
	}
}

790 
	$usb_upd©e_nkro
(
ªp‹t_nkro_t
 *
ªp‹t
)

792 
	`usb_wrôe_∑ckë
(
usbd_dev
, 
EP_NKRO
, &
ªp‹t
->
øw
, 
EP_SIZE_NKRO
);

793 
	}
}

795 
	$usb_£t_c⁄fig
(
usbd_devi˚
 *
dev
, 
uöt16_t
 
wVÆue
)

797 ()
wVÆue
;

799 
	`usbd_ï_£tup
(
dev
,

800 
	`USB_ENDPOINT_ADDR_IN
(
EP_KEYBOARD
),

801 
USB_ENDPOINT_ATTR_INTERRUPT
,

802 
	`EP_SIZE_ALIGN
(
EP_SIZE_KEYBOARD
),

803 
NULL
);

804 
	`usbd_ï_£tup
(
dev
,

805 
	`USB_ENDPOINT_ADDR_IN
(
EP_MOUSE
),

806 
USB_ENDPOINT_ATTR_INTERRUPT
,

807 
	`EP_SIZE_ALIGN
(
EP_SIZE_MOUSE
),

808 
NULL
);

809 
	`usbd_ï_£tup
(
dev
,

810 
	`USB_ENDPOINT_ADDR_IN
(
EP_EXTRAKEY
),

811 
USB_ENDPOINT_ATTR_INTERRUPT
,

812 
	`EP_SIZE_ALIGN
(
EP_SIZE_EXTRAKEY
),

813 
NULL
);

814 
	`usbd_ï_£tup
(
dev
,

815 
	`USB_ENDPOINT_ADDR_IN
(
EP_NKRO
),

816 
USB_ENDPOINT_ATTR_INTERRUPT
,

817 
	`EP_SIZE_ALIGN
(
EP_SIZE_NKRO
),

818 
NULL
);

820 
	`usbd_ï_£tup
(
dev
,

821 
	`USB_ENDPOINT_ADDR_OUT
(
EP_SERIALDATAOUT
),

822 
USB_ENDPOINT_ATTR_BULK
,

823 
	`EP_SIZE_ALIGN
(
EP_SIZE_SERIALDATAOUT
),

824 
cdˇcm_d©a_rx_cb
);

825 
	`usbd_ï_£tup
(
dev
,

826 
	`USB_ENDPOINT_ADDR_IN
(
EP_SERIALDATAIN
),

827 
USB_ENDPOINT_ATTR_BULK
,

828 
	`EP_SIZE_ALIGN
(
EP_SIZE_SERIALDATAIN
),

829 
NULL
);

830 
	`usbd_ï_£tup
(
dev
,

831 
	`USB_ENDPOINT_ADDR_IN
(
EP_SERIALCOMM
),

832 
USB_ENDPOINT_ATTR_INTERRUPT
,

833 
	`EP_SIZE_ALIGN
(
EP_SIZE_SERIALCOMM
),

834 
NULL
);

836 
	`usbd_ªgi°î_c⁄åﬁ_ˇŒback
(
dev
,

837 
USB_REQ_TYPE_INTERFACE
,

838 
USB_REQ_TYPE_RECIPIENT
,

839 
usb_c⁄åﬁ_ªque°
);

840 
	}
}

843 
	$usb_ª£t
()

845 
	`ñog
("usbÑeset\n");

846 
keybﬂrd_a˘ive
 = 
£rül_a˘ive
 = 
Ál£
;

847 
	}
}

850 
	$usb_ªsume
()

852 
	`ñog
("usbÑesume\n");

853 
keybﬂrd_a˘ive
 = 
£rül_a˘ive
 = 
åue
;

854 
	}
}

857 
	$usb_sof
()

859 
usb_ms
++;

860 
	}
}

863 
	$usb_su•íd
()

865 
	`ñog
("usb suspend\n");

866 
keybﬂrd_a˘ive
 = 
£rül_a˘ive
 = 
Ál£
;

867 
	}
}

869 
uöt32_t


870 
	$usb_now
()

872  
usb_ms
;

873 
	}
}

876 
uöt8_t
 
	gusbd_c⁄åﬁ_buf„r
[256] 
__©åibuã__
((
Æig√d
));

879 
	$usb_öô
()

881 
usbd_dev
 = 
	`usbd_öô
(&
°_usbfs_v1_usb_drivî
,

882 &
dev_des¸ùt‹
,

883 &
c⁄fig
,

884 
usb_°rögs
, 
STRI_MAX
,

885 
usbd_c⁄åﬁ_buf„r
, (usbd_control_buffer));

887 
	`usbd_ªgi°î_£t_c⁄fig_ˇŒback
(
usbd_dev
, 
usb_£t_c⁄fig
);

888 
	`usbd_ªgi°î_ª£t_ˇŒback
(
usbd_dev
, 
usb_ª£t
);

889 
	`usbd_ªgi°î_ªsume_ˇŒback
(
usbd_dev
, 
usb_ªsume
);

890 
	`usbd_ªgi°î_sof_ˇŒback
(
usbd_dev
, 
usb_sof
);

891 
	`usbd_ªgi°î_su•íd_ˇŒback
(
usbd_dev
, 
usb_su•íd
);

892 
	`¥ötf
("%s\n", 
usb_°rögs
[0]);

893 
	`¥ötf
("%s\n", 
usb_°rögs
[1]);

894 
	`¥ötf
("%s\n", 
usb_°rögs
[2]);

896 
	}
}

899 
	$usb_pﬁl
()

901 
	`usbd_pﬁl
(
usbd_dev
);

902 
	}
}

905 
	$cdˇcm_d©a_rx_cb
(
usbd_devi˚
 *
dev
, 
uöt8_t
 
ï
)

907 ()
ï
;

909 
uöt16_t
 
Àn
;

910 
£rülbuf
[
EP_SIZE_SERIALDATAOUT
] 
	`__©åibuã__
((
Æig√d
));

912 
Àn
 = 
	`usbd_ï_ªad_∑ckë
(
dev
,

913 
	`USB_ENDPOINT_ADDR_OUT
(
EP_SERIALDATAOUT
),

914 
£rülbuf
, 
EP_SIZE_SERIALDATAOUT
);

916 
	`£rül_ö
((
uöt8_t
 *)
£rülbuf
, 
Àn
);

917 
	}
}

920 
	$cdˇcm_d©a_wx
(
uöt8_t
 *
buf
, 
uöt16_t
 
Àn
)

922 
	`usbd_ï_wrôe_∑ckë
(
usbd_dev
, 
EP_SERIALDATAIN
, 
buf
, 
Àn
);

923 
	}
}

	@
1
.
0
172
15733
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\MEMORY~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\assert.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\common.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\cortex.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\doc-cm3.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\dwt.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\fpb.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\itm.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\mpu.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\nvic.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\scb.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\scs.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\sync.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\systick.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\tpiu.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\cm3\vector.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\dispatch\nvic.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\MEMORY~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\OTG_CO~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\adc.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\can.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\ADC_CO~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\CRC_CO~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\DAC_CO~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\DMA_CO~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\EXTI_C~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\FLASH_~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\GPIO_C~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\I2C_CO~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\IWDG_C~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\PWR_CO~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\RCC_CO~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\SPI_CO~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\SPI_CO~2.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\ST_USB~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\ST_USB~2.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\TIMER_~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\USART_~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\common\USART_~2.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\crc.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\dac.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\dbgmcu.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\desig.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\dma.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\exti.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\DOC-ST~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\MEMORY~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\adc.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\bkp.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\crc.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\dac.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\dma.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\ethernet.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\exti.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\flash.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\gpio.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\i2c.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\iwdg.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\nvic.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\pwr.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\rcc.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\rtc.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\spi.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\st_usbfs.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\timer.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\f1\usart.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\flash.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\fsmc.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\gpio.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\i2c.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\iwdg.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\otg_fs.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\otg_hs.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\pwr.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\rcc.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\rtc.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\sdio.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\spi.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\st_usbfs.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\timer.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\tools.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\usart.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\stm32\wwdg.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\usb\audio.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\usb\cdc.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\usb\dfu.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\usb\doc-usb.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\usb\hid.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\usb\midi.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\usb\msc.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\usb\usbd.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~1\usb\usbstd.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~2\core_cm3.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~2\dispatch\IRQHAN~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\include\LIBOPE~2\stm32\f1\IRQHAN~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\LIBOPE~1.LD
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\cm3\assert.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\cm3\dwt.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\cm3\nvic.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\cm3\scb.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\cm3\sync.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\cm3\systick.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\cm3\vector.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\dispatch\VECTOR~1.C
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\dispatch\VECTOR~2.C
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\ST_USB~1.C
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\can.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\ADC_CO~1.C
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\CRC_CO~1.C
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\DAC_CO~1.C
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\DMA_CO~1.C
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\EXTI_C~1.C
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\FLASH_~1.C
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\GPIO_C~1.C
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\I2C_CO~1.C
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\IWDG_C~1.C
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\PWR_CO~1.C
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\RCC_CO~1.C
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\SPI_CO~1.C
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\SPI_CO~2.C
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\ST_USB~1.C
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\ST_USB~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\TIMER_~1.C
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\USART_~1.C
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\common\USART_~2.C
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\desig.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\STM32F~1.LD
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\VECTOR~1.C
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\adc.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\crc.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\dac.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\dma.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\ethernet.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\flash.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\gpio.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\i2c.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\iwdg.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\pwr.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\rcc.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\rtc.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\spi.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\timer.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\stm32\f1\usart.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\usb\USB_CO~1.C
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\usb\USB_PR~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\usb\USB_ST~1.C
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\usb\usb.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\LIBOPE~1\lib\usb\usb_msc.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\DESCRI~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\USB_KE~1.H
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\clock.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\config.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\elog.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\extrakey.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\hid.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\keyboard.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\keymap.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\mouse.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\ring.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\serial.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\inc\USB_INC\usb.h
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\src\MEBA8B~1.C
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\src\USB_SRC\clock.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\src\USB_SRC\debug.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\src\USB_SRC\elog.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\src\USB_SRC\extrakey.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\src\USB_SRC\keyboard.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\src\USB_SRC\keymap.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\src\USB_SRC\mouse.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\src\USB_SRC\ring.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\src\USB_SRC\serial.c
C:\Users\KHOI\GOOGLE~1\DOANDA~1\CODE\STM32\36D26F~1.MEA\src\USB_SRC\usb.c
